{
  "address": "0x0e36a1F1a38781705f739ef0eaDDb394De81013B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQueryRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "InvalidTemplate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplyLimited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "overrider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "overrided",
          "type": "bool"
        }
      ],
      "name": "OverrideMintFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetExclusiveContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "SetMaxSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "SetRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StopNewMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenUriPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenUriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "deployMinter",
      "outputs": [
        {
          "internalType": "contract IAxelarSeaMinterInitializable",
          "name": "minter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableMintFeeOverride",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "exclusiveContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exclusiveLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "explicitOwnershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "explicitOwnershipsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMinters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getMinters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_collectionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exclusiveLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_nftSymbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeOverride",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newMinterStopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "overrided",
          "type": "bool"
        }
      ],
      "name": "overrideMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract AxelarSeaProjectRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newPrefix",
          "type": "string"
        }
      ],
      "name": "setBaseTokenUriPrefix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newSuffix",
          "type": "string"
        }
      ],
      "name": "setBaseTokenUriSuffix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setExclusiveContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "setRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopNewMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "tokensOfOwnerIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "walletMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x39f4e0f2940f614f4ed6fd2ee5777bee4c39574fc530b60e14cb8720f74e56a7",
  "receipt": {
    "to": null,
    "from": "0x5ea89D6f46be3E783E45D094FF860f353e9C9c0c",
    "contractAddress": "0x0e36a1F1a38781705f739ef0eaDDb394De81013B",
    "transactionIndex": 0,
    "gasUsed": "3211399",
    "logsBloom": "0x
    "blockHash": "0xb9120e903c7feb6e5d7037413faffd12593320578aebcee911252fc680f75f00",
    "transactionHash": "0x39f4e0f2940f614f4ed6fd2ee5777bee4c39574fc530b60e14cb8720f74e56a7",
    "logs": [],
    "blockNumber": 17204314,
    "cumulativeGasUsed": "3211399",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b4400175bf4ba4fd154fdd2b4f6ab738",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"InvalidTemplate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplyLimited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"overrider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overrided\",\"type\":\"bool\"}],\"name\":\"OverrideMintFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetExclusiveContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"SetMaxSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"SetRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StopNewMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenUriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenUriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deployMinter\",\"outputs\":[{\"internalType\":\"contract IAxelarSeaMinterInitializable\",\"name\":\"minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMintFeeOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exclusiveContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exclusiveLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMinters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getMinters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collectionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exclusiveLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeOverride\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newMinterStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"overrided\",\"type\":\"bool\"}],\"name\":\"overrideMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract AxelarSeaProjectRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newPrefix\",\"type\":\"string\"}],\"name\":\"setBaseTokenUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSuffix\",\"type\":\"string\"}],\"name\":\"setBaseTokenUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExclusiveContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopNewMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mint/AxelarSeaNft721A.sol\":\"AxelarSeaNft721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/lib/ERC721AEnumerable.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721EnumerableExtension {\\r\\n  /**\\r\\n    * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n    * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\r\\n    */\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n    * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n    * Use along with {totalSupply} to enumerate all tokens.\\r\\n    */\\r\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\\r\\nabstract contract ERC721AEnumerable is ERC721AQueryable, IERC721EnumerableExtension {\\r\\n  /**\\r\\n    * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n    * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\r\\n    */\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256) {\\r\\n    return ERC721AQueryable(address(this)).tokensOfOwnerIn(owner, index, index+1)[0];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n    * Use along with {totalSupply} to enumerate all tokens.\\r\\n    */\\r\\n  function tokenByIndex(uint256 index) external pure returns (uint256) {\\r\\n    return index;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x7e539b43531bb470a03215e2d5dcf45ef09fc31a24a15ed9f7475769077a54d8\",\"license\":\"None\"},\"contracts/lib/RevertReason.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n// Credit: https://github.com/ProjectOpenSea/seaport/blob/891b5d4f52b58eb7030597fbb22dca67fd86c4c8/contracts/lib/LowLevelHelpers.sol\\r\\n\\r\\nuint256 constant AlmostOneWord = 0x1f;\\r\\nuint256 constant OneWord = 0x20;\\r\\nuint256 constant FreeMemoryPointerSlot = 0x40;\\r\\nuint256 constant CostPerWord = 3;\\r\\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\\r\\nuint256 constant ExtraGasBuffer = 0x20;\\r\\n\\r\\nlibrary RevertReason {\\r\\n    /**\\r\\n     * @dev Internal view function to revert and pass along the revert reason if\\r\\n     *      data was returned by the last call and that the size of that data\\r\\n     *      does not exceed the currently allocated memory size.\\r\\n     */\\r\\n    function revertWithReasonIfOneIsReturned() internal view {\\r\\n        assembly {\\r\\n            // If it returned a message, bubble it up as long as sufficient gas\\r\\n            // remains to do so:\\r\\n            if returndatasize() {\\r\\n                // Ensure that sufficient gas is available to copy returndata\\r\\n                // while expanding memory where necessary. Start by computing\\r\\n                // the word size of returndata and allocated memory.\\r\\n                let returnDataWords := div(\\r\\n                    add(returndatasize(), AlmostOneWord),\\r\\n                    OneWord\\r\\n                )\\r\\n\\r\\n                // Note: use the free memory pointer in place of msize() to work\\r\\n                // around a Yul warning that prevents accessing msize directly\\r\\n                // when the IR pipeline is activated.\\r\\n                let msizeWords := div(mload(FreeMemoryPointerSlot), OneWord)\\r\\n\\r\\n                // Next, compute the cost of the returndatacopy.\\r\\n                let cost := mul(CostPerWord, returnDataWords)\\r\\n\\r\\n                // Then, compute cost of new memory allocation.\\r\\n                if gt(returnDataWords, msizeWords) {\\r\\n                    cost := add(\\r\\n                        cost,\\r\\n                        add(\\r\\n                            mul(sub(returnDataWords, msizeWords), CostPerWord),\\r\\n                            div(\\r\\n                                sub(\\r\\n                                    mul(returnDataWords, returnDataWords),\\r\\n                                    mul(msizeWords, msizeWords)\\r\\n                                ),\\r\\n                                MemoryExpansionCoefficient\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                }\\r\\n\\r\\n                // Finally, add a small constant and compare to gas remaining;\\r\\n                // bubble up the revert data if enough gas is still available.\\r\\n                if lt(add(cost, ExtraGasBuffer), gas()) {\\r\\n                    // Copy returndata to memory; overwrite existing memory.\\r\\n                    returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n                    // Revert, specifying memory region with copied returndata.\\r\\n                    revert(0, returndatasize())\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb987aae3d26d204009707264a90a6847221d19b825dfad47c52f8aae6303c21\",\"license\":\"MIT\"},\"contracts/lib/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n// Using IERC20 instead of ERC20\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\r\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\r\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\r\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\r\\nlibrary SafeTransferLib {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                             ETH OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function safeTransferETH(address to, uint256 amount) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Transfer the ETH and store if it succeeded or not.\\r\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\r\\n        }\\r\\n\\r\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            ERC20 OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"APPROVE_FAILED\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8eb84ced6e8f7eded1002fc955300db060c431eb425924a76a321045bfb21e19\",\"license\":\"AGPL-3.0-only\"},\"contracts/meta-transactions/ContextMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract ContextMixin {\\r\\n    function msgSender() internal view returns (address sender) {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(\\r\\n                    mload(add(array, index)),\\r\\n                    0xffffffffffffffffffffffffffffffffffffffff\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            sender = msg.sender;\\r\\n        }\\r\\n        return sender;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb41001596c090a8ba2e6a6431db48e37fe6fee28d8104af12679263317c1dae1\",\"license\":\"MIT\"},\"contracts/meta-transactions/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract EIP712Base is Initializable {\\r\\n    struct EIP712Domain {\\r\\n        string name;\\r\\n        string version;\\r\\n        address verifyingContract;\\r\\n        bytes32 salt;\\r\\n    }\\r\\n\\r\\n    string constant public ERC712_VERSION = \\\"1\\\";\\r\\n\\r\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n        )\\r\\n    );\\r\\n    bytes32 internal domainSeperator;\\r\\n\\r\\n    // supposed to be called once while initializing.\\r\\n    // one of the contracts that inherits this contract follows proxy pattern\\r\\n    // so it is not possible to do this in a constructor\\r\\n    function _initializeEIP712(\\r\\n        string memory name\\r\\n    )\\r\\n        internal\\r\\n        initializer\\r\\n    {\\r\\n        _setDomainSeperator(name);\\r\\n    }\\r\\n\\r\\n    function _setDomainSeperator(string memory name) internal {\\r\\n        domainSeperator = keccak256(\\r\\n            abi.encode(\\r\\n                EIP712_DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(ERC712_VERSION)),\\r\\n                getChainId(),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getDomainSeperator() public view returns (bytes32) {\\r\\n        return domainSeperator;\\r\\n    }\\r\\n\\r\\n    function getChainId() public view returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Accept message hash and returns hash message in EIP712 compatible form\\r\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\r\\n     * https://eips.ethereum.org/EIPS/eip-712\\r\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\r\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\r\\n     */\\r\\n    function toTypedMessageHash(bytes32 messageHash)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\r\\n            );\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4fa677a06032724c803ff381308d4b531ad02318e88457fbea902ce40e45cc1c\",\"license\":\"MIT\"},\"contracts/meta-transactions/MetaTransactionVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {EIP712Base} from \\\"./EIP712Base.sol\\\";\\r\\nimport \\\"../seaport/lib/SignatureVerification.sol\\\";\\r\\n\\r\\ncontract MetaTransactionVerifier is EIP712Base, SignatureVerification {\\r\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\r\\n        )\\r\\n    );\\r\\n    event MetaTransactionExecuted(\\r\\n        address userAddress,\\r\\n        address payable relayerAddress,\\r\\n        bytes functionSignature\\r\\n    );\\r\\n    mapping(uint256 => bool) nonces;\\r\\n\\r\\n    /*\\r\\n     * Meta transaction structure.\\r\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\r\\n     * He should call the desired function directly in that case.\\r\\n     */\\r\\n    struct MetaTransaction {\\r\\n        uint256 nonce;\\r\\n        address from;\\r\\n        bytes functionSignature;\\r\\n    }\\r\\n\\r\\n    function verifyMetaTransaction(\\r\\n        address userAddress,\\r\\n        uint256 nonce,\\r\\n        bytes calldata functionSignature,\\r\\n        bytes calldata signature\\r\\n    ) internal {\\r\\n        require(!nonces[nonce], \\\"Already run\\\");\\r\\n\\r\\n        MetaTransaction memory metaTx = MetaTransaction({\\r\\n            nonce: nonce,\\r\\n            from: userAddress,\\r\\n            functionSignature: functionSignature\\r\\n        });\\r\\n\\r\\n        require(\\r\\n            _verifyMetaTransaction(userAddress, metaTx, signature),\\r\\n            \\\"Signer and signature do not match\\\"\\r\\n        );\\r\\n\\r\\n        // mark nonce to prevent tx reuse\\r\\n        nonces[nonce] = true;\\r\\n    }\\r\\n\\r\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    META_TRANSACTION_TYPEHASH,\\r\\n                    metaTx.nonce,\\r\\n                    metaTx.from,\\r\\n                    keccak256(metaTx.functionSignature)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _verifyMetaTransaction(\\r\\n        address signer,\\r\\n        MetaTransaction memory metaTx,\\r\\n        bytes calldata signature\\r\\n    ) internal view returns (bool) {\\r\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\r\\n\\r\\n        // console.log(uint256(toTypedMessageHash(hashMetaTransaction(metaTx))));\\r\\n\\r\\n        _assertValidSignature(signer, toTypedMessageHash(hashMetaTransaction(metaTx)), signature);\\r\\n\\r\\n        return true;\\r\\n\\r\\n        // return\\r\\n        //     signer ==\\r\\n        //     ecrecover(\\r\\n        //         toTypedMessageHash(hashMetaTransaction(metaTx)),\\r\\n        //         sigV,\\r\\n        //         sigR,\\r\\n        //         sigS\\r\\n        //     );\\r\\n    }\\r\\n}\",\"keccak256\":\"0x287d102077ffe0d1845dcb15ba016aacd07a3e53bcc066d032b6d085ac5ddbe7\",\"license\":\"MIT\"},\"contracts/meta-transactions/NativeMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {MetaTransactionVerifier} from \\\"./MetaTransactionVerifier.sol\\\";\\r\\nimport \\\"../lib/RevertReason.sol\\\";\\r\\n\\r\\ncontract NativeMetaTransaction is MetaTransactionVerifier {\\r\\n    function executeMetaTransaction(\\r\\n        address userAddress,\\r\\n        uint256 nonce,\\r\\n        bytes calldata functionSignature,\\r\\n        bytes calldata signature\\r\\n    ) public payable returns (bytes memory) {\\r\\n        verifyMetaTransaction(userAddress, nonce, functionSignature, signature);\\r\\n\\r\\n        emit MetaTransactionExecuted(\\r\\n            userAddress,\\r\\n            payable(msg.sender),\\r\\n            functionSignature\\r\\n        );\\r\\n\\r\\n        // Append userAddress and relayer address at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call(\\r\\n            abi.encodePacked(functionSignature, userAddress)\\r\\n        );\\r\\n\\r\\n        // require(success, \\\"Function call not successful\\\");\\r\\n\\r\\n        if (!success) {\\r\\n            RevertReason.revertWithReasonIfOneIsReturned();\\r\\n            revert(\\\"Function call not successful\\\");\\r\\n        }\\r\\n\\r\\n        return returnData;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcd5f3e1226335d469aa116dec3a987da2a8867500491301bba94d19c73ca8a03\",\"license\":\"MIT\"},\"contracts/mint/AxelarSeaNft721A.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"../lib/ERC721AEnumerable.sol\\\";\\r\\nimport \\\"./lib/AxelarSeaNftBase.sol\\\";\\r\\n\\r\\ncontract AxelarSeaNft721A is ERC721AEnumerable, AxelarSeaNftBase {\\r\\n  constructor() ERC721A(\\\"_\\\", \\\"_\\\") {}\\r\\n\\r\\n  function _mintInternal(address to, uint256 amount) internal override {\\r\\n    walletMinted[to] += amount;\\r\\n\\r\\n    uint256 supply = totalSupply();\\r\\n    if(supply + amount > maxSupply) {\\r\\n      revert SupplyLimited();\\r\\n    }\\r\\n\\r\\n    _safeMint(to, amount);\\r\\n  }\\r\\n\\r\\n  function transferFrom(address from, address to, uint256 tokenId) public virtual override(ERC721A, IERC721A) {\\r\\n    AxelarSeaNftBase._beforeTokenTransferCheck(from);\\r\\n    super.transferFrom(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  function exists(uint256 tokenId) public override view returns(bool) {\\r\\n    return _exists(tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-tokenURI}.\\r\\n    */\\r\\n  function tokenURI(uint256 tokenId) public view override(AxelarSeaNftBase, ERC721A, IERC721A) virtual returns (string memory) {\\r\\n    return AxelarSeaNftBase.tokenURI(tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-name}.\\r\\n    */\\r\\n  function name() public view override(AxelarSeaNftBase, ERC721A, IERC721A) virtual returns (string memory) {\\r\\n    return AxelarSeaNftBase.name();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-symbol}.\\r\\n    */\\r\\n  function symbol() public view override(AxelarSeaNftBase, ERC721A, IERC721A) virtual returns (string memory) {\\r\\n    return AxelarSeaNftBase.symbol();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC165-supportsInterface}.\\r\\n    */\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(AxelarSeaNftBase, ERC721A, IERC721A) returns (bool) {\\r\\n    return AxelarSeaNftBase.supportsInterface(interfaceId) || ERC721A.supportsInterface(interfaceId);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x7480542f29b39cafff02f9613e63791e51476cbb8dbc77ef93eaaafd0bf75799\",\"license\":\"None\"},\"contracts/mint/AxelarSeaProjectRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./lib/IAxelarSeaNftInitializable.sol\\\";\\r\\nimport \\\"../meta-transactions/NativeMetaTransaction.sol\\\";\\r\\nimport \\\"../meta-transactions/ContextMixin.sol\\\";\\r\\nimport \\\"../lib/SafeTransferLib.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./lib/AxelarSeaMintingErrors.sol\\\";\\r\\n\\r\\ncontract AxelarSeaProjectRegistry is OwnableUpgradeable, NativeMetaTransaction, ContextMixin, ReentrancyGuardUpgradeable {\\r\\n  using SafeTransferLib for IERC20;\\r\\n\\r\\n  mapping(address => bool) public operators;\\r\\n  mapping(address => bool) public templates;\\r\\n  mapping(address => bool) public minterTemplates;\\r\\n  mapping(address => bool) public axelarSeaContract;\\r\\n\\r\\n  mapping(bytes32 => address) public projectOwner;\\r\\n  mapping(address => bytes32) public nftProject;\\r\\n\\r\\n  // 1 = Member, 2 = Admin\\r\\n  mapping(bytes32 => mapping(address => uint256)) public projectMember;\\r\\n\\r\\n  // Collection ID -> contract address\\r\\n  mapping(bytes32 => address) public collectionMapping;\\r\\n\\r\\n  // Minting fee\\r\\n  address public feeAddress;\\r\\n  uint256 public baseMintFee;\\r\\n\\r\\n  string public baseContractURI;\\r\\n  string public baseTokenURI;\\r\\n\\r\\n  // Deployment fee\\r\\n  address public newProjectFeeAddress;\\r\\n  uint256 public newProjectFeeAmount;\\r\\n\\r\\n  address public newCollectionFeeAddress;\\r\\n  uint256 public newCollectionFeeAmount;\\r\\n\\r\\n  // Best practice to leave room for more variable if upgradeable\\r\\n  uint256[200] private __GAP;\\r\\n\\r\\n  function initialize() public initializer {\\r\\n    baseMintFee = 0.02 ether; // 2%\\r\\n    baseContractURI = \\\"https://api-nftdrop.axelarsea.com/contractMetadata/\\\"; // TODO\\r\\n    baseTokenURI = \\\"https://api-nftdrop.axelarsea.com/tokenMetadata/\\\"; // TODO\\r\\n\\r\\n    feeAddress = msg.sender;\\r\\n    _initializeEIP712(\\\"AxelarSeaProjectRegistry\\\");\\r\\n\\r\\n    __Ownable_init();\\r\\n    __ReentrancyGuard_init();\\r\\n  }\\r\\n\\r\\n  modifier onlyOperator {\\r\\n    require(operators[msgSender()], \\\"Not Operator\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  event SetNewProjectFee(address indexed token, uint256 fee);\\r\\n  function setNewProjectFee(address token, uint256 fee) public onlyOwner {\\r\\n    newProjectFeeAddress = token;\\r\\n    newProjectFeeAmount = fee;\\r\\n    emit SetNewProjectFee(token, fee);\\r\\n  }\\r\\n\\r\\n  event SetNewCollectionFee(address indexed token, uint256 fee);\\r\\n  function setNewCollectionFee(address token, uint256 fee) public onlyOwner {\\r\\n    newCollectionFeeAddress = token;\\r\\n    newCollectionFeeAmount = fee;\\r\\n    emit SetNewCollectionFee(token, fee);\\r\\n  }\\r\\n\\r\\n  event SetMintFee(address indexed addr, uint256 fee);\\r\\n  function setMintFee(address addr, uint256 fee) public onlyOwner {\\r\\n    require(fee <= 1 ether, \\\"Too much fee\\\");\\r\\n    feeAddress = addr;\\r\\n    baseMintFee = fee;\\r\\n    emit SetMintFee(addr, fee);\\r\\n  }\\r\\n\\r\\n  event SetOperator(address indexed operator, bool enabled);\\r\\n  function setOperator(address operator, bool enabled) public onlyOwner {\\r\\n    operators[operator] = enabled;\\r\\n    emit SetOperator(operator, enabled);\\r\\n  }\\r\\n\\r\\n  event SetMinterTemplate(address indexed template, bool enabled);\\r\\n  function setMinterTemplate(address template, bool enabled) public onlyOwner {\\r\\n    minterTemplates[template] = enabled;\\r\\n    emit SetMinterTemplate(template, enabled);\\r\\n  }\\r\\n\\r\\n  event SetTemplate(address indexed template, bool enabled);\\r\\n  function setTemplate(address template, bool enabled) public onlyOwner {\\r\\n    templates[template] = enabled;\\r\\n    emit SetTemplate(template, enabled);\\r\\n  }\\r\\n\\r\\n  event SetAxelarSeaContract(address indexed addr, bool enabled);\\r\\n  function setAxelarSeaContract(address addr, bool enabled) public onlyOwner {\\r\\n    axelarSeaContract[addr] = enabled;\\r\\n    emit SetAxelarSeaContract(addr, enabled);\\r\\n  }\\r\\n\\r\\n  event NewProject(address indexed owner, bytes32 projectId);\\r\\n  function _newProject(address owner, bytes32 projectId) public onlyOperator {\\r\\n    projectOwner[projectId] = owner;\\r\\n    projectMember[projectId][owner] = 2;\\r\\n\\r\\n    // New project fee only paid once per chain\\r\\n    if (newProjectFeeAddress != address(0) && newProjectFeeAmount > 0) {\\r\\n      IERC20(newProjectFeeAddress).safeTransferFrom(msgSender(), address(this), newProjectFeeAmount);\\r\\n    }\\r\\n\\r\\n    emit NewProject(owner, projectId);\\r\\n  }\\r\\n\\r\\n  function newProject(address owner, bytes32 projectId) public onlyOperator {\\r\\n    if (owner == address(0)) revert Forbidden();\\r\\n    _newProject(owner, projectId);\\r\\n  }\\r\\n\\r\\n  event SetProjectMember(bytes32 indexed projectId, address indexed member, uint256 level);\\r\\n  function setProjectMember(bytes32 projectId, address member, uint256 level) public {\\r\\n    // Invalid level || Not admin || Change owner || Invalid project -> Forbidden || Invalid member -> Forbidden\\r\\n    if(level > 2 || projectMember[projectId][msgSender()] != 2 || member == projectOwner[projectId] || projectOwner[projectId] == address(0) || member == address(0)) revert Forbidden();\\r\\n    projectMember[projectId][member] = level;\\r\\n    emit SetProjectMember(projectId, member, level);\\r\\n  }\\r\\n\\r\\n  event SetProjectOwner(bytes32 indexed projectId, address indexed owner);\\r\\n  function setProjectOwner(bytes32 projectId, address owner) public {\\r\\n    // Not owner || New member not admin || Invalid project || Invalid owner -> Forbidden\\r\\n    if(msgSender() != projectOwner[projectId] || projectMember[projectId][owner] != 2 || projectOwner[projectId] == address(0) || owner == address(0)) revert Forbidden();\\r\\n    projectOwner[projectId] = owner;\\r\\n    emit SetProjectOwner(projectId, owner);\\r\\n  }\\r\\n\\r\\n  // Only linkable if that NFT implement Ownable\\r\\n  event LinkProject(address indexed contractAddress, bytes32 projectId);\\r\\n  function _linkProject(address contractAddress, bytes32 projectId) internal {\\r\\n    address owner = Ownable(contractAddress).owner();\\r\\n\\r\\n    // If no owner || owner of nft is not a member of project -> Forbidden\\r\\n    if(owner == address(0) || projectMember[projectId][owner] == 0) revert Forbidden();\\r\\n\\r\\n    nftProject[contractAddress] = projectId;\\r\\n\\r\\n    emit LinkProject(contractAddress, projectId);\\r\\n  }\\r\\n\\r\\n  function linkProject(address contractAddress, bytes32 projectId) public nonReentrant {\\r\\n    // Check support interface\\r\\n    require(IERC165(contractAddress).supportsInterface(0x80ac58cd) || IERC165(contractAddress).supportsInterface(0xd9b67a26), \\\"Not NFT\\\");\\r\\n\\r\\n    _linkProject(contractAddress, projectId);\\r\\n  }\\r\\n\\r\\n  event DeployNft(address indexed template, address indexed owner, address indexed contractAddress, bytes32 collectionId, bytes32 projectId);\\r\\n  function deployNft(\\r\\n    address template,\\r\\n    address owner,\\r\\n    bytes32 collectionId,\\r\\n    bytes32 projectId,\\r\\n    uint256 exclusiveLevel,\\r\\n    uint256 maxSupply,\\r\\n    address royaltyReceiver,\\r\\n    uint256 royaltyPercentage,\\r\\n    string memory name,\\r\\n    string memory symbol\\r\\n  ) public onlyOperator nonReentrant returns(IAxelarSeaNftInitializable nft) {\\r\\n    if (!templates[template]) {\\r\\n      revert InvalidTemplate(template);\\r\\n    }\\r\\n\\r\\n    if (collectionMapping[collectionId] != address(0)) {\\r\\n      revert DuplicatedCollection(collectionId);\\r\\n    }\\r\\n\\r\\n    // Collection deployment fee\\r\\n    if (newCollectionFeeAddress != address(0) && newCollectionFeeAmount > 0) {\\r\\n      IERC20(newCollectionFeeAddress).safeTransferFrom(msgSender(), address(this), newCollectionFeeAmount);\\r\\n    }\\r\\n\\r\\n    nft = IAxelarSeaNftInitializable(Clones.clone(template));\\r\\n    nft.initialize(owner, collectionId, exclusiveLevel, maxSupply, name, symbol);\\r\\n\\r\\n    if (projectOwner[projectId] == address(0)) {\\r\\n      _newProject(owner, projectId);\\r\\n    }\\r\\n    \\r\\n    _linkProject(address(nft), projectId);\\r\\n\\r\\n    if (royaltyReceiver != address(0)) {\\r\\n      nft.setRoyalty(royaltyReceiver, royaltyPercentage);\\r\\n    }\\r\\n\\r\\n    collectionMapping[collectionId] = address(nft);\\r\\n\\r\\n    emit DeployNft(template, owner, address(nft), collectionId, projectId);\\r\\n  }\\r\\n\\r\\n  function deployNftWithMinter(\\r\\n    address template,\\r\\n    address minterTemplate,\\r\\n    address owner,\\r\\n    bytes32 collectionId,\\r\\n    bytes32 projectId,\\r\\n    uint256 exclusiveLevel,\\r\\n    uint256 maxSupply,\\r\\n    address royaltyReceiver,\\r\\n    uint256 royaltyPercentage,\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    bytes memory data\\r\\n  ) public onlyOperator nonReentrant returns(IAxelarSeaNftInitializable nft, IAxelarSeaMinterInitializable minter) {\\r\\n    if (!templates[template]) {\\r\\n      revert InvalidTemplate(template);\\r\\n    }\\r\\n\\r\\n    if (!minterTemplates[minterTemplate]) {\\r\\n      revert InvalidTemplate(minterTemplate);\\r\\n    }\\r\\n  \\r\\n    if (collectionMapping[collectionId] != address(0)) {\\r\\n      revert DuplicatedCollection(collectionId);\\r\\n    }\\r\\n\\r\\n    // Collection deployment fee\\r\\n    if (newCollectionFeeAddress != address(0) && newCollectionFeeAmount > 0) {\\r\\n      IERC20(newCollectionFeeAddress).safeTransferFrom(msgSender(), address(this), newCollectionFeeAmount);\\r\\n    }\\r\\n\\r\\n    nft = IAxelarSeaNftInitializable(Clones.clone(template));\\r\\n    nft.initialize(owner, collectionId, exclusiveLevel, maxSupply, name, symbol);\\r\\n\\r\\n    if (projectOwner[projectId] == address(0)) {\\r\\n      _newProject(owner, projectId);\\r\\n    }\\r\\n    \\r\\n    _linkProject(address(nft), projectId);\\r\\n\\r\\n    minter = nft.deployMinter(minterTemplate, data);\\r\\n\\r\\n    if (royaltyReceiver != address(0)) {\\r\\n      nft.setRoyalty(royaltyReceiver, royaltyPercentage);\\r\\n    }\\r\\n\\r\\n    collectionMapping[collectionId] = address(nft);\\r\\n\\r\\n    emit DeployNft(template, owner, address(nft), collectionId, projectId);\\r\\n  }\\r\\n\\r\\n  function setBaseContractURI(string memory _uri) public onlyOwner {\\r\\n    baseContractURI = _uri;\\r\\n  }\\r\\n\\r\\n  function setBaseTokenURI(string memory _uri) public onlyOwner {\\r\\n    baseTokenURI = _uri;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xec3a6ba46506347857d2515f2da2be00e944326545f2aa1a927ca30f253e8c68\",\"license\":\"None\"},\"contracts/mint/lib/AxelarSeaMintingErrors.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nerror InvalidTemplate(address template);\\r\\nerror Forbidden();\\r\\nerror NotMintingTime();\\r\\nerror MintPerWalletLimited(uint256 maxAmount);\\r\\nerror SupplyLimited();\\r\\nerror NotWhitelisted();\\r\\nerror TransferFailed();\\r\\nerror DuplicatedCollection(bytes32 collectionId);\",\"keccak256\":\"0x9194f7a9fbc64488d4a0e9c749a15a2f2b167ca10649710c27cdda006c046250\",\"license\":\"None\"},\"contracts/mint/lib/AxelarSeaNftBase.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n// import \\\"../meta-transactions/MetaTransactionVerifier.sol\\\";\\r\\nimport \\\"./IAxelarSeaNftInitializable.sol\\\";\\r\\nimport \\\"../AxelarSeaProjectRegistry.sol\\\";\\r\\n\\r\\nimport \\\"./AxelarSeaMintingErrors.sol\\\";\\r\\n\\r\\n// Use Upgradeable for minimal clone pattern but actually is is not upgradeable\\r\\nabstract contract AxelarSeaNftBase is OwnableUpgradeable, IAxelarSeaNftInitializable, ReentrancyGuardUpgradeable, IERC2981, ERC165 {\\r\\n  using Strings for uint256;\\r\\n  using SafeTransferLib for IERC20;\\r\\n  using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n  bool public newMinterStopped; // default to false\\r\\n\\r\\n  AxelarSeaProjectRegistry public registry;\\r\\n  address public fundAddress;\\r\\n\\r\\n  bytes32 public collectionId;\\r\\n  string private nftName;\\r\\n  string private nftSymbol;\\r\\n  uint256 public exclusiveLevel;\\r\\n  uint256 public maxSupply;\\r\\n\\r\\n  mapping(address => bool) public exclusiveContract;\\r\\n  EnumerableSet.AddressSet private minters;\\r\\n  mapping(address => uint256) public walletMinted;\\r\\n\\r\\n  uint256 public mintFeeOverride; // default to 0\\r\\n  bool public enableMintFeeOverride; // default to false\\r\\n\\r\\n  string public baseTokenUriPrefix;\\r\\n  string public baseTokenUriSuffix;\\r\\n\\r\\n  address public royaltyReceiver;\\r\\n  uint256 public royaltyPercentage;\\r\\n\\r\\n  modifier onlyMinter(address addr) {\\r\\n    if (!minters.contains(addr)) revert Forbidden();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwnerOrProjectRegistry() {\\r\\n    if (msg.sender != owner() && msg.sender != address(registry)) {\\r\\n      revert Forbidden();\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    address owner,\\r\\n    bytes32 _collectionId,\\r\\n    uint256 _exclusiveLevel,\\r\\n    uint256 _maxSupply,\\r\\n    string memory _nftName,\\r\\n    string memory _nftSymbol\\r\\n  ) public initializer {\\r\\n    registry = AxelarSeaProjectRegistry(msg.sender);\\r\\n    collectionId = _collectionId;\\r\\n    exclusiveLevel = _exclusiveLevel;\\r\\n    maxSupply = _maxSupply;\\r\\n    nftName = _nftName;\\r\\n    nftSymbol = _nftSymbol;\\r\\n\\r\\n    fundAddress = owner;\\r\\n\\r\\n    _transferOwnership(owner);\\r\\n    __ReentrancyGuard_init();\\r\\n  }\\r\\n\\r\\n  event StopNewMinter();\\r\\n  function stopNewMinter() public onlyOwner {\\r\\n    newMinterStopped = true;\\r\\n    emit StopNewMinter();\\r\\n  }\\r\\n\\r\\n  event SetMaxSupply(uint256 supply);\\r\\n  function setMaxSupply(uint256 newSupply) public onlyOwner {\\r\\n    if (newMinterStopped) {\\r\\n      revert Forbidden();\\r\\n    }\\r\\n\\r\\n    maxSupply = newSupply;\\r\\n    emit SetMaxSupply(newSupply);\\r\\n  }\\r\\n\\r\\n  event SetMinter(address indexed minter, bool enabled);\\r\\n  function setMinter(address minter, bool enabled) public onlyOwner {\\r\\n    if (newMinterStopped) {\\r\\n      revert Forbidden();\\r\\n    }\\r\\n\\r\\n    if (enabled) {\\r\\n      minters.add(minter);\\r\\n    } else {\\r\\n      minters.remove(minter);\\r\\n    }\\r\\n    \\r\\n    emit SetMinter(minter, enabled);\\r\\n  }\\r\\n\\r\\n  function isMinter(address minter) public view returns(bool) {\\r\\n    return minters.contains(minter);\\r\\n  }\\r\\n\\r\\n  function mintersLength() public view returns(uint256) {\\r\\n    return minters.length();\\r\\n  }\\r\\n\\r\\n  function getMinters(uint256 start, uint256 end) public view returns(address[] memory) {\\r\\n    uint256 length = end - start;\\r\\n    address[] memory result = new address[](length);\\r\\n\\r\\n    unchecked {\\r\\n      for (uint256 i = 0; i < length; i++) {\\r\\n        result[i] = minters.at(start + i);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  function getAllMinters() public view returns(address[] memory) {\\r\\n    return getMinters(0, mintersLength());\\r\\n  }\\r\\n\\r\\n  function deployMinter(address template, bytes memory data) public onlyOwnerOrProjectRegistry nonReentrant returns(IAxelarSeaMinterInitializable minter) {\\r\\n    if (!registry.minterTemplates(template)) {\\r\\n      revert InvalidTemplate(template);\\r\\n    }\\r\\n\\r\\n    minter = IAxelarSeaMinterInitializable(Clones.clone(template));\\r\\n    minter.initialize(address(this), owner(), data);\\r\\n\\r\\n    minters.add(address(minter));\\r\\n    emit SetMinter(address(minter), true);\\r\\n  }\\r\\n\\r\\n  event SetExclusiveContract(address indexed addr, bool enabled);\\r\\n  function setExclusiveContract(address addr, bool enabled) public {\\r\\n    if (msg.sender != owner() && !registry.operators(msg.sender)) {\\r\\n      revert Forbidden();\\r\\n    }\\r\\n\\r\\n    exclusiveContract[addr] = enabled;\\r\\n    emit SetExclusiveContract(addr, enabled);\\r\\n  }\\r\\n\\r\\n  event OverrideMintFee(address indexed overrider, uint256 newFee, bool overrided);\\r\\n  function overrideMintFee(uint256 newFee, bool overrided) public {\\r\\n    if (!registry.operators(msg.sender)) {\\r\\n      revert Forbidden();\\r\\n    }\\r\\n\\r\\n    enableMintFeeOverride = overrided;\\r\\n    mintFeeOverride = newFee;\\r\\n    emit OverrideMintFee(msg.sender, newFee, overrided);\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransferCheck(address from) internal view {\\r\\n    if (from != address(0)) {\\r\\n      // Produce human readable message to be easier for debug\\r\\n      require(exclusiveLevel < 2, \\\"Soulbound\\\");\\r\\n      require(exclusiveLevel < 1 || registry.axelarSeaContract(msg.sender) || exclusiveContract[msg.sender], \\\"Exclusive to AxelarSea\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _mintInternal(address to, uint256 amount) internal virtual;\\r\\n\\r\\n  function mintFee() public view returns(uint256) {\\r\\n    return (enableMintFeeOverride ? mintFeeOverride : registry.baseMintFee());\\r\\n  }\\r\\n\\r\\n  function mint(address to, uint256 amount) public onlyMinter(msg.sender) nonReentrant {\\r\\n    _mintInternal(to, amount);\\r\\n  }\\r\\n\\r\\n  function setBaseTokenUriPrefix(string memory newPrefix) public onlyOwner {\\r\\n    baseTokenUriPrefix = newPrefix;\\r\\n  }\\r\\n\\r\\n  function setBaseTokenUriSuffix(string memory newSuffix) public onlyOwner {\\r\\n    baseTokenUriSuffix = newSuffix;\\r\\n  }\\r\\n\\r\\n  function recoverETH() external onlyOwner {\\r\\n    (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n\\r\\n    if (!success) {\\r\\n      revert TransferFailed();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function recoverERC20(IERC20 token) external onlyOwner {\\r\\n    token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\r\\n  }\\r\\n\\r\\n  function exists(uint256 tokenId) public virtual view returns(bool);\\r\\n\\r\\n  function projectId() public view returns(bytes32) {\\r\\n    return registry.nftProject(address(this));\\r\\n  }\\r\\n\\r\\n  // Opensea standard contractURI\\r\\n  function contractURI() external view returns (string memory) {\\r\\n    return string(abi.encodePacked(registry.baseContractURI(), uint256(collectionId).toHexString()));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-tokenURI}.\\r\\n    */\\r\\n  function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\r\\n    require(exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n    if (bytes(baseTokenUriPrefix).length == 0) {\\r\\n      return string(abi.encodePacked(registry.baseTokenURI(), uint256(collectionId).toHexString(), \\\"/\\\", tokenId.toString()));\\r\\n    } else {\\r\\n      return string(abi.encodePacked(baseTokenUriPrefix, tokenId.toString(), baseTokenUriSuffix));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-name}.\\r\\n    */\\r\\n  function name() public view virtual returns (string memory) {\\r\\n    return nftName;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-symbol}.\\r\\n    */\\r\\n  function symbol() public view virtual returns (string memory) {\\r\\n    return nftSymbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC165-supportsInterface}.\\r\\n    */\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n    return super.supportsInterface(interfaceId) || interfaceId == type(IERC2981).interfaceId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\r\\n    * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\r\\n    */\\r\\n  function royaltyInfo(uint256, uint256 salePrice) external view virtual override returns (address receiver, uint256 royaltyAmount) {\\r\\n    receiver = royaltyReceiver;\\r\\n    royaltyAmount = salePrice * royaltyPercentage / 1e18;\\r\\n  }\\r\\n\\r\\n  event SetRoyalty(address indexed receiver, uint256 indexed percentage);\\r\\n  function setRoyalty(address receiver, uint256 percentage) public onlyOwnerOrProjectRegistry {\\r\\n    royaltyReceiver = receiver;\\r\\n    royaltyPercentage = percentage;\\r\\n\\r\\n    emit SetRoyalty(royaltyReceiver, royaltyPercentage);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xf89debc5a07dd9e8e7a05158b0e003d97b73f8076d3eb31e67b6def4ad35c613\",\"license\":\"None\"},\"contracts/mint/lib/IAxelarSeaNftInitializable.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAxelarSeaNftInitializable {\\r\\n  function initialize(\\r\\n    address owner,\\r\\n    bytes32 collectionId,\\r\\n    uint256 exclusiveLevel,\\r\\n    uint256 maxSupply,\\r\\n    string memory name, \\r\\n    string memory symbol\\r\\n  ) external;\\r\\n\\r\\n  function deployMinter(\\r\\n    address template,\\r\\n    bytes memory data\\r\\n  ) external returns(IAxelarSeaMinterInitializable minter);\\r\\n\\r\\n  function mint(address to, uint256 amount) external;\\r\\n\\r\\n  function setRoyalty(address receiver, uint256 percentage) external;\\r\\n}\\r\\n\\r\\ninterface IAxelarSeaMinterInitializable {\\r\\n  function initialize(\\r\\n    address targetNft,\\r\\n    address owner,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xce8bd5f59820df941e95c6e110f021f6db5992c9685e7e76cd2ca7222fcb411d\",\"license\":\"None\"},\"contracts/seaport/interfaces/EIP1271Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface EIP1271Interface {\\r\\n    function isValidSignature(bytes32 digest, bytes calldata signature)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xb71aea6c8df453f992f54a62e69bd99ddc74938a43d71a622f52ace6c81372fd\",\"license\":\"MIT\"},\"contracts/seaport/interfaces/SignatureVerificationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/**\\r\\n * @title SignatureVerificationErrors\\r\\n * @author 0age\\r\\n * @notice SignatureVerificationErrors contains all errors related to signature\\r\\n *         verification.\\r\\n */\\r\\ninterface SignatureVerificationErrors {\\r\\n    /**\\r\\n     * @dev Revert with an error when a signature that does not contain a v\\r\\n     *      value of 27 or 28 has been supplied.\\r\\n     *\\r\\n     * @param v The invalid v value.\\r\\n     */\\r\\n    error BadSignatureV(uint8 v);\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with an error when the signer recovered by the supplied\\r\\n     *      signature does not match the offerer or an allowed EIP-1271 signer\\r\\n     *      as specified by the offerer in the event they are a contract.\\r\\n     */\\r\\n    error InvalidSigner();\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with an error when a signer cannot be recovered from the\\r\\n     *      supplied signature.\\r\\n     */\\r\\n    error InvalidSignature();\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with an error when an EIP-1271 call to an account fails.\\r\\n     */\\r\\n    error BadContractSignature();\\r\\n}\\r\\n\",\"keccak256\":\"0xdbf5f5e170028ae579ecd0846aedb7b304fa54db5eb37236bd180a7bcc2dd70a\",\"license\":\"MIT\"},\"contracts/seaport/lib/ConsiderationConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/*\\r\\n * -------------------------- Disambiguation & Other Notes ---------------------\\r\\n *    - The term \\\"head\\\" is used as it is in the documentation for ABI encoding,\\r\\n *      but only in reference to dynamic types, i.e. it always refers to the\\r\\n *      offset or pointer to the body of a dynamic type. In calldata, the head\\r\\n *      is always an offset (relative to the parent object), while in memory,\\r\\n *      the head is always the pointer to the body. More information found here:\\r\\n *      https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#argument-encoding\\r\\n *        - Note that the length of an array is separate from and precedes the\\r\\n *          head of the array.\\r\\n *\\r\\n *    - The term \\\"body\\\" is used in place of the term \\\"head\\\" used in the ABI\\r\\n *      documentation. It refers to the start of the data for a dynamic type,\\r\\n *      e.g. the first word of a struct or the first word of the first element\\r\\n *      in an array.\\r\\n *\\r\\n *    - The term \\\"pointer\\\" is used to describe the absolute position of a value\\r\\n *      and never an offset relative to another value.\\r\\n *        - The suffix \\\"_ptr\\\" refers to a memory pointer.\\r\\n *        - The suffix \\\"_cdPtr\\\" refers to a calldata pointer.\\r\\n *\\r\\n *    - The term \\\"offset\\\" is used to describe the position of a value relative\\r\\n *      to some parent value. For example, OrderParameters_conduit_offset is the\\r\\n *      offset to the \\\"conduit\\\" value in the OrderParameters struct relative to\\r\\n *      the start of the body.\\r\\n *        - Note: Offsets are used to derive pointers.\\r\\n *\\r\\n *    - Some structs have pointers defined for all of their fields in this file.\\r\\n *      Lines which are commented out are fields that are not used in the\\r\\n *      codebase but have been left in for readability.\\r\\n */\\r\\n\\r\\n// Declare constants for name, version, and reentrancy sentinel values.\\r\\n\\r\\n// Name is right padded, so it touches the length which is left padded. This\\r\\n// enables writing both values at once. Length goes at byte 95 in memory, and\\r\\n// name fills bytes 96-109, so both values can be written left-padded to 77.\\r\\nuint256 constant NameLengthPtr = 77;\\r\\nuint256 constant NameWithLength = 0x0d436F6E73696465726174696F6E;\\r\\n\\r\\nuint256 constant Version = 0x312e31;\\r\\nuint256 constant Version_length = 3;\\r\\nuint256 constant Version_shift = 0xe8;\\r\\n\\r\\nuint256 constant _NOT_ENTERED = 1;\\r\\nuint256 constant _ENTERED = 2;\\r\\n\\r\\n// Common Offsets\\r\\n// Offsets for identically positioned fields shared by:\\r\\n// OfferItem, ConsiderationItem, SpentItem, ReceivedItem\\r\\n\\r\\nuint256 constant Common_token_offset = 0x20;\\r\\nuint256 constant Common_identifier_offset = 0x40;\\r\\nuint256 constant Common_amount_offset = 0x60;\\r\\n\\r\\nuint256 constant ReceivedItem_size = 0xa0;\\r\\nuint256 constant ReceivedItem_amount_offset = 0x60;\\r\\nuint256 constant ReceivedItem_recipient_offset = 0x80;\\r\\n\\r\\nuint256 constant ReceivedItem_CommonParams_size = 0x60;\\r\\n\\r\\nuint256 constant ConsiderationItem_recipient_offset = 0xa0;\\r\\n// Store the same constant in an abbreviated format for a line length fix.\\r\\nuint256 constant ConsiderItem_recipient_offset = 0xa0;\\r\\n\\r\\nuint256 constant Execution_offerer_offset = 0x20;\\r\\nuint256 constant Execution_conduit_offset = 0x40;\\r\\n\\r\\nuint256 constant InvalidFulfillmentComponentData_error_signature = (\\r\\n    0x7fda727900000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidFulfillmentComponentData_error_len = 0x04;\\r\\n\\r\\nuint256 constant Panic_error_signature = (\\r\\n    0x4e487b7100000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant Panic_error_offset = 0x04;\\r\\nuint256 constant Panic_error_length = 0x24;\\r\\nuint256 constant Panic_arithmetic = 0x11;\\r\\n\\r\\nuint256 constant MissingItemAmount_error_signature = (\\r\\n    0x91b3e51400000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant MissingItemAmount_error_len = 0x04;\\r\\n\\r\\nuint256 constant OrderParameters_offer_head_offset = 0x40;\\r\\nuint256 constant OrderParameters_consideration_head_offset = 0x60;\\r\\nuint256 constant OrderParameters_conduit_offset = 0x120;\\r\\nuint256 constant OrderParameters_counter_offset = 0x140;\\r\\n\\r\\nuint256 constant Fulfillment_itemIndex_offset = 0x20;\\r\\n\\r\\nuint256 constant AdvancedOrder_numerator_offset = 0x20;\\r\\n\\r\\nuint256 constant AlmostOneWord = 0x1f;\\r\\nuint256 constant OneWord = 0x20;\\r\\nuint256 constant TwoWords = 0x40;\\r\\nuint256 constant ThreeWords = 0x60;\\r\\nuint256 constant FourWords = 0x80;\\r\\nuint256 constant FiveWords = 0xa0;\\r\\n\\r\\nuint256 constant FreeMemoryPointerSlot = 0x40;\\r\\nuint256 constant ZeroSlot = 0x60;\\r\\nuint256 constant DefaultFreeMemoryPointer = 0x80;\\r\\n\\r\\nuint256 constant Slot0x80 = 0x80;\\r\\nuint256 constant Slot0xA0 = 0xa0;\\r\\n\\r\\nuint256 constant BasicOrder_endAmount_cdPtr = 0x104;\\r\\nuint256 constant BasicOrder_common_params_size = 0xa0;\\r\\nuint256 constant BasicOrder_considerationHashesArray_ptr = 0x160;\\r\\n\\r\\nuint256 constant EIP712_Order_size = 0x180;\\r\\nuint256 constant EIP712_OfferItem_size = 0xc0;\\r\\nuint256 constant EIP712_ConsiderationItem_size = 0xe0;\\r\\nuint256 constant AdditionalRecipients_size = 0x40;\\r\\n\\r\\nuint256 constant EIP712_DomainSeparator_offset = 0x02;\\r\\nuint256 constant EIP712_OrderHash_offset = 0x22;\\r\\nuint256 constant EIP712_DigestPayload_size = 0x42;\\r\\n\\r\\nuint256 constant receivedItemsHash_ptr = 0x60;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  data for OrderFulfilled\\r\\n *\\r\\n *   event OrderFulfilled(\\r\\n *     bytes32 orderHash,\\r\\n *     address indexed offerer,\\r\\n *     address indexed zone,\\r\\n *     address fulfiller,\\r\\n *     SpentItem[] offer,\\r\\n *       > (itemType, token, id, amount)\\r\\n *     ReceivedItem[] consideration\\r\\n *       > (itemType, token, id, amount, recipient)\\r\\n *   )\\r\\n *\\r\\n *  - 0x00: orderHash\\r\\n *  - 0x20: fulfiller\\r\\n *  - 0x40: offer offset (0x80)\\r\\n *  - 0x60: consideration offset (0x120)\\r\\n *  - 0x80: offer.length (1)\\r\\n *  - 0xa0: offerItemType\\r\\n *  - 0xc0: offerToken\\r\\n *  - 0xe0: offerIdentifier\\r\\n *  - 0x100: offerAmount\\r\\n *  - 0x120: consideration.length (1 + additionalRecipients.length)\\r\\n *  - 0x140: considerationItemType\\r\\n *  - 0x160: considerationToken\\r\\n *  - 0x180: considerationIdentifier\\r\\n *  - 0x1a0: considerationAmount\\r\\n *  - 0x1c0: considerationRecipient\\r\\n *  - ...\\r\\n */\\r\\n\\r\\n// Minimum length of the OrderFulfilled event data.\\r\\n// Must be added to the size of the ReceivedItem array for additionalRecipients\\r\\n// (0xa0 * additionalRecipients.length) to calculate full size of the buffer.\\r\\nuint256 constant OrderFulfilled_baseSize = 0x1e0;\\r\\nuint256 constant OrderFulfilled_selector = (\\r\\n    0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31\\r\\n);\\r\\n\\r\\n// Minimum offset in memory to OrderFulfilled event data.\\r\\n// Must be added to the size of the EIP712 hash array for additionalRecipients\\r\\n// (32 * additionalRecipients.length) to calculate the pointer to event data.\\r\\nuint256 constant OrderFulfilled_baseOffset = 0x180;\\r\\nuint256 constant OrderFulfilled_consideration_length_baseOffset = 0x2a0;\\r\\nuint256 constant OrderFulfilled_offer_length_baseOffset = 0x200;\\r\\n\\r\\n// uint256 constant OrderFulfilled_orderHash_offset = 0x00;\\r\\nuint256 constant OrderFulfilled_fulfiller_offset = 0x20;\\r\\nuint256 constant OrderFulfilled_offer_head_offset = 0x40;\\r\\nuint256 constant OrderFulfilled_offer_body_offset = 0x80;\\r\\nuint256 constant OrderFulfilled_consideration_head_offset = 0x60;\\r\\nuint256 constant OrderFulfilled_consideration_body_offset = 0x120;\\r\\n\\r\\n// BasicOrderParameters\\r\\nuint256 constant BasicOrder_parameters_cdPtr = 0x04;\\r\\nuint256 constant BasicOrder_considerationToken_cdPtr = 0x24;\\r\\n// uint256 constant BasicOrder_considerationIdentifier_cdPtr = 0x44;\\r\\nuint256 constant BasicOrder_considerationAmount_cdPtr = 0x64;\\r\\nuint256 constant BasicOrder_offerer_cdPtr = 0x84;\\r\\nuint256 constant BasicOrder_zone_cdPtr = 0xa4;\\r\\nuint256 constant BasicOrder_offerToken_cdPtr = 0xc4;\\r\\n// uint256 constant BasicOrder_offerIdentifier_cdPtr = 0xe4;\\r\\nuint256 constant BasicOrder_offerAmount_cdPtr = 0x104;\\r\\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\\r\\nuint256 constant BasicOrder_startTime_cdPtr = 0x144;\\r\\n// uint256 constant BasicOrder_endTime_cdPtr = 0x164;\\r\\n// uint256 constant BasicOrder_zoneHash_cdPtr = 0x184;\\r\\n// uint256 constant BasicOrder_salt_cdPtr = 0x1a4;\\r\\nuint256 constant BasicOrder_offererConduit_cdPtr = 0x1c4;\\r\\nuint256 constant BasicOrder_fulfillerConduit_cdPtr = 0x1e4;\\r\\nuint256 constant BasicOrder_totalOriginalAdditionalRecipients_cdPtr = 0x204;\\r\\nuint256 constant BasicOrder_additionalRecipients_head_cdPtr = 0x224;\\r\\nuint256 constant BasicOrder_signature_cdPtr = 0x244;\\r\\nuint256 constant BasicOrder_additionalRecipients_length_cdPtr = 0x264;\\r\\nuint256 constant BasicOrder_additionalRecipients_data_cdPtr = 0x284;\\r\\n\\r\\nuint256 constant BasicOrder_parameters_ptr = 0x20;\\r\\n\\r\\nuint256 constant BasicOrder_basicOrderType_range = 0x18; // 24 values\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for ConsiderationItem\\r\\n *   - 0x80: ConsiderationItem EIP-712 typehash (constant)\\r\\n *   - 0xa0: itemType\\r\\n *   - 0xc0: token\\r\\n *   - 0xe0: identifier\\r\\n *   - 0x100: startAmount\\r\\n *   - 0x120: endAmount\\r\\n *   - 0x140: recipient\\r\\n */\\r\\nuint256 constant BasicOrder_considerationItem_typeHash_ptr = 0x80; // memoryPtr\\r\\nuint256 constant BasicOrder_considerationItem_itemType_ptr = 0xa0;\\r\\nuint256 constant BasicOrder_considerationItem_token_ptr = 0xc0;\\r\\nuint256 constant BasicOrder_considerationItem_identifier_ptr = 0xe0;\\r\\nuint256 constant BasicOrder_considerationItem_startAmount_ptr = 0x100;\\r\\nuint256 constant BasicOrder_considerationItem_endAmount_ptr = 0x120;\\r\\n// uint256 constant BasicOrder_considerationItem_recipient_ptr = 0x140;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for OfferItem\\r\\n *   - 0x80:  OfferItem EIP-712 typehash (constant)\\r\\n *   - 0xa0:  itemType\\r\\n *   - 0xc0:  token\\r\\n *   - 0xe0:  identifier (reused for offeredItemsHash)\\r\\n *   - 0x100: startAmount\\r\\n *   - 0x120: endAmount\\r\\n */\\r\\nuint256 constant BasicOrder_offerItem_typeHash_ptr = DefaultFreeMemoryPointer;\\r\\nuint256 constant BasicOrder_offerItem_itemType_ptr = 0xa0;\\r\\nuint256 constant BasicOrder_offerItem_token_ptr = 0xc0;\\r\\n// uint256 constant BasicOrder_offerItem_identifier_ptr = 0xe0;\\r\\n// uint256 constant BasicOrder_offerItem_startAmount_ptr = 0x100;\\r\\nuint256 constant BasicOrder_offerItem_endAmount_ptr = 0x120;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for Order\\r\\n *   - 0x80:   Order EIP-712 typehash (constant)\\r\\n *   - 0xa0:   orderParameters.offerer\\r\\n *   - 0xc0:   orderParameters.zone\\r\\n *   - 0xe0:   keccak256(abi.encodePacked(offerHashes))\\r\\n *   - 0x100:  keccak256(abi.encodePacked(considerationHashes))\\r\\n *   - 0x120:  orderType\\r\\n *   - 0x140:  startTime\\r\\n *   - 0x160:  endTime\\r\\n *   - 0x180:  zoneHash\\r\\n *   - 0x1a0:  salt\\r\\n *   - 0x1c0:  conduit\\r\\n *   - 0x1e0:  _counters[orderParameters.offerer] (from storage)\\r\\n */\\r\\nuint256 constant BasicOrder_order_typeHash_ptr = 0x80;\\r\\nuint256 constant BasicOrder_order_offerer_ptr = 0xa0;\\r\\n// uint256 constant BasicOrder_order_zone_ptr = 0xc0;\\r\\nuint256 constant BasicOrder_order_offerHashes_ptr = 0xe0;\\r\\nuint256 constant BasicOrder_order_considerationHashes_ptr = 0x100;\\r\\nuint256 constant BasicOrder_order_orderType_ptr = 0x120;\\r\\nuint256 constant BasicOrder_order_startTime_ptr = 0x140;\\r\\n// uint256 constant BasicOrder_order_endTime_ptr = 0x160;\\r\\n// uint256 constant BasicOrder_order_zoneHash_ptr = 0x180;\\r\\n// uint256 constant BasicOrder_order_salt_ptr = 0x1a0;\\r\\n// uint256 constant BasicOrder_order_conduitKey_ptr = 0x1c0;\\r\\nuint256 constant BasicOrder_order_counter_ptr = 0x1e0;\\r\\nuint256 constant BasicOrder_additionalRecipients_head_ptr = 0x240;\\r\\nuint256 constant BasicOrder_signature_ptr = 0x260;\\r\\n\\r\\n// Signature-related\\r\\nbytes32 constant EIP2098_allButHighestBitMask = (\\r\\n    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\r\\n);\\r\\nbytes32 constant ECDSA_twentySeventhAndTwentyEighthBytesSet = (\\r\\n    0x0000000000000000000000000000000000000000000000000000000101000000\\r\\n);\\r\\nuint256 constant ECDSA_MaxLength = 65;\\r\\nuint256 constant ECDSA_signature_s_offset = 0x40;\\r\\nuint256 constant ECDSA_signature_v_offset = 0x60;\\r\\n\\r\\nbytes32 constant EIP1271_isValidSignature_selector = (\\r\\n    0x1626ba7e00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant EIP1271_isValidSignature_signatureHead_negativeOffset = 0x20;\\r\\nuint256 constant EIP1271_isValidSignature_digest_negativeOffset = 0x40;\\r\\nuint256 constant EIP1271_isValidSignature_selector_negativeOffset = 0x44;\\r\\nuint256 constant EIP1271_isValidSignature_calldata_baseLength = 0x64;\\r\\n\\r\\nuint256 constant EIP1271_isValidSignature_signature_head_offset = 0x40;\\r\\n\\r\\n// abi.encodeWithSignature(\\\"NoContract(address)\\\")\\r\\nuint256 constant NoContract_error_signature = (\\r\\n    0x5f15d67200000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant NoContract_error_sig_ptr = 0x0;\\r\\nuint256 constant NoContract_error_token_ptr = 0x4;\\r\\nuint256 constant NoContract_error_length = 0x24; // 4 + 32 == 36\\r\\n\\r\\nuint256 constant EIP_712_PREFIX = (\\r\\n    0x1901000000000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant ExtraGasBuffer = 0x20;\\r\\nuint256 constant CostPerWord = 3;\\r\\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\\r\\n\\r\\nuint256 constant Create2AddressDerivation_ptr = 0x0b;\\r\\nuint256 constant Create2AddressDerivation_length = 0x55;\\r\\n\\r\\nuint256 constant MaskOverByteTwelve = (\\r\\n    0x0000000000000000000000ff0000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant MaskOverLastTwentyBytes = (\\r\\n    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff\\r\\n);\\r\\n\\r\\nuint256 constant MaskOverFirstFourBytes = (\\r\\n    0xffffffff00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant Conduit_execute_signature = (\\r\\n    0x4ce34aa200000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant MaxUint8 = 0xff;\\r\\nuint256 constant MaxUint120 = 0xffffffffffffffffffffffffffffff;\\r\\n\\r\\nuint256 constant Conduit_execute_ConduitTransfer_ptr = 0x20;\\r\\nuint256 constant Conduit_execute_ConduitTransfer_length = 0x01;\\r\\n\\r\\nuint256 constant Conduit_execute_ConduitTransfer_offset_ptr = 0x04;\\r\\nuint256 constant Conduit_execute_ConduitTransfer_length_ptr = 0x24;\\r\\nuint256 constant Conduit_execute_transferItemType_ptr = 0x44;\\r\\nuint256 constant Conduit_execute_transferToken_ptr = 0x64;\\r\\nuint256 constant Conduit_execute_transferFrom_ptr = 0x84;\\r\\nuint256 constant Conduit_execute_transferTo_ptr = 0xa4;\\r\\nuint256 constant Conduit_execute_transferIdentifier_ptr = 0xc4;\\r\\nuint256 constant Conduit_execute_transferAmount_ptr = 0xe4;\\r\\n\\r\\nuint256 constant OneConduitExecute_size = 0x104;\\r\\n\\r\\n// Sentinel value to indicate that the conduit accumulator is not armed.\\r\\nuint256 constant AccumulatorDisarmed = 0x20;\\r\\nuint256 constant AccumulatorArmed = 0x40;\\r\\nuint256 constant Accumulator_conduitKey_ptr = 0x20;\\r\\nuint256 constant Accumulator_selector_ptr = 0x40;\\r\\nuint256 constant Accumulator_array_offset_ptr = 0x44;\\r\\nuint256 constant Accumulator_array_length_ptr = 0x64;\\r\\n\\r\\nuint256 constant Accumulator_itemSizeOffsetDifference = 0x3c;\\r\\n\\r\\nuint256 constant Accumulator_array_offset = 0x20;\\r\\nuint256 constant Conduit_transferItem_size = 0xc0;\\r\\nuint256 constant Conduit_transferItem_token_ptr = 0x20;\\r\\nuint256 constant Conduit_transferItem_from_ptr = 0x40;\\r\\nuint256 constant Conduit_transferItem_to_ptr = 0x60;\\r\\nuint256 constant Conduit_transferItem_identifier_ptr = 0x80;\\r\\nuint256 constant Conduit_transferItem_amount_ptr = 0xa0;\\r\\n\\r\\n// Declare constant for errors related to amount derivation.\\r\\n// error InexactFraction() @ AmountDerivationErrors.sol\\r\\nuint256 constant InexactFraction_error_signature = (\\r\\n    0xc63cf08900000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InexactFraction_error_len = 0x04;\\r\\n\\r\\n// Declare constant for errors related to signature verification.\\r\\nuint256 constant Ecrecover_precompile = 1;\\r\\nuint256 constant Ecrecover_args_size = 0x80;\\r\\nuint256 constant Signature_lower_v = 27;\\r\\n\\r\\n// error BadSignatureV(uint8) @ SignatureVerificationErrors.sol\\r\\nuint256 constant BadSignatureV_error_signature = (\\r\\n    0x1f003d0a00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant BadSignatureV_error_offset = 0x04;\\r\\nuint256 constant BadSignatureV_error_length = 0x24;\\r\\n\\r\\n// error InvalidSigner() @ SignatureVerificationErrors.sol\\r\\nuint256 constant InvalidSigner_error_signature = (\\r\\n    0x815e1d6400000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidSigner_error_length = 0x04;\\r\\n\\r\\n// error InvalidSignature() @ SignatureVerificationErrors.sol\\r\\nuint256 constant InvalidSignature_error_signature = (\\r\\n    0x8baa579f00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidSignature_error_length = 0x04;\\r\\n\\r\\n// error BadContractSignature() @ SignatureVerificationErrors.sol\\r\\nuint256 constant BadContractSignature_error_signature = (\\r\\n    0x4f7fb80d00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant BadContractSignature_error_length = 0x04;\\r\\n\\r\\nuint256 constant NumBitsAfterSelector = 0xe0;\\r\\n\\r\\n// 69 is the lowest modulus for which the remainder\\r\\n// of every selector other than the two match functions\\r\\n// is greater than those of the match functions.\\r\\nuint256 constant NonMatchSelector_MagicModulus = 69;\\r\\n// Of the two match function selectors, the highest\\r\\n// remainder modulo 69 is 29.\\r\\nuint256 constant NonMatchSelector_MagicRemainder = 0x1d;\\r\\n\",\"keccak256\":\"0x846b840742ea7f1b43a399840c09a3ffda40d8e7c95f90e63b5c8fb47e908856\",\"license\":\"MIT\"},\"contracts/seaport/lib/LowLevelHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./ConsiderationConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LowLevelHelpers\\r\\n * @author 0age\\r\\n * @notice LowLevelHelpers contains logic for performing various low-level\\r\\n *         operations.\\r\\n */\\r\\ncontract LowLevelHelpers {\\r\\n    /**\\r\\n     * @dev Internal view function to staticcall an arbitrary target with given\\r\\n     *      calldata. Note that no data is written to memory and no contract\\r\\n     *      size check is performed.\\r\\n     *\\r\\n     * @param target   The account to staticcall.\\r\\n     * @param callData The calldata to supply when staticcalling the target.\\r\\n     *\\r\\n     * @return success The status of the staticcall to the target.\\r\\n     */\\r\\n    function _staticcall(address target, bytes memory callData)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool success)\\r\\n    {\\r\\n        assembly {\\r\\n            // Perform the staticcall.\\r\\n            success := staticcall(\\r\\n                gas(),\\r\\n                target,\\r\\n                add(callData, OneWord),\\r\\n                mload(callData),\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal view function to revert and pass along the revert reason if\\r\\n     *      data was returned by the last call and that the size of that data\\r\\n     *      does not exceed the currently allocated memory size.\\r\\n     */\\r\\n    function _revertWithReasonIfOneIsReturned() internal view {\\r\\n        assembly {\\r\\n            // If it returned a message, bubble it up as long as sufficient gas\\r\\n            // remains to do so:\\r\\n            if returndatasize() {\\r\\n                // Ensure that sufficient gas is available to copy returndata\\r\\n                // while expanding memory where necessary. Start by computing\\r\\n                // the word size of returndata and allocated memory.\\r\\n                let returnDataWords := div(\\r\\n                    add(returndatasize(), AlmostOneWord),\\r\\n                    OneWord\\r\\n                )\\r\\n\\r\\n                // Note: use the free memory pointer in place of msize() to work\\r\\n                // around a Yul warning that prevents accessing msize directly\\r\\n                // when the IR pipeline is activated.\\r\\n                let msizeWords := div(mload(FreeMemoryPointerSlot), OneWord)\\r\\n\\r\\n                // Next, compute the cost of the returndatacopy.\\r\\n                let cost := mul(CostPerWord, returnDataWords)\\r\\n\\r\\n                // Then, compute cost of new memory allocation.\\r\\n                if gt(returnDataWords, msizeWords) {\\r\\n                    cost := add(\\r\\n                        cost,\\r\\n                        add(\\r\\n                            mul(sub(returnDataWords, msizeWords), CostPerWord),\\r\\n                            div(\\r\\n                                sub(\\r\\n                                    mul(returnDataWords, returnDataWords),\\r\\n                                    mul(msizeWords, msizeWords)\\r\\n                                ),\\r\\n                                MemoryExpansionCoefficient\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                }\\r\\n\\r\\n                // Finally, add a small constant and compare to gas remaining;\\r\\n                // bubble up the revert data if enough gas is still available.\\r\\n                if lt(add(cost, ExtraGasBuffer), gas()) {\\r\\n                    // Copy returndata to memory; overwrite existing memory.\\r\\n                    returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n                    // Revert, specifying memory region with copied returndata.\\r\\n                    revert(0, returndatasize())\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal pure function to determine if the first word of returndata\\r\\n     *      matches an expected magic value.\\r\\n     *\\r\\n     * @param expected The expected magic value.\\r\\n     *\\r\\n     * @return A boolean indicating whether the expected value matches the one\\r\\n     *         located in the first word of returndata.\\r\\n     */\\r\\n    function _doesNotMatchMagic(bytes4 expected) internal pure returns (bool) {\\r\\n        // Declare a variable for the value held by the return data buffer.\\r\\n        bytes4 result;\\r\\n\\r\\n        // Utilize assembly in order to read directly from returndata buffer.\\r\\n        assembly {\\r\\n            // Only put result on stack if return data is exactly one word.\\r\\n            if eq(returndatasize(), OneWord) {\\r\\n                // Copy the word directly from return data into scratch space.\\r\\n                returndatacopy(0, 0, OneWord)\\r\\n\\r\\n                // Take value from scratch space and place it on the stack.\\r\\n                result := mload(0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Return a boolean indicating whether expected and located value match.\\r\\n        return result != expected;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd85e5873064cf540f137adaa566da6fc6d7b9b366e6ab94da60c4648e1e28a03\",\"license\":\"MIT\"},\"contracts/seaport/lib/SignatureVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport { EIP1271Interface } from \\\"../interfaces/EIP1271Interface.sol\\\";\\r\\n\\r\\nimport {\\r\\n    SignatureVerificationErrors\\r\\n} from \\\"../interfaces/SignatureVerificationErrors.sol\\\";\\r\\n\\r\\nimport { LowLevelHelpers } from \\\"./LowLevelHelpers.sol\\\";\\r\\n\\r\\nimport \\\"./ConsiderationConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SignatureVerification\\r\\n * @author 0age\\r\\n * @notice SignatureVerification contains logic for verifying signatures.\\r\\n */\\r\\ncontract SignatureVerification is SignatureVerificationErrors, LowLevelHelpers {\\r\\n    /**\\r\\n     * @dev Internal view function to verify the signature of an order. An\\r\\n     *      ERC-1271 fallback will be attempted if either the signature length\\r\\n     *      is not 64 or 65 bytes or if the recovered signer does not match the\\r\\n     *      supplied signer.\\r\\n     *\\r\\n     * @param signer    The signer for the order.\\r\\n     * @param digest    The digest to verify the signature against.\\r\\n     * @param signature A signature from the signer indicating that the order\\r\\n     *                  has been approved.\\r\\n     */\\r\\n    function _assertValidSignature(\\r\\n        address signer,\\r\\n        bytes32 digest,\\r\\n        bytes memory signature\\r\\n    ) internal view {\\r\\n        // Declare value for ecrecover equality or 1271 call success status.\\r\\n        bool success;\\r\\n\\r\\n        // Utilize assembly to perform optimized signature verification check.\\r\\n        assembly {\\r\\n            // Ensure that first word of scratch space is empty.\\r\\n            mstore(0, 0)\\r\\n\\r\\n            // Declare value for v signature parameter.\\r\\n            let v\\r\\n\\r\\n            // Get the length of the signature.\\r\\n            let signatureLength := mload(signature)\\r\\n\\r\\n            // Get the pointer to the value preceding the signature length.\\r\\n            // This will be used for temporary memory overrides - either the\\r\\n            // signature head for isValidSignature or the digest for ecrecover.\\r\\n            let wordBeforeSignaturePtr := sub(signature, OneWord)\\r\\n\\r\\n            // Cache the current value behind the signature to restore it later.\\r\\n            let cachedWordBeforeSignature := mload(wordBeforeSignaturePtr)\\r\\n\\r\\n            // Declare lenDiff + recoveredSigner scope to manage stack pressure.\\r\\n            {\\r\\n                // Take the difference between the max ECDSA signature length\\r\\n                // and the actual signature length. Overflow desired for any\\r\\n                // values > 65. If the diff is not 0 or 1, it is not a valid\\r\\n                // ECDSA signature - move on to EIP1271 check.\\r\\n                let lenDiff := sub(ECDSA_MaxLength, signatureLength)\\r\\n\\r\\n                // Declare variable for recovered signer.\\r\\n                let recoveredSigner\\r\\n\\r\\n                // If diff is 0 or 1, it may be an ECDSA signature.\\r\\n                // Try to recover signer.\\r\\n                if iszero(gt(lenDiff, 1)) {\\r\\n                    // Read the signature `s` value.\\r\\n                    let originalSignatureS := mload(\\r\\n                        add(signature, ECDSA_signature_s_offset)\\r\\n                    )\\r\\n\\r\\n                    // Read the first byte of the word after `s`. If the\\r\\n                    // signature is 65 bytes, this will be the real `v` value.\\r\\n                    // If not, it will need to be modified - doing it this way\\r\\n                    // saves an extra condition.\\r\\n                    v := byte(\\r\\n                        0,\\r\\n                        mload(add(signature, ECDSA_signature_v_offset))\\r\\n                    )\\r\\n\\r\\n                    // If lenDiff is 1, parse 64-byte signature as ECDSA.\\r\\n                    if lenDiff {\\r\\n                        // Extract yParity from highest bit of vs and add 27 to\\r\\n                        // get v.\\r\\n                        v := add(\\r\\n                            shr(MaxUint8, originalSignatureS),\\r\\n                            Signature_lower_v\\r\\n                        )\\r\\n\\r\\n                        // Extract canonical s from vs, all but the highest bit.\\r\\n                        // Temporarily overwrite the original `s` value in the\\r\\n                        // signature.\\r\\n                        mstore(\\r\\n                            add(signature, ECDSA_signature_s_offset),\\r\\n                            and(\\r\\n                                originalSignatureS,\\r\\n                                EIP2098_allButHighestBitMask\\r\\n                            )\\r\\n                        )\\r\\n                    }\\r\\n                    // Temporarily overwrite the signature length with `v` to\\r\\n                    // conform to the expected input for ecrecover.\\r\\n                    mstore(signature, v)\\r\\n\\r\\n                    // Temporarily overwrite the word before the length with\\r\\n                    // `digest` to conform to the expected input for ecrecover.\\r\\n                    mstore(wordBeforeSignaturePtr, digest)\\r\\n\\r\\n                    // Attempt to recover the signer for the given signature. Do\\r\\n                    // not check the call status as ecrecover will return a null\\r\\n                    // address if the signature is invalid.\\r\\n                    pop(\\r\\n                        staticcall(\\r\\n                            gas(),\\r\\n                            Ecrecover_precompile, // Call ecrecover precompile.\\r\\n                            wordBeforeSignaturePtr, // Use data memory location.\\r\\n                            Ecrecover_args_size, // Size of digest, v, r, and s.\\r\\n                            0, // Write result to scratch space.\\r\\n                            OneWord // Provide size of returned result.\\r\\n                        )\\r\\n                    )\\r\\n\\r\\n                    // Restore cached word before signature.\\r\\n                    mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\r\\n\\r\\n                    // Restore cached signature length.\\r\\n                    mstore(signature, signatureLength)\\r\\n\\r\\n                    // Restore cached signature `s` value.\\r\\n                    mstore(\\r\\n                        add(signature, ECDSA_signature_s_offset),\\r\\n                        originalSignatureS\\r\\n                    )\\r\\n\\r\\n                    // Read the recovered signer from the buffer given as return\\r\\n                    // space for ecrecover.\\r\\n                    recoveredSigner := mload(0)\\r\\n                }\\r\\n\\r\\n                // Set success to true if the signature provided was a valid\\r\\n                // ECDSA signature and the signer is not the null address. Use\\r\\n                // gt instead of direct as success is used outside of assembly.\\r\\n                success := and(eq(signer, recoveredSigner), gt(signer, 0))\\r\\n            }\\r\\n\\r\\n            // If the signature was not verified with ecrecover, try EIP1271.\\r\\n            if iszero(success) {\\r\\n                // Temporarily overwrite the word before the signature length\\r\\n                // and use it as the head of the signature input to\\r\\n                // `isValidSignature`, which has a value of 64.\\r\\n                mstore(\\r\\n                    wordBeforeSignaturePtr,\\r\\n                    EIP1271_isValidSignature_signature_head_offset\\r\\n                )\\r\\n\\r\\n                // Get pointer to use for the selector of `isValidSignature`.\\r\\n                let selectorPtr := sub(\\r\\n                    signature,\\r\\n                    EIP1271_isValidSignature_selector_negativeOffset\\r\\n                )\\r\\n\\r\\n                // Cache the value currently stored at the selector pointer.\\r\\n                let cachedWordOverwrittenBySelector := mload(selectorPtr)\\r\\n\\r\\n                // Get pointer to use for `digest` input to `isValidSignature`.\\r\\n                let digestPtr := sub(\\r\\n                    signature,\\r\\n                    EIP1271_isValidSignature_digest_negativeOffset\\r\\n                )\\r\\n\\r\\n                // Cache the value currently stored at the digest pointer.\\r\\n                let cachedWordOverwrittenByDigest := mload(digestPtr)\\r\\n\\r\\n                // Write the selector first, since it overlaps the digest.\\r\\n                mstore(selectorPtr, EIP1271_isValidSignature_selector)\\r\\n\\r\\n                // Next, write the digest.\\r\\n                mstore(digestPtr, digest)\\r\\n\\r\\n                // Call signer with `isValidSignature` to validate signature.\\r\\n                success := staticcall(\\r\\n                    gas(),\\r\\n                    signer,\\r\\n                    selectorPtr,\\r\\n                    add(\\r\\n                        signatureLength,\\r\\n                        EIP1271_isValidSignature_calldata_baseLength\\r\\n                    ),\\r\\n                    0,\\r\\n                    OneWord\\r\\n                )\\r\\n\\r\\n                // Determine if the signature is valid on successful calls.\\r\\n                if success {\\r\\n                    // If first word of scratch space does not contain EIP-1271\\r\\n                    // signature selector, revert.\\r\\n                    if iszero(eq(mload(0), EIP1271_isValidSignature_selector)) {\\r\\n                        // Revert with bad 1271 signature if signer has code.\\r\\n                        if extcodesize(signer) {\\r\\n                            // Bad contract signature.\\r\\n                            mstore(0, BadContractSignature_error_signature)\\r\\n                            revert(0, BadContractSignature_error_length)\\r\\n                        }\\r\\n\\r\\n                        // Check if signature length was invalid.\\r\\n                        if gt(sub(ECDSA_MaxLength, signatureLength), 1) {\\r\\n                            // Revert with generic invalid signature error.\\r\\n                            mstore(0, InvalidSignature_error_signature)\\r\\n                            revert(0, InvalidSignature_error_length)\\r\\n                        }\\r\\n\\r\\n                        // Check if v was invalid.\\r\\n                        if iszero(\\r\\n                            byte(v, ECDSA_twentySeventhAndTwentyEighthBytesSet)\\r\\n                        ) {\\r\\n                            // Revert with invalid v value.\\r\\n                            mstore(0, BadSignatureV_error_signature)\\r\\n                            mstore(BadSignatureV_error_offset, v)\\r\\n                            revert(0, BadSignatureV_error_length)\\r\\n                        }\\r\\n\\r\\n                        // Revert with generic invalid signer error message.\\r\\n                        mstore(0, InvalidSigner_error_signature)\\r\\n                        revert(0, InvalidSigner_error_length)\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                // Restore the cached values overwritten by selector, digest and\\r\\n                // signature head.\\r\\n                mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\r\\n                mstore(selectorPtr, cachedWordOverwrittenBySelector)\\r\\n                mstore(digestPtr, cachedWordOverwrittenByDigest)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If the call failed...\\r\\n        if (!success) {\\r\\n            // Revert and pass reason along if one was returned.\\r\\n            _revertWithReasonIfOneIsReturned();\\r\\n\\r\\n            // Otherwise, revert with error indicating bad contract signature.\\r\\n            assembly {\\r\\n                mstore(0, BadContractSignature_error_signature)\\r\\n                revert(0, BadContractSignature_error_length)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc23b9d4ea88187158c8dcae275fecfca2fc6c61dbf33dcca46a682ba681d66c7\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.2\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Reference type for token approval.\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\\n            // but we allocate 0x80 bytes to keep the free memory pointer 32-byte word aliged.\\n            // We will need 1 32-byte word to store the length,\\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 0x20 + 3 * 0x20 = 0x80.\\n            str := add(mload(0x40), 0x80)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, str)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x38055fa99acc16da1d33b3917194b9257a03be4a22c516d967df544d7e15368d\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.2\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0x9c94731c43a2320e54f9128ad972659b07536d908bc08490213616e2dc26dea9\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.2\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryable.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef64b67580e82bd556c630bb4037320f71c1e2d628743770de7a696f07a26e24\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.2\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xb4d1dd53e910de2e2afead178e40add882f913c6495c142ee09e4aabd9860b9f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040805180820182526001808252605f60f81b6020808401828152855180870190965292855284015281519192916200004e9160029162000071565b5080516200006490600390602084019062000071565b5050600080555062000153565b8280546200007f9062000117565b90600052602060002090601f016020900481019282620000a35760008555620000ee565b82601f10620000be57805160ff1916838001178555620000ee565b82800160010185558215620000ee579182015b82811115620000ee578251825591602001919060010190620000d1565b50620000fc92915062000100565b5090565b5b80821115620000fc576000815560010162000101565b600181811c908216806200012c57607f821691505b6020821081036200014d57634e487b7160e01b600052602260045260246000fd5b50919050565b61383280620001636000396000f3fe608060405234801561001057600080fd5b50600436106103995760003560e01c80638a81b211116101e9578063b88d4fde1161010f578063d5abeb01116100ad578063e985e9c51161007c578063e985e9c5146107bb578063f2fde38b146107f7578063f91061751461080a578063fac651aa1461081257600080fd5b8063d5abeb0114610784578063d8b4fc5b1461078d578063e82bef29146107a0578063e8a3d485146107b357600080fd5b8063c37bbabc116100e9578063c37bbabc14610736578063c87b56dd1461073e578063cf456ae714610751578063d3738fc81461076457600080fd5b8063b88d4fde146106fa578063b8c317811461070d578063c23dc68f1461071657600080fd5b80639e8c708e11610187578063aa271e1a11610156578063aa271e1a146106b4578063ab5ea252146106c7578063ace0103d146106da578063b850d0a1146106ed57600080fd5b80639e8c708e146106735780639fbc871314610686578063a045442c14610699578063a22cb465146106a157600080fd5b8063918aa11b116101c3578063918aa11b1461061557806395d89b411461063857806396a85be81461064057806399a2557a1461066057600080fd5b80638a81b211146105de5780638da5cb5b146105f157806390b2464b1461060257600080fd5b80633fafa127116102ce5780636352211e1161026c57806375ec7d481161023b57806375ec7d481461058a5780637b1039991461059d5780638462151c146105b55780638a71bb2d146105d557600080fd5b80636352211e146105495780636f8b44b01461055c57806370a082311461056f578063715018a61461058257600080fd5b80634f558e79116102a85780634f558e79146104fd5780634f6ccce714610510578063537d4924146105215780635bbb21771461052957600080fd5b80633fafa127146104cf57806340c10f19146104d757806342842e0e146104ea57600080fd5b806318160ddd1161033b5780632f745c59116103155780632f745c591461049d57806333cde651146104b05780633655116b146104b95780633d26bb67146104c657600080fd5b806318160ddd1461044c57806323b872dd146104585780632a55205a1461046b57600080fd5b8063081812fc11610377578063081812fc146103e5578063095ea7b31461041057806310fd332b1461042357806313966db51461043657600080fd5b806301ffc9a71461039e5780630614117a146103c657806306fdde03146103d0575b600080fd5b6103b16103ac366004612d38565b61081a565b60405190151581526020015b60405180910390f35b6103ce61083a565b005b6103d86108ae565b6040516103bd9190612dad565b6103f86103f3366004612dc0565b6108bd565b6040516001600160a01b0390911681526020016103bd565b6103ce61041e366004612dee565b610901565b6103ce610431366004612dee565b6109a1565b61043e610a3d565b6040519081526020016103bd565b6001546000540361043e565b6103ce610466366004612e1a565b610ac8565b61047e610479366004612e5b565b610ae1565b604080516001600160a01b0390931683526020830191909152016103bd565b61043e6104ab366004612dee565b610b1d565b61043e60aa5481565b609f546103b19060ff1681565b61043e60a15481565b61043e610bcd565b6103ce6104e5366004612dee565b610c1b565b6103ce6104f8366004612e1a565b610cb4565b6103b161050b366004612dc0565b610ccf565b61043e61051e366004612dc0565b90565b6103d8610cda565b61053c610537366004612e7d565b610d68565b6040516103bd9190612ef1565b6103f8610557366004612dc0565b610e33565b6103ce61056a366004612dc0565b610e3e565b61043e61057d366004612f6d565b610ea5565b6103ce610ef3565b6103ce610598366004612f98565b610f07565b609f546103f89061010090046001600160a01b031681565b6105c86105c3366004612f6d565b61100d565b6040516103bd9190612fd1565b61043e60af5481565b6103ce6105ec3660046130cc565b611115565b603b546001600160a01b03166103f8565b6103ce610610366004613100565b611134565b6103b1610623366004612f6d565b60a66020526000908152604090205460ff1681565b6103d86112ca565b61065361064e366004612e5b565b6112d4565b6040516103bd9190613191565b6105c861066e3660046131d2565b611374565b6103ce610681366004612f6d565b6114ed565b60ae546103f8906001600160a01b031681565b610653611574565b6103ce6106af366004612f98565b611583565b6103b16106c2366004612f6d565b611618565b6103ce6106d53660046130cc565b611625565b6103f86106e8366004613207565b611640565b60ab546103b19060ff1681565b6103ce610708366004613256565b611873565b61043e60a45481565b610729610724366004612dc0565b6118bd565b6040516103bd91906132c1565b61043e611935565b6103d861074c366004612dc0565b611941565b6103ce61075f366004612f98565b61194c565b61043e610772366004612f6d565b60a96020526000908152604090205481565b61043e60a55481565b6103ce61079b366004613305565b6119d9565b60a0546103f8906001600160a01b031681565b6103d8611ab5565b6103b16107c936600461332a565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6103ce610805366004612f6d565b611b63565b6103d8611bd9565b6103ce611be6565b600061082582611c26565b80610834575061083482611c5c565b92915050565b610842611caa565b604051600090339047908381818185875af1925050503d8060008114610884576040519150601f19603f3d011682016040523d82523d6000602084013e610889565b606091505b50509050806108ab576040516312171d8360e31b815260040160405180910390fd5b50565b60606108b8611d04565b905090565b60006108c882611d96565b6108e5576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061090c82610e33565b9050336001600160a01b038216146109455761092881336107c9565b610945576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b603b546001600160a01b031633148015906109cc5750609f5461010090046001600160a01b03163314155b156109ea57604051631dd2188d60e31b815260040160405180910390fd5b60ae80546001600160a01b0319166001600160a01b03841690811790915560af8290556040518291907faf80eecb6d383b7ffd8fa84554dd154b74dfdf6410e2dc8a7f5afda7f2d7e01890600090a35050565b60ab5460009060ff16610ac157609f60019054906101000a90046001600160a01b03166001600160a01b031663f70210ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b89190613358565b5060aa5490565b610ad183611dbd565b610adc838383611eec565b505050565b60ae5460af546001600160a01b0390911690600090670de0b6b3a764000090610b0a9085613387565b610b1491906133bc565b90509250929050565b6000306399a2557a8484610b328160016133d0565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381865afa158015610b83573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bab91908101906133e8565b600081518110610bbd57610bbd61348d565b6020026020010151905092915050565b609f546040516308d247d360e41b815230600482015260009161010090046001600160a01b031690638d247d3090602401602060405180830381865afa158015610a9d573d6000803e3d6000fd5b33610c2760a782612084565b610c4457604051631dd2188d60e31b815260040160405180910390fd5b6002606d5403610c9b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002606d55610caa83836120a6565b50506001606d5550565b610adc83838360405180602001604052806000815250611873565b600061083482611d96565b60ac8054610ce7906134a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d13906134a3565b8015610d605780601f10610d3557610100808354040283529160200191610d60565b820191906000526020600020905b815481529060010190602001808311610d4357829003601f168201915b505050505081565b6060816000816001600160401b03811115610d8557610d85613009565b604051908082528060200260200182016040528015610dd757816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610da35790505b50905060005b828114610e2a57610e05868683818110610df957610df961348d565b905060200201356118bd565b828281518110610e1757610e1761348d565b6020908102919091010152600101610ddd565b50949350505050565b60006108348261211c565b610e46611caa565b609f5460ff1615610e6a57604051631dd2188d60e31b815260040160405180910390fd5b60a58190556040518181527f3f8118fc46e72ecde0c5e090803cad8c88e817b2f1e93e820aa9bfbf51f2468d9060200160405180910390a150565b60006001600160a01b038216610ece576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b610efb611caa565b610f056000612183565b565b603b546001600160a01b03163314801590610f8f5750609f5460405163027cf93b60e31b81523360048201526101009091046001600160a01b0316906313e7c9d890602401602060405180830381865afa158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d91906134dd565b155b15610fad57604051631dd2188d60e31b815260040160405180910390fd5b6001600160a01b038216600081815260a66020908152604091829020805460ff191685151590811790915591519182527f05d3978e3d4c9953c7d2cbd54c2c9901050350ecd9c40284efa828e2bcdcb94191015b60405180910390a25050565b6060600080600061101d85610ea5565b90506000816001600160401b0381111561103957611039613009565b604051908082528060200260200182016040528015611062578160200160208202803683370190505b50905061108f60408051608081018252600080825260208201819052918101829052606081019190915290565b60005b838614611109576110a2816121d5565b915081604001516111015781516001600160a01b0316156110c257815194505b876001600160a01b0316856001600160a01b03160361110157808387806001019850815181106110f4576110f461348d565b6020026020010181815250505b600101611092565b50909695505050505050565b61111d611caa565b80516111309060ad906020840190612c89565b5050565b600854610100900460ff16158080156111545750600854600160ff909116105b8061116e5750303b15801561116e575060085460ff166001145b6111d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c92565b6008805460ff1916600117905580156111f4576008805461ff0019166101001790555b609f805474ffffffffffffffffffffffffffffffffffffffff001916336101000217905560a186905560a485905560a5849055825161123a9060a2906020860190612c89565b50815161124e9060a3906020850190612c89565b5060a080546001600160a01b0319166001600160a01b03891617905561127387612183565b61127b612211565b80156112c1576008805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60606108b8612240565b606060006112e284846134fa565b90506000816001600160401b038111156112fe576112fe613009565b604051908082528060200260200182016040528015611327578160200160208202803683370190505b50905060005b82811015610e2a5761134260a787830161224f565b8282815181106113545761135461348d565b6001600160a01b039092166020928302919091019091015260010161132d565b606081831061139657604051631960ccad60e11b815260040160405180910390fd5b6000806113a260005490565b9050808411156113b0578093505b60006113bb87610ea5565b9050848610156113da57858503818110156113d4578091505b506113de565b5060005b6000816001600160401b038111156113f8576113f8613009565b604051908082528060200260200182016040528015611421578160200160208202803683370190505b509050816000036114375793506114e692505050565b6000611442886118bd565b905060008160400151611453575080515b885b8881141580156114655750848714155b156114da57611473816121d5565b925082604001516114d25782516001600160a01b03161561149357825191505b8a6001600160a01b0316826001600160a01b0316036114d257808488806001019950815181106114c5576114c561348d565b6020026020010181815250505b600101611455565b50505092835250909150505b9392505050565b6114f5611caa565b6040516370a0823160e01b81523060048201526108ab9033906001600160a01b038416906370a0823190602401602060405180830381865afa15801561153f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115639190613358565b6001600160a01b038416919061225b565b60606108b8600061064e611935565b336001600160a01b038316036115ac5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600061083460a783612084565b61162d611caa565b80516111309060ac906020840190612c89565b6000611654603b546001600160a01b031690565b6001600160a01b0316336001600160a01b0316141580156116855750609f5461010090046001600160a01b03163314155b156116a357604051631dd2188d60e31b815260040160405180910390fd5b6002606d54036116f55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c92565b6002606d55609f5460405163a90cb89b60e01b81526001600160a01b0385811660048301526101009092049091169063a90cb89b90602401602060405180830381865afa15801561174a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176e91906134dd565b61179657604051633855dd1960e21b81526001600160a01b0384166004820152602401610c92565b61179f836122d3565b9050806001600160a01b031663cf7a1d77306117c3603b546001600160a01b031690565b856040518463ffffffff1660e01b81526004016117e293929190613511565b600060405180830381600087803b1580156117fc57600080fd5b505af1158015611810573d6000803e3d6000fd5b505050506118288160a761238090919063ffffffff16565b50604051600181526001600160a01b038216907f1f96bc657d385fd83da973a43f2ad969e6d96b6779b779571a7306db7ca1cd009060200160405180910390a26001606d5592915050565b61187e848484610ac8565b6001600160a01b0383163b156118b75761189a84848484612395565b6118b7576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60408051608080820183526000808352602080840182905283850182905260608085018390528551938401865282845290830182905293820181905292810183905290915060005483106119115792915050565b61191a836121d5565b905080604001511561192c5792915050565b6114e683612481565b60006108b860a76124b6565b6060610834826124c0565b611954611caa565b609f5460ff161561197857604051631dd2188d60e31b815260040160405180910390fd5b801561198f5761198960a783612380565b5061199c565b61199a60a78361261c565b505b816001600160a01b03167f1f96bc657d385fd83da973a43f2ad969e6d96b6779b779571a7306db7ca1cd0082604051611001911515815260200190565b609f5460405163027cf93b60e31b81523360048201526101009091046001600160a01b0316906313e7c9d890602401602060405180830381865afa158015611a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4991906134dd565b611a6657604051631dd2188d60e31b815260040160405180910390fd5b60ab805460ff191682151590811790915560aa83905560408051848152602081019290925233917f3adcad50d42c2c3ec23ad4ebf52f75cf92212482d66ff9060f0b46735d74b9f09101611001565b6060609f60019054906101000a90046001600160a01b03166001600160a01b03166380f2152e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611b0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b329190810190613546565b60a154611b3e90612631565b604051602001611b4f9291906135b3565b604051602081830303815290604052905090565b611b6b611caa565b6001600160a01b038116611bd05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c92565b6108ab81612183565b60ad8054610ce7906134a3565b611bee611caa565b609f805460ff191660011790556040517f312de1f2fe8510f37391aa593066f10f0a60eda0aa8400eedbbf16fe320467b790600090a1565b60006301ffc9a760e01b6001600160e01b03198316148061083457506001600160e01b0319821663152a902d60e11b1492915050565b60006301ffc9a760e01b6001600160e01b031983161480611c8d57506380ac58cd60e01b6001600160e01b03198316145b806108345750506001600160e01b031916635b5e139f60e01b1490565b603b546001600160a01b03163314610f055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c92565b606060a28054611d13906134a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611d3f906134a3565b8015611d8c5780601f10611d6157610100808354040283529160200191611d8c565b820191906000526020600020905b815481529060010190602001808311611d6f57829003601f168201915b5050505050905090565b6000805482108015610834575050600090815260046020526040902054600160e01b161590565b6001600160a01b038116156108ab57600260a45410611e0a5760405162461bcd60e51b815260206004820152600960248201526814dbdd5b189bdd5b9960ba1b6044820152606401610c92565b600160a4541080611e865750609f54604051637765acf760e11b81523360048201526101009091046001600160a01b03169063eecb59ee90602401602060405180830381865afa158015611e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8691906134dd565b80611ea0575033600090815260a6602052604090205460ff165b6108ab5760405162461bcd60e51b815260206004820152601660248201527f4578636c757369766520746f204178656c6172536561000000000000000000006044820152606401610c92565b6000611ef78261211c565b9050836001600160a01b0316816001600160a01b031614611f2a5760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417611f7757611f5a86336107c9565b611f7757604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038516611f9e57604051633a954ecd60e21b815260040160405180910390fd5b8015611fa957600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b8416900361203b576001840160008181526004602052604081205490036120395760005481146120395760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6001600160a01b038116600090815260018301602052604081205415156114e6565b6001600160a01b038216600090815260a96020526040812080548392906120ce9084906133d0565b90915550600090506120e36001546000540390565b60a5549091506120f383836133d0565b111561211257604051639315093760e01b815260040160405180910390fd5b610adc8383612688565b60008160005481101561216a5760008181526004602052604081205490600160e01b82169003612168575b806000036114e6575060001901600081815260046020526040902054612147565b505b604051636f96cda160e11b815260040160405180910390fd5b603b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260046020526040902054610834906126a2565b600854610100900460ff166122385760405162461bcd60e51b8152600401610c92906135e2565b610f056126e9565b606060a38054611d13906134a3565b60006114e68383612717565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806118b75760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610c92565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661237b5760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610c92565b919050565b60006114e6836001600160a01b038416612741565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906123ca90339089908890889060040161362d565b6020604051808303816000875af1925050508015612405575060408051601f3d908101601f1916820190925261240291810190613669565b60015b612463573d808015612433576040519150601f19603f3d011682016040523d82523d6000602084013e612438565b606091505b50805160000361245b576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6040805160808101825260008082526020820181905291810182905260608101919091526108346124b18361211c565b6126a2565b6000610834825490565b60606124cb82610ccf565b61252f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610c92565b60ac805461253c906134a3565b90506000036125fd57609f60019054906101000a90046001600160a01b03166001600160a01b031663d547cfb76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612598573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125c09190810190613546565b60a1546125cc90612631565b6125d584612790565b6040516020016125e793929190613686565b6040516020818303038152906040529050919050565b60ac61260883612790565b60ad6040516020016125e79392919061376f565b60006114e6836001600160a01b038416612890565b60608160000361265b5750506040805180820190915260048152630307830360e41b602082015290565b8160005b811561267e578061266f816137a2565b915050600882901c915061265f565b6124798482612983565b611130828260405180602001604052806000815250612b1e565b604080516080810182526001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b831615159181019190915260e89190911c606082015290565b600854610100900460ff166127105760405162461bcd60e51b8152600401610c92906135e2565b6001606d55565b600082600001828154811061272e5761272e61348d565b9060005260206000200154905092915050565b600081815260018301602052604081205461278857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610834565b506000610834565b6060816000036127b75750506040805180820190915260018152600360fc1b602082015290565b8160005b81156127e157806127cb816137a2565b91506127da9050600a836133bc565b91506127bb565b6000816001600160401b038111156127fb576127fb613009565b6040519080825280601f01601f191660200182016040528015612825576020820181803683370190505b5090505b84156124795761283a6001836134fa565b9150612847600a866137bb565b6128529060306133d0565b60f81b8183815181106128675761286761348d565b60200101906001600160f81b031916908160001a905350612889600a866133bc565b9450612829565b600081815260018301602052604081205480156129795760006128b46001836134fa565b85549091506000906128c8906001906134fa565b905081811461292d5760008660000182815481106128e8576128e861348d565b906000526020600020015490508087600001848154811061290b5761290b61348d565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061293e5761293e6137cf565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610834565b6000915050610834565b60606000612992836002613387565b61299d9060026133d0565b6001600160401b038111156129b4576129b4613009565b6040519080825280601f01601f1916602001820160405280156129de576020820181803683370190505b509050600360fc1b816000815181106129f9576129f961348d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612a2857612a2861348d565b60200101906001600160f81b031916908160001a9053506000612a4c846002613387565b612a579060016133d0565b90505b6001811115612acf576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a8b57612a8b61348d565b1a60f81b828281518110612aa157612aa161348d565b60200101906001600160f81b031916908160001a90535060049490941c93612ac8816137e5565b9050612a5a565b5083156114e65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c92565b612b288383612b8b565b6001600160a01b0383163b15610adc576000548281035b612b526000868380600101945086612395565b612b6f576040516368d2bf6b60e11b815260040160405180910390fd5b818110612b3f578160005414612b8457600080fd5b5050505050565b6000805490829003612bb05760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b818114612c5f57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101612c27565b5081600003612c8057604051622e076360e81b815260040160405180910390fd5b60005550505050565b828054612c95906134a3565b90600052602060002090601f016020900481019282612cb75760008555612cfd565b82601f10612cd057805160ff1916838001178555612cfd565b82800160010185558215612cfd579182015b82811115612cfd578251825591602001919060010190612ce2565b50612d09929150612d0d565b5090565b5b80821115612d095760008155600101612d0e565b6001600160e01b0319811681146108ab57600080fd5b600060208284031215612d4a57600080fd5b81356114e681612d22565b60005b83811015612d70578181015183820152602001612d58565b838111156118b75750506000910152565b60008151808452612d99816020860160208601612d55565b601f01601f19169290920160200192915050565b6020815260006114e66020830184612d81565b600060208284031215612dd257600080fd5b5035919050565b6001600160a01b03811681146108ab57600080fd5b60008060408385031215612e0157600080fd5b8235612e0c81612dd9565b946020939093013593505050565b600080600060608486031215612e2f57600080fd5b8335612e3a81612dd9565b92506020840135612e4a81612dd9565b929592945050506040919091013590565b60008060408385031215612e6e57600080fd5b50508035926020909101359150565b60008060208385031215612e9057600080fd5b82356001600160401b0380821115612ea757600080fd5b818501915085601f830112612ebb57600080fd5b813581811115612eca57600080fd5b8660208260051b8501011115612edf57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b8181101561110957612f5a8385516001600160a01b0381511682526001600160401b03602082015116602083015260408101511515604083015262ffffff60608201511660608301525050565b9284019260809290920191600101612f0d565b600060208284031215612f7f57600080fd5b81356114e681612dd9565b80151581146108ab57600080fd5b60008060408385031215612fab57600080fd5b8235612fb681612dd9565b91506020830135612fc681612f8a565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561110957835183529284019291840191600101612fed565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561304757613047613009565b604052919050565b60006001600160401b0382111561306857613068613009565b50601f01601f191660200190565b600082601f83011261308757600080fd5b813561309a6130958261304f565b61301f565b8181528460208386010111156130af57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156130de57600080fd5b81356001600160401b038111156130f457600080fd5b61247984828501613076565b60008060008060008060c0878903121561311957600080fd5b863561312481612dd9565b955060208701359450604087013593506060870135925060808701356001600160401b038082111561315557600080fd5b6131618a838b01613076565b935060a089013591508082111561317757600080fd5b5061318489828a01613076565b9150509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156111095783516001600160a01b0316835292840192918401916001016131ad565b6000806000606084860312156131e757600080fd5b83356131f281612dd9565b95602085013595506040909401359392505050565b6000806040838503121561321a57600080fd5b823561322581612dd9565b915060208301356001600160401b0381111561324057600080fd5b61324c85828601613076565b9150509250929050565b6000806000806080858703121561326c57600080fd5b843561327781612dd9565b9350602085013561328781612dd9565b92506040850135915060608501356001600160401b038111156132a957600080fd5b6132b587828801613076565b91505092959194509250565b81516001600160a01b031681526020808301516001600160401b03169082015260408083015115159082015260608083015162ffffff169082015260808101610834565b6000806040838503121561331857600080fd5b823591506020830135612fc681612f8a565b6000806040838503121561333d57600080fd5b823561334881612dd9565b91506020830135612fc681612dd9565b60006020828403121561336a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156133a1576133a1613371565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826133cb576133cb6133a6565b500490565b600082198211156133e3576133e3613371565b500190565b600060208083850312156133fb57600080fd5b82516001600160401b038082111561341257600080fd5b818501915085601f83011261342657600080fd5b81518181111561343857613438613009565b8060051b915061344984830161301f565b818152918301840191848101908884111561346357600080fd5b938501935b8385101561348157845182529385019390850190613468565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806134b757607f821691505b6020821081036134d757634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156134ef57600080fd5b81516114e681612f8a565b60008282101561350c5761350c613371565b500390565b60006001600160a01b0380861683528085166020840152506060604083015261353d6060830184612d81565b95945050505050565b60006020828403121561355857600080fd5b81516001600160401b0381111561356e57600080fd5b8201601f8101841361357f57600080fd5b805161358d6130958261304f565b8181528560208385010111156135a257600080fd5b61353d826020830160208601612d55565b600083516135c5818460208801612d55565b8351908301906135d9818360208801612d55565b01949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261365f6080830184612d81565b9695505050505050565b60006020828403121561367b57600080fd5b81516114e681612d22565b60008451613698818460208901612d55565b8451908301906136ac818360208901612d55565b602f60f81b910190815283516136c9816001840160208801612d55565b0160010195945050505050565b8054600090600181811c90808316806136f057607f831692505b6020808410820361371157634e487b7160e01b600052602260045260246000fd5b818015613725576001811461373657613763565b60ff19861689528489019650613763565b60008881526020902060005b8681101561375b5781548b820152908501908301613742565b505084890196505b50505050505092915050565b600061377b82866136d6565b845161378b818360208901612d55565b613797818301866136d6565b979650505050505050565b6000600182016137b4576137b4613371565b5060010190565b6000826137ca576137ca6133a6565b500690565b634e487b7160e01b600052603160045260246000fd5b6000816137f4576137f4613371565b50600019019056fea26469706673582212209013cd2567e5e211caee0c63d151f04f9956342407555b7c4fbfd6ba71aa778564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103995760003560e01c80638a81b211116101e9578063b88d4fde1161010f578063d5abeb01116100ad578063e985e9c51161007c578063e985e9c5146107bb578063f2fde38b146107f7578063f91061751461080a578063fac651aa1461081257600080fd5b8063d5abeb0114610784578063d8b4fc5b1461078d578063e82bef29146107a0578063e8a3d485146107b357600080fd5b8063c37bbabc116100e9578063c37bbabc14610736578063c87b56dd1461073e578063cf456ae714610751578063d3738fc81461076457600080fd5b8063b88d4fde146106fa578063b8c317811461070d578063c23dc68f1461071657600080fd5b80639e8c708e11610187578063aa271e1a11610156578063aa271e1a146106b4578063ab5ea252146106c7578063ace0103d146106da578063b850d0a1146106ed57600080fd5b80639e8c708e146106735780639fbc871314610686578063a045442c14610699578063a22cb465146106a157600080fd5b8063918aa11b116101c3578063918aa11b1461061557806395d89b411461063857806396a85be81461064057806399a2557a1461066057600080fd5b80638a81b211146105de5780638da5cb5b146105f157806390b2464b1461060257600080fd5b80633fafa127116102ce5780636352211e1161026c57806375ec7d481161023b57806375ec7d481461058a5780637b1039991461059d5780638462151c146105b55780638a71bb2d146105d557600080fd5b80636352211e146105495780636f8b44b01461055c57806370a082311461056f578063715018a61461058257600080fd5b80634f558e79116102a85780634f558e79146104fd5780634f6ccce714610510578063537d4924146105215780635bbb21771461052957600080fd5b80633fafa127146104cf57806340c10f19146104d757806342842e0e146104ea57600080fd5b806318160ddd1161033b5780632f745c59116103155780632f745c591461049d57806333cde651146104b05780633655116b146104b95780633d26bb67146104c657600080fd5b806318160ddd1461044c57806323b872dd146104585780632a55205a1461046b57600080fd5b8063081812fc11610377578063081812fc146103e5578063095ea7b31461041057806310fd332b1461042357806313966db51461043657600080fd5b806301ffc9a71461039e5780630614117a146103c657806306fdde03146103d0575b600080fd5b6103b16103ac366004612d38565b61081a565b60405190151581526020015b60405180910390f35b6103ce61083a565b005b6103d86108ae565b6040516103bd9190612dad565b6103f86103f3366004612dc0565b6108bd565b6040516001600160a01b0390911681526020016103bd565b6103ce61041e366004612dee565b610901565b6103ce610431366004612dee565b6109a1565b61043e610a3d565b6040519081526020016103bd565b6001546000540361043e565b6103ce610466366004612e1a565b610ac8565b61047e610479366004612e5b565b610ae1565b604080516001600160a01b0390931683526020830191909152016103bd565b61043e6104ab366004612dee565b610b1d565b61043e60aa5481565b609f546103b19060ff1681565b61043e60a15481565b61043e610bcd565b6103ce6104e5366004612dee565b610c1b565b6103ce6104f8366004612e1a565b610cb4565b6103b161050b366004612dc0565b610ccf565b61043e61051e366004612dc0565b90565b6103d8610cda565b61053c610537366004612e7d565b610d68565b6040516103bd9190612ef1565b6103f8610557366004612dc0565b610e33565b6103ce61056a366004612dc0565b610e3e565b61043e61057d366004612f6d565b610ea5565b6103ce610ef3565b6103ce610598366004612f98565b610f07565b609f546103f89061010090046001600160a01b031681565b6105c86105c3366004612f6d565b61100d565b6040516103bd9190612fd1565b61043e60af5481565b6103ce6105ec3660046130cc565b611115565b603b546001600160a01b03166103f8565b6103ce610610366004613100565b611134565b6103b1610623366004612f6d565b60a66020526000908152604090205460ff1681565b6103d86112ca565b61065361064e366004612e5b565b6112d4565b6040516103bd9190613191565b6105c861066e3660046131d2565b611374565b6103ce610681366004612f6d565b6114ed565b60ae546103f8906001600160a01b031681565b610653611574565b6103ce6106af366004612f98565b611583565b6103b16106c2366004612f6d565b611618565b6103ce6106d53660046130cc565b611625565b6103f86106e8366004613207565b611640565b60ab546103b19060ff1681565b6103ce610708366004613256565b611873565b61043e60a45481565b610729610724366004612dc0565b6118bd565b6040516103bd91906132c1565b61043e611935565b6103d861074c366004612dc0565b611941565b6103ce61075f366004612f98565b61194c565b61043e610772366004612f6d565b60a96020526000908152604090205481565b61043e60a55481565b6103ce61079b366004613305565b6119d9565b60a0546103f8906001600160a01b031681565b6103d8611ab5565b6103b16107c936600461332a565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6103ce610805366004612f6d565b611b63565b6103d8611bd9565b6103ce611be6565b600061082582611c26565b80610834575061083482611c5c565b92915050565b610842611caa565b604051600090339047908381818185875af1925050503d8060008114610884576040519150601f19603f3d011682016040523d82523d6000602084013e610889565b606091505b50509050806108ab576040516312171d8360e31b815260040160405180910390fd5b50565b60606108b8611d04565b905090565b60006108c882611d96565b6108e5576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061090c82610e33565b9050336001600160a01b038216146109455761092881336107c9565b610945576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b603b546001600160a01b031633148015906109cc5750609f5461010090046001600160a01b03163314155b156109ea57604051631dd2188d60e31b815260040160405180910390fd5b60ae80546001600160a01b0319166001600160a01b03841690811790915560af8290556040518291907faf80eecb6d383b7ffd8fa84554dd154b74dfdf6410e2dc8a7f5afda7f2d7e01890600090a35050565b60ab5460009060ff16610ac157609f60019054906101000a90046001600160a01b03166001600160a01b031663f70210ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b89190613358565b5060aa5490565b610ad183611dbd565b610adc838383611eec565b505050565b60ae5460af546001600160a01b0390911690600090670de0b6b3a764000090610b0a9085613387565b610b1491906133bc565b90509250929050565b6000306399a2557a8484610b328160016133d0565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381865afa158015610b83573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bab91908101906133e8565b600081518110610bbd57610bbd61348d565b6020026020010151905092915050565b609f546040516308d247d360e41b815230600482015260009161010090046001600160a01b031690638d247d3090602401602060405180830381865afa158015610a9d573d6000803e3d6000fd5b33610c2760a782612084565b610c4457604051631dd2188d60e31b815260040160405180910390fd5b6002606d5403610c9b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002606d55610caa83836120a6565b50506001606d5550565b610adc83838360405180602001604052806000815250611873565b600061083482611d96565b60ac8054610ce7906134a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d13906134a3565b8015610d605780601f10610d3557610100808354040283529160200191610d60565b820191906000526020600020905b815481529060010190602001808311610d4357829003601f168201915b505050505081565b6060816000816001600160401b03811115610d8557610d85613009565b604051908082528060200260200182016040528015610dd757816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610da35790505b50905060005b828114610e2a57610e05868683818110610df957610df961348d565b905060200201356118bd565b828281518110610e1757610e1761348d565b6020908102919091010152600101610ddd565b50949350505050565b60006108348261211c565b610e46611caa565b609f5460ff1615610e6a57604051631dd2188d60e31b815260040160405180910390fd5b60a58190556040518181527f3f8118fc46e72ecde0c5e090803cad8c88e817b2f1e93e820aa9bfbf51f2468d9060200160405180910390a150565b60006001600160a01b038216610ece576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b610efb611caa565b610f056000612183565b565b603b546001600160a01b03163314801590610f8f5750609f5460405163027cf93b60e31b81523360048201526101009091046001600160a01b0316906313e7c9d890602401602060405180830381865afa158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d91906134dd565b155b15610fad57604051631dd2188d60e31b815260040160405180910390fd5b6001600160a01b038216600081815260a66020908152604091829020805460ff191685151590811790915591519182527f05d3978e3d4c9953c7d2cbd54c2c9901050350ecd9c40284efa828e2bcdcb94191015b60405180910390a25050565b6060600080600061101d85610ea5565b90506000816001600160401b0381111561103957611039613009565b604051908082528060200260200182016040528015611062578160200160208202803683370190505b50905061108f60408051608081018252600080825260208201819052918101829052606081019190915290565b60005b838614611109576110a2816121d5565b915081604001516111015781516001600160a01b0316156110c257815194505b876001600160a01b0316856001600160a01b03160361110157808387806001019850815181106110f4576110f461348d565b6020026020010181815250505b600101611092565b50909695505050505050565b61111d611caa565b80516111309060ad906020840190612c89565b5050565b600854610100900460ff16158080156111545750600854600160ff909116105b8061116e5750303b15801561116e575060085460ff166001145b6111d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c92565b6008805460ff1916600117905580156111f4576008805461ff0019166101001790555b609f805474ffffffffffffffffffffffffffffffffffffffff001916336101000217905560a186905560a485905560a5849055825161123a9060a2906020860190612c89565b50815161124e9060a3906020850190612c89565b5060a080546001600160a01b0319166001600160a01b03891617905561127387612183565b61127b612211565b80156112c1576008805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60606108b8612240565b606060006112e284846134fa565b90506000816001600160401b038111156112fe576112fe613009565b604051908082528060200260200182016040528015611327578160200160208202803683370190505b50905060005b82811015610e2a5761134260a787830161224f565b8282815181106113545761135461348d565b6001600160a01b039092166020928302919091019091015260010161132d565b606081831061139657604051631960ccad60e11b815260040160405180910390fd5b6000806113a260005490565b9050808411156113b0578093505b60006113bb87610ea5565b9050848610156113da57858503818110156113d4578091505b506113de565b5060005b6000816001600160401b038111156113f8576113f8613009565b604051908082528060200260200182016040528015611421578160200160208202803683370190505b509050816000036114375793506114e692505050565b6000611442886118bd565b905060008160400151611453575080515b885b8881141580156114655750848714155b156114da57611473816121d5565b925082604001516114d25782516001600160a01b03161561149357825191505b8a6001600160a01b0316826001600160a01b0316036114d257808488806001019950815181106114c5576114c561348d565b6020026020010181815250505b600101611455565b50505092835250909150505b9392505050565b6114f5611caa565b6040516370a0823160e01b81523060048201526108ab9033906001600160a01b038416906370a0823190602401602060405180830381865afa15801561153f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115639190613358565b6001600160a01b038416919061225b565b60606108b8600061064e611935565b336001600160a01b038316036115ac5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600061083460a783612084565b61162d611caa565b80516111309060ac906020840190612c89565b6000611654603b546001600160a01b031690565b6001600160a01b0316336001600160a01b0316141580156116855750609f5461010090046001600160a01b03163314155b156116a357604051631dd2188d60e31b815260040160405180910390fd5b6002606d54036116f55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c92565b6002606d55609f5460405163a90cb89b60e01b81526001600160a01b0385811660048301526101009092049091169063a90cb89b90602401602060405180830381865afa15801561174a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176e91906134dd565b61179657604051633855dd1960e21b81526001600160a01b0384166004820152602401610c92565b61179f836122d3565b9050806001600160a01b031663cf7a1d77306117c3603b546001600160a01b031690565b856040518463ffffffff1660e01b81526004016117e293929190613511565b600060405180830381600087803b1580156117fc57600080fd5b505af1158015611810573d6000803e3d6000fd5b505050506118288160a761238090919063ffffffff16565b50604051600181526001600160a01b038216907f1f96bc657d385fd83da973a43f2ad969e6d96b6779b779571a7306db7ca1cd009060200160405180910390a26001606d5592915050565b61187e848484610ac8565b6001600160a01b0383163b156118b75761189a84848484612395565b6118b7576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60408051608080820183526000808352602080840182905283850182905260608085018390528551938401865282845290830182905293820181905292810183905290915060005483106119115792915050565b61191a836121d5565b905080604001511561192c5792915050565b6114e683612481565b60006108b860a76124b6565b6060610834826124c0565b611954611caa565b609f5460ff161561197857604051631dd2188d60e31b815260040160405180910390fd5b801561198f5761198960a783612380565b5061199c565b61199a60a78361261c565b505b816001600160a01b03167f1f96bc657d385fd83da973a43f2ad969e6d96b6779b779571a7306db7ca1cd0082604051611001911515815260200190565b609f5460405163027cf93b60e31b81523360048201526101009091046001600160a01b0316906313e7c9d890602401602060405180830381865afa158015611a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4991906134dd565b611a6657604051631dd2188d60e31b815260040160405180910390fd5b60ab805460ff191682151590811790915560aa83905560408051848152602081019290925233917f3adcad50d42c2c3ec23ad4ebf52f75cf92212482d66ff9060f0b46735d74b9f09101611001565b6060609f60019054906101000a90046001600160a01b03166001600160a01b03166380f2152e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611b0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b329190810190613546565b60a154611b3e90612631565b604051602001611b4f9291906135b3565b604051602081830303815290604052905090565b611b6b611caa565b6001600160a01b038116611bd05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c92565b6108ab81612183565b60ad8054610ce7906134a3565b611bee611caa565b609f805460ff191660011790556040517f312de1f2fe8510f37391aa593066f10f0a60eda0aa8400eedbbf16fe320467b790600090a1565b60006301ffc9a760e01b6001600160e01b03198316148061083457506001600160e01b0319821663152a902d60e11b1492915050565b60006301ffc9a760e01b6001600160e01b031983161480611c8d57506380ac58cd60e01b6001600160e01b03198316145b806108345750506001600160e01b031916635b5e139f60e01b1490565b603b546001600160a01b03163314610f055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c92565b606060a28054611d13906134a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611d3f906134a3565b8015611d8c5780601f10611d6157610100808354040283529160200191611d8c565b820191906000526020600020905b815481529060010190602001808311611d6f57829003601f168201915b5050505050905090565b6000805482108015610834575050600090815260046020526040902054600160e01b161590565b6001600160a01b038116156108ab57600260a45410611e0a5760405162461bcd60e51b815260206004820152600960248201526814dbdd5b189bdd5b9960ba1b6044820152606401610c92565b600160a4541080611e865750609f54604051637765acf760e11b81523360048201526101009091046001600160a01b03169063eecb59ee90602401602060405180830381865afa158015611e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8691906134dd565b80611ea0575033600090815260a6602052604090205460ff165b6108ab5760405162461bcd60e51b815260206004820152601660248201527f4578636c757369766520746f204178656c6172536561000000000000000000006044820152606401610c92565b6000611ef78261211c565b9050836001600160a01b0316816001600160a01b031614611f2a5760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417611f7757611f5a86336107c9565b611f7757604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038516611f9e57604051633a954ecd60e21b815260040160405180910390fd5b8015611fa957600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b8416900361203b576001840160008181526004602052604081205490036120395760005481146120395760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6001600160a01b038116600090815260018301602052604081205415156114e6565b6001600160a01b038216600090815260a96020526040812080548392906120ce9084906133d0565b90915550600090506120e36001546000540390565b60a5549091506120f383836133d0565b111561211257604051639315093760e01b815260040160405180910390fd5b610adc8383612688565b60008160005481101561216a5760008181526004602052604081205490600160e01b82169003612168575b806000036114e6575060001901600081815260046020526040902054612147565b505b604051636f96cda160e11b815260040160405180910390fd5b603b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260046020526040902054610834906126a2565b600854610100900460ff166122385760405162461bcd60e51b8152600401610c92906135e2565b610f056126e9565b606060a38054611d13906134a3565b60006114e68383612717565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806118b75760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610c92565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661237b5760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610c92565b919050565b60006114e6836001600160a01b038416612741565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906123ca90339089908890889060040161362d565b6020604051808303816000875af1925050508015612405575060408051601f3d908101601f1916820190925261240291810190613669565b60015b612463573d808015612433576040519150601f19603f3d011682016040523d82523d6000602084013e612438565b606091505b50805160000361245b576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6040805160808101825260008082526020820181905291810182905260608101919091526108346124b18361211c565b6126a2565b6000610834825490565b60606124cb82610ccf565b61252f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610c92565b60ac805461253c906134a3565b90506000036125fd57609f60019054906101000a90046001600160a01b03166001600160a01b031663d547cfb76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612598573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125c09190810190613546565b60a1546125cc90612631565b6125d584612790565b6040516020016125e793929190613686565b6040516020818303038152906040529050919050565b60ac61260883612790565b60ad6040516020016125e79392919061376f565b60006114e6836001600160a01b038416612890565b60608160000361265b5750506040805180820190915260048152630307830360e41b602082015290565b8160005b811561267e578061266f816137a2565b915050600882901c915061265f565b6124798482612983565b611130828260405180602001604052806000815250612b1e565b604080516080810182526001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b831615159181019190915260e89190911c606082015290565b600854610100900460ff166127105760405162461bcd60e51b8152600401610c92906135e2565b6001606d55565b600082600001828154811061272e5761272e61348d565b9060005260206000200154905092915050565b600081815260018301602052604081205461278857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610834565b506000610834565b6060816000036127b75750506040805180820190915260018152600360fc1b602082015290565b8160005b81156127e157806127cb816137a2565b91506127da9050600a836133bc565b91506127bb565b6000816001600160401b038111156127fb576127fb613009565b6040519080825280601f01601f191660200182016040528015612825576020820181803683370190505b5090505b84156124795761283a6001836134fa565b9150612847600a866137bb565b6128529060306133d0565b60f81b8183815181106128675761286761348d565b60200101906001600160f81b031916908160001a905350612889600a866133bc565b9450612829565b600081815260018301602052604081205480156129795760006128b46001836134fa565b85549091506000906128c8906001906134fa565b905081811461292d5760008660000182815481106128e8576128e861348d565b906000526020600020015490508087600001848154811061290b5761290b61348d565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061293e5761293e6137cf565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610834565b6000915050610834565b60606000612992836002613387565b61299d9060026133d0565b6001600160401b038111156129b4576129b4613009565b6040519080825280601f01601f1916602001820160405280156129de576020820181803683370190505b509050600360fc1b816000815181106129f9576129f961348d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612a2857612a2861348d565b60200101906001600160f81b031916908160001a9053506000612a4c846002613387565b612a579060016133d0565b90505b6001811115612acf576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a8b57612a8b61348d565b1a60f81b828281518110612aa157612aa161348d565b60200101906001600160f81b031916908160001a90535060049490941c93612ac8816137e5565b9050612a5a565b5083156114e65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c92565b612b288383612b8b565b6001600160a01b0383163b15610adc576000548281035b612b526000868380600101945086612395565b612b6f576040516368d2bf6b60e11b815260040160405180910390fd5b818110612b3f578160005414612b8457600080fd5b5050505050565b6000805490829003612bb05760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b818114612c5f57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101612c27565b5081600003612c8057604051622e076360e81b815260040160405180910390fd5b60005550505050565b828054612c95906134a3565b90600052602060002090601f016020900481019282612cb75760008555612cfd565b82601f10612cd057805160ff1916838001178555612cfd565b82800160010185558215612cfd579182015b82811115612cfd578251825591602001919060010190612ce2565b50612d09929150612d0d565b5090565b5b80821115612d095760008155600101612d0e565b6001600160e01b0319811681146108ab57600080fd5b600060208284031215612d4a57600080fd5b81356114e681612d22565b60005b83811015612d70578181015183820152602001612d58565b838111156118b75750506000910152565b60008151808452612d99816020860160208601612d55565b601f01601f19169290920160200192915050565b6020815260006114e66020830184612d81565b600060208284031215612dd257600080fd5b5035919050565b6001600160a01b03811681146108ab57600080fd5b60008060408385031215612e0157600080fd5b8235612e0c81612dd9565b946020939093013593505050565b600080600060608486031215612e2f57600080fd5b8335612e3a81612dd9565b92506020840135612e4a81612dd9565b929592945050506040919091013590565b60008060408385031215612e6e57600080fd5b50508035926020909101359150565b60008060208385031215612e9057600080fd5b82356001600160401b0380821115612ea757600080fd5b818501915085601f830112612ebb57600080fd5b813581811115612eca57600080fd5b8660208260051b8501011115612edf57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b8181101561110957612f5a8385516001600160a01b0381511682526001600160401b03602082015116602083015260408101511515604083015262ffffff60608201511660608301525050565b9284019260809290920191600101612f0d565b600060208284031215612f7f57600080fd5b81356114e681612dd9565b80151581146108ab57600080fd5b60008060408385031215612fab57600080fd5b8235612fb681612dd9565b91506020830135612fc681612f8a565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561110957835183529284019291840191600101612fed565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561304757613047613009565b604052919050565b60006001600160401b0382111561306857613068613009565b50601f01601f191660200190565b600082601f83011261308757600080fd5b813561309a6130958261304f565b61301f565b8181528460208386010111156130af57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156130de57600080fd5b81356001600160401b038111156130f457600080fd5b61247984828501613076565b60008060008060008060c0878903121561311957600080fd5b863561312481612dd9565b955060208701359450604087013593506060870135925060808701356001600160401b038082111561315557600080fd5b6131618a838b01613076565b935060a089013591508082111561317757600080fd5b5061318489828a01613076565b9150509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156111095783516001600160a01b0316835292840192918401916001016131ad565b6000806000606084860312156131e757600080fd5b83356131f281612dd9565b95602085013595506040909401359392505050565b6000806040838503121561321a57600080fd5b823561322581612dd9565b915060208301356001600160401b0381111561324057600080fd5b61324c85828601613076565b9150509250929050565b6000806000806080858703121561326c57600080fd5b843561327781612dd9565b9350602085013561328781612dd9565b92506040850135915060608501356001600160401b038111156132a957600080fd5b6132b587828801613076565b91505092959194509250565b81516001600160a01b031681526020808301516001600160401b03169082015260408083015115159082015260608083015162ffffff169082015260808101610834565b6000806040838503121561331857600080fd5b823591506020830135612fc681612f8a565b6000806040838503121561333d57600080fd5b823561334881612dd9565b91506020830135612fc681612dd9565b60006020828403121561336a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156133a1576133a1613371565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826133cb576133cb6133a6565b500490565b600082198211156133e3576133e3613371565b500190565b600060208083850312156133fb57600080fd5b82516001600160401b038082111561341257600080fd5b818501915085601f83011261342657600080fd5b81518181111561343857613438613009565b8060051b915061344984830161301f565b818152918301840191848101908884111561346357600080fd5b938501935b8385101561348157845182529385019390850190613468565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806134b757607f821691505b6020821081036134d757634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156134ef57600080fd5b81516114e681612f8a565b60008282101561350c5761350c613371565b500390565b60006001600160a01b0380861683528085166020840152506060604083015261353d6060830184612d81565b95945050505050565b60006020828403121561355857600080fd5b81516001600160401b0381111561356e57600080fd5b8201601f8101841361357f57600080fd5b805161358d6130958261304f565b8181528560208385010111156135a257600080fd5b61353d826020830160208601612d55565b600083516135c5818460208801612d55565b8351908301906135d9818360208801612d55565b01949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261365f6080830184612d81565b9695505050505050565b60006020828403121561367b57600080fd5b81516114e681612d22565b60008451613698818460208901612d55565b8451908301906136ac818360208901612d55565b602f60f81b910190815283516136c9816001840160208801612d55565b0160010195945050505050565b8054600090600181811c90808316806136f057607f831692505b6020808410820361371157634e487b7160e01b600052602260045260246000fd5b818015613725576001811461373657613763565b60ff19861689528489019650613763565b60008881526020902060005b8681101561375b5781548b820152908501908301613742565b505084890196505b50505050505092915050565b600061377b82866136d6565b845161378b818360208901612d55565b613797818301866136d6565b979650505050505050565b6000600182016137b4576137b4613371565b5060010190565b6000826137ca576137ca6133a6565b500690565b634e487b7160e01b600052603160045260246000fd5b6000816137f4576137f4613371565b50600019019056fea26469706673582212209013cd2567e5e211caee0c63d151f04f9956342407555b7c4fbfd6ba71aa778564736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "explicitOwnershipOf(uint256)": {
        "details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"
      },
      "explicitOwnershipsOf(uint256[])": {
        "details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "tokensOfOwner(address)": {
        "details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."
      },
      "tokensOfOwnerIn(address,uint256,uint256)": {
        "details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "ApproveToCaller()": [
        {
          "notice": "The caller cannot approve to their own address."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "InvalidQueryRange()": [
        {
          "notice": "Invalid query range (`start` >= `stop`)."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8444,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8446,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8448,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 8450,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 8454,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8458,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8463,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)8376_storage)"
      },
      {
        "astId": 8469,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 138,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_initialized",
        "offset": 0,
        "slot": "8",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_initializing",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 625,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "__gap",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_owner",
        "offset": 0,
        "slot": "59",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "__gap",
        "offset": 0,
        "slot": "60",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 296,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "_status",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "__gap",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6356,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "newMinterStopped",
        "offset": 0,
        "slot": "159",
        "type": "t_bool"
      },
      {
        "astId": 6359,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "registry",
        "offset": 1,
        "slot": "159",
        "type": "t_contract(AxelarSeaProjectRegistry)6297"
      },
      {
        "astId": 6361,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "fundAddress",
        "offset": 0,
        "slot": "160",
        "type": "t_address"
      },
      {
        "astId": 6363,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "collectionId",
        "offset": 0,
        "slot": "161",
        "type": "t_bytes32"
      },
      {
        "astId": 6365,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "nftName",
        "offset": 0,
        "slot": "162",
        "type": "t_string_storage"
      },
      {
        "astId": 6367,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "nftSymbol",
        "offset": 0,
        "slot": "163",
        "type": "t_string_storage"
      },
      {
        "astId": 6369,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "exclusiveLevel",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 6371,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "maxSupply",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 6375,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "exclusiveContract",
        "offset": 0,
        "slot": "166",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6378,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "minters",
        "offset": 0,
        "slot": "167",
        "type": "t_struct(AddressSet)3706_storage"
      },
      {
        "astId": 6382,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "walletMinted",
        "offset": 0,
        "slot": "169",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6384,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "mintFeeOverride",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 6386,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "enableMintFeeOverride",
        "offset": 0,
        "slot": "171",
        "type": "t_bool"
      },
      {
        "astId": 6388,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "baseTokenUriPrefix",
        "offset": 0,
        "slot": "172",
        "type": "t_string_storage"
      },
      {
        "astId": 6390,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "baseTokenUriSuffix",
        "offset": 0,
        "slot": "173",
        "type": "t_string_storage"
      },
      {
        "astId": 6392,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "royaltyReceiver",
        "offset": 0,
        "slot": "174",
        "type": "t_address"
      },
      {
        "astId": 6394,
        "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
        "label": "royaltyPercentage",
        "offset": 0,
        "slot": "175",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AxelarSeaProjectRegistry)6297": {
        "encoding": "inplace",
        "label": "contract AxelarSeaProjectRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)8376_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)8376_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3706_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3705,
            "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3405_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3405_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3400,
            "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3404,
            "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenApprovalRef)8376_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 8375,
            "contract": "contracts/mint/AxelarSeaNft721A.sol:AxelarSeaNft721A",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}