{
  "address": "0x4240DdDbbA5193C3df37404dA9b188528c50Ec80",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "InvalidTemplate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "overrider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "overrided",
          "type": "bool"
        }
      ],
      "name": "OverrideMintFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetExclusiveContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "SetMaxSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "SetRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StopNewMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenUriPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenUriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "deployMinter",
      "outputs": [
        {
          "internalType": "contract IAxelarSeaMinterInitializable",
          "name": "minter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableMintFeeOverride",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "exclusiveContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exclusiveLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMinters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getMinters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_collectionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exclusiveLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_nftSymbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeOverride",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newMinterStopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "overrided",
          "type": "bool"
        }
      ],
      "name": "overrideMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract AxelarSeaProjectRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newPrefix",
          "type": "string"
        }
      ],
      "name": "setBaseTokenUriPrefix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newSuffix",
          "type": "string"
        }
      ],
      "name": "setBaseTokenUriSuffix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setExclusiveContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "setRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopNewMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "walletMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6fe5884b2a1a3d5d37758ca4af27eae2a1d0d608ba157900a476d532539dcec2",
  "receipt": {
    "to": null,
    "from": "0x5ea89D6f46be3E783E45D094FF860f353e9C9c0c",
    "contractAddress": "0x4240DdDbbA5193C3df37404dA9b188528c50Ec80",
    "transactionIndex": 5,
    "gasUsed": "3147151",
    "logsBloom": "0x
    "blockHash": "0x8d3a9c702b5fc23b31f946c6e444bcbad0b68f63041cdd76304cde1077ccba46",
    "transactionHash": "0x6fe5884b2a1a3d5d37758ca4af27eae2a1d0d608ba157900a476d532539dcec2",
    "logs": [],
    "blockNumber": 15425600,
    "cumulativeGasUsed": "3651950",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "161adc551240a37cf661d6862dee1448",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"InvalidTemplate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"overrider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overrided\",\"type\":\"bool\"}],\"name\":\"OverrideMintFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetExclusiveContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"SetMaxSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"SetRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StopNewMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenUriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenUriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deployMinter\",\"outputs\":[{\"internalType\":\"contract IAxelarSeaMinterInitializable\",\"name\":\"minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMintFeeOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exclusiveContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exclusiveLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMinters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getMinters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collectionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exclusiveLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeOverride\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newMinterStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"overrided\",\"type\":\"bool\"}],\"name\":\"overrideMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract AxelarSeaProjectRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newPrefix\",\"type\":\"string\"}],\"name\":\"setBaseTokenUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSuffix\",\"type\":\"string\"}],\"name\":\"setBaseTokenUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExclusiveContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopNewMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mint/AxelarSeaNft721Enumerable.sol\":\"AxelarSeaNft721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/lib/RevertReason.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n// Credit: https://github.com/ProjectOpenSea/seaport/blob/891b5d4f52b58eb7030597fbb22dca67fd86c4c8/contracts/lib/LowLevelHelpers.sol\\r\\n\\r\\nuint256 constant AlmostOneWord = 0x1f;\\r\\nuint256 constant OneWord = 0x20;\\r\\nuint256 constant FreeMemoryPointerSlot = 0x40;\\r\\nuint256 constant CostPerWord = 3;\\r\\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\\r\\nuint256 constant ExtraGasBuffer = 0x20;\\r\\n\\r\\nlibrary RevertReason {\\r\\n    /**\\r\\n     * @dev Internal view function to revert and pass along the revert reason if\\r\\n     *      data was returned by the last call and that the size of that data\\r\\n     *      does not exceed the currently allocated memory size.\\r\\n     */\\r\\n    function revertWithReasonIfOneIsReturned() internal view {\\r\\n        assembly {\\r\\n            // If it returned a message, bubble it up as long as sufficient gas\\r\\n            // remains to do so:\\r\\n            if returndatasize() {\\r\\n                // Ensure that sufficient gas is available to copy returndata\\r\\n                // while expanding memory where necessary. Start by computing\\r\\n                // the word size of returndata and allocated memory.\\r\\n                let returnDataWords := div(\\r\\n                    add(returndatasize(), AlmostOneWord),\\r\\n                    OneWord\\r\\n                )\\r\\n\\r\\n                // Note: use the free memory pointer in place of msize() to work\\r\\n                // around a Yul warning that prevents accessing msize directly\\r\\n                // when the IR pipeline is activated.\\r\\n                let msizeWords := div(mload(FreeMemoryPointerSlot), OneWord)\\r\\n\\r\\n                // Next, compute the cost of the returndatacopy.\\r\\n                let cost := mul(CostPerWord, returnDataWords)\\r\\n\\r\\n                // Then, compute cost of new memory allocation.\\r\\n                if gt(returnDataWords, msizeWords) {\\r\\n                    cost := add(\\r\\n                        cost,\\r\\n                        add(\\r\\n                            mul(sub(returnDataWords, msizeWords), CostPerWord),\\r\\n                            div(\\r\\n                                sub(\\r\\n                                    mul(returnDataWords, returnDataWords),\\r\\n                                    mul(msizeWords, msizeWords)\\r\\n                                ),\\r\\n                                MemoryExpansionCoefficient\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                }\\r\\n\\r\\n                // Finally, add a small constant and compare to gas remaining;\\r\\n                // bubble up the revert data if enough gas is still available.\\r\\n                if lt(add(cost, ExtraGasBuffer), gas()) {\\r\\n                    // Copy returndata to memory; overwrite existing memory.\\r\\n                    returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n                    // Revert, specifying memory region with copied returndata.\\r\\n                    revert(0, returndatasize())\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb987aae3d26d204009707264a90a6847221d19b825dfad47c52f8aae6303c21\",\"license\":\"MIT\"},\"contracts/lib/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n// Using IERC20 instead of ERC20\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\r\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\r\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\r\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\r\\nlibrary SafeTransferLib {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                             ETH OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function safeTransferETH(address to, uint256 amount) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Transfer the ETH and store if it succeeded or not.\\r\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\r\\n        }\\r\\n\\r\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            ERC20 OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"APPROVE_FAILED\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8eb84ced6e8f7eded1002fc955300db060c431eb425924a76a321045bfb21e19\",\"license\":\"AGPL-3.0-only\"},\"contracts/meta-transactions/ContextMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract ContextMixin {\\r\\n    function msgSender() internal view returns (address sender) {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(\\r\\n                    mload(add(array, index)),\\r\\n                    0xffffffffffffffffffffffffffffffffffffffff\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            sender = msg.sender;\\r\\n        }\\r\\n        return sender;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb41001596c090a8ba2e6a6431db48e37fe6fee28d8104af12679263317c1dae1\",\"license\":\"MIT\"},\"contracts/meta-transactions/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract EIP712Base is Initializable {\\r\\n    struct EIP712Domain {\\r\\n        string name;\\r\\n        string version;\\r\\n        address verifyingContract;\\r\\n        bytes32 salt;\\r\\n    }\\r\\n\\r\\n    string constant public ERC712_VERSION = \\\"1\\\";\\r\\n\\r\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n        )\\r\\n    );\\r\\n    bytes32 internal domainSeperator;\\r\\n\\r\\n    // supposed to be called once while initializing.\\r\\n    // one of the contracts that inherits this contract follows proxy pattern\\r\\n    // so it is not possible to do this in a constructor\\r\\n    function _initializeEIP712(\\r\\n        string memory name\\r\\n    )\\r\\n        internal\\r\\n        initializer\\r\\n    {\\r\\n        _setDomainSeperator(name);\\r\\n    }\\r\\n\\r\\n    function _setDomainSeperator(string memory name) internal {\\r\\n        domainSeperator = keccak256(\\r\\n            abi.encode(\\r\\n                EIP712_DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(ERC712_VERSION)),\\r\\n                getChainId(),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getDomainSeperator() public view returns (bytes32) {\\r\\n        return domainSeperator;\\r\\n    }\\r\\n\\r\\n    function getChainId() public view returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Accept message hash and returns hash message in EIP712 compatible form\\r\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\r\\n     * https://eips.ethereum.org/EIPS/eip-712\\r\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\r\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\r\\n     */\\r\\n    function toTypedMessageHash(bytes32 messageHash)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\r\\n            );\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4fa677a06032724c803ff381308d4b531ad02318e88457fbea902ce40e45cc1c\",\"license\":\"MIT\"},\"contracts/meta-transactions/MetaTransactionVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {EIP712Base} from \\\"./EIP712Base.sol\\\";\\r\\nimport \\\"../seaport/lib/SignatureVerification.sol\\\";\\r\\n\\r\\ncontract MetaTransactionVerifier is EIP712Base, SignatureVerification {\\r\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\r\\n        )\\r\\n    );\\r\\n    event MetaTransactionExecuted(\\r\\n        address userAddress,\\r\\n        address payable relayerAddress,\\r\\n        bytes functionSignature\\r\\n    );\\r\\n    mapping(uint256 => bool) nonces;\\r\\n\\r\\n    /*\\r\\n     * Meta transaction structure.\\r\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\r\\n     * He should call the desired function directly in that case.\\r\\n     */\\r\\n    struct MetaTransaction {\\r\\n        uint256 nonce;\\r\\n        address from;\\r\\n        bytes functionSignature;\\r\\n    }\\r\\n\\r\\n    function verifyMetaTransaction(\\r\\n        address userAddress,\\r\\n        uint256 nonce,\\r\\n        bytes calldata functionSignature,\\r\\n        bytes calldata signature\\r\\n    ) internal {\\r\\n        require(!nonces[nonce], \\\"Already run\\\");\\r\\n\\r\\n        MetaTransaction memory metaTx = MetaTransaction({\\r\\n            nonce: nonce,\\r\\n            from: userAddress,\\r\\n            functionSignature: functionSignature\\r\\n        });\\r\\n\\r\\n        require(\\r\\n            _verifyMetaTransaction(userAddress, metaTx, signature),\\r\\n            \\\"Signer and signature do not match\\\"\\r\\n        );\\r\\n\\r\\n        // mark nonce to prevent tx reuse\\r\\n        nonces[nonce] = true;\\r\\n    }\\r\\n\\r\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    META_TRANSACTION_TYPEHASH,\\r\\n                    metaTx.nonce,\\r\\n                    metaTx.from,\\r\\n                    keccak256(metaTx.functionSignature)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _verifyMetaTransaction(\\r\\n        address signer,\\r\\n        MetaTransaction memory metaTx,\\r\\n        bytes calldata signature\\r\\n    ) internal view returns (bool) {\\r\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\r\\n\\r\\n        // console.log(uint256(toTypedMessageHash(hashMetaTransaction(metaTx))));\\r\\n\\r\\n        _assertValidSignature(signer, toTypedMessageHash(hashMetaTransaction(metaTx)), signature);\\r\\n\\r\\n        return true;\\r\\n\\r\\n        // return\\r\\n        //     signer ==\\r\\n        //     ecrecover(\\r\\n        //         toTypedMessageHash(hashMetaTransaction(metaTx)),\\r\\n        //         sigV,\\r\\n        //         sigR,\\r\\n        //         sigS\\r\\n        //     );\\r\\n    }\\r\\n}\",\"keccak256\":\"0x287d102077ffe0d1845dcb15ba016aacd07a3e53bcc066d032b6d085ac5ddbe7\",\"license\":\"MIT\"},\"contracts/meta-transactions/NativeMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {MetaTransactionVerifier} from \\\"./MetaTransactionVerifier.sol\\\";\\r\\nimport \\\"../lib/RevertReason.sol\\\";\\r\\n\\r\\ncontract NativeMetaTransaction is MetaTransactionVerifier {\\r\\n    function executeMetaTransaction(\\r\\n        address userAddress,\\r\\n        uint256 nonce,\\r\\n        bytes calldata functionSignature,\\r\\n        bytes calldata signature\\r\\n    ) public payable returns (bytes memory) {\\r\\n        verifyMetaTransaction(userAddress, nonce, functionSignature, signature);\\r\\n\\r\\n        emit MetaTransactionExecuted(\\r\\n            userAddress,\\r\\n            payable(msg.sender),\\r\\n            functionSignature\\r\\n        );\\r\\n\\r\\n        // Append userAddress and relayer address at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call(\\r\\n            abi.encodePacked(functionSignature, userAddress)\\r\\n        );\\r\\n\\r\\n        // require(success, \\\"Function call not successful\\\");\\r\\n\\r\\n        if (!success) {\\r\\n            RevertReason.revertWithReasonIfOneIsReturned();\\r\\n            revert(\\\"Function call not successful\\\");\\r\\n        }\\r\\n\\r\\n        return returnData;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcd5f3e1226335d469aa116dec3a987da2a8867500491301bba94d19c73ca8a03\",\"license\":\"MIT\"},\"contracts/mint/AxelarSeaNft721Enumerable.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"./lib/AxelarSeaNftBase.sol\\\";\\r\\n\\r\\ncontract AxelarSeaNft721Enumerable is ERC721Enumerable, AxelarSeaNftBase {\\r\\n  constructor() ERC721(\\\"_\\\", \\\"_\\\") {}\\r\\n\\r\\n  function _mintInternal(address to, uint256 amount) internal override {\\r\\n    walletMinted[to] += amount;\\r\\n\\r\\n    uint256 supply = totalSupply();\\r\\n    require(supply + amount <= maxSupply, \\\"Supply maxed\\\");\\r\\n\\r\\n    unchecked {\\r\\n      if (amount == 1) {\\r\\n        _safeMint(to, supply + 1);\\r\\n      } else {\\r\\n        for (uint256 i = 1; i <= amount; i++) {\\r\\n          _safeMint(to, supply + i);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) internal override {\\r\\n    AxelarSeaNftBase._beforeTokenTransferCheck(from);\\r\\n    super._beforeTokenTransfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  function exists(uint256 tokenId) public override view returns(bool) {\\r\\n    return _exists(tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-tokenURI}.\\r\\n    */\\r\\n  function tokenURI(uint256 tokenId) public view override(AxelarSeaNftBase, ERC721) virtual returns (string memory) {\\r\\n    return AxelarSeaNftBase.tokenURI(tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-name}.\\r\\n    */\\r\\n  function name() public view override(AxelarSeaNftBase, ERC721) virtual returns (string memory) {\\r\\n    return AxelarSeaNftBase.name();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-symbol}.\\r\\n    */\\r\\n  function symbol() public view override(AxelarSeaNftBase, ERC721) virtual returns (string memory) {\\r\\n    return AxelarSeaNftBase.symbol();\\r\\n  }\\r\\n\\r\\n  function _msgSender() internal view override(Context, ContextUpgradeable) virtual returns (address) {\\r\\n    return ContextUpgradeable._msgSender();\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view override(Context, ContextUpgradeable) virtual returns (bytes calldata) {\\r\\n    return ContextUpgradeable._msgData();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC165-supportsInterface}.\\r\\n    */\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(AxelarSeaNftBase, ERC721Enumerable) returns (bool) {\\r\\n    return AxelarSeaNftBase.supportsInterface(interfaceId) || ERC721Enumerable.supportsInterface(interfaceId);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xd577b9eb10c3363b029451e784cc8c15d42cd128684cf11325246ee1eb04c861\",\"license\":\"None\"},\"contracts/mint/AxelarSeaProjectRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./lib/IAxelarSeaNftInitializable.sol\\\";\\r\\nimport \\\"../meta-transactions/NativeMetaTransaction.sol\\\";\\r\\nimport \\\"../meta-transactions/ContextMixin.sol\\\";\\r\\nimport \\\"../lib/SafeTransferLib.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./lib/AxelarSeaMintingErrors.sol\\\";\\r\\n\\r\\ncontract AxelarSeaProjectRegistry is OwnableUpgradeable, NativeMetaTransaction, ContextMixin, ReentrancyGuardUpgradeable {\\r\\n  using SafeTransferLib for IERC20;\\r\\n\\r\\n  mapping(address => bool) public operators;\\r\\n  mapping(address => bool) public templates;\\r\\n  mapping(address => bool) public minterTemplates;\\r\\n  mapping(address => bool) public axelarSeaContract;\\r\\n\\r\\n  mapping(bytes32 => address) public projectOwner;\\r\\n  mapping(address => bytes32) public nftProject;\\r\\n\\r\\n  // 1 = Member, 2 = Admin\\r\\n  mapping(bytes32 => mapping(address => uint256)) public projectMember;\\r\\n\\r\\n  // Collection ID -> contract address\\r\\n  mapping(bytes32 => address) public collectionMapping;\\r\\n\\r\\n  // Minting fee\\r\\n  address public feeAddress;\\r\\n  uint256 public baseMintFee;\\r\\n\\r\\n  string public baseContractURI;\\r\\n  string public baseTokenURI;\\r\\n\\r\\n  // Deployment fee\\r\\n  address public newProjectFeeAddress;\\r\\n  uint256 public newProjectFeeAmount;\\r\\n\\r\\n  address public newCollectionFeeAddress;\\r\\n  uint256 public newCollectionFeeAmount;\\r\\n\\r\\n  // Best practice to leave room for more variable if upgradeable\\r\\n  uint256[200] private __GAP;\\r\\n\\r\\n  function initialize() public initializer {\\r\\n    baseMintFee = 0.02 ether; // 2%\\r\\n    baseContractURI = \\\"https://api-nftdrop.axelarsea.com/contractMetadata/\\\"; // TODO\\r\\n    baseTokenURI = \\\"https://api-nftdrop.axelarsea.com/tokenMetadata/\\\"; // TODO\\r\\n\\r\\n    feeAddress = msg.sender;\\r\\n    _initializeEIP712(\\\"AxelarSeaProjectRegistry\\\");\\r\\n\\r\\n    __Ownable_init();\\r\\n    __ReentrancyGuard_init();\\r\\n  }\\r\\n\\r\\n  modifier onlyOperator {\\r\\n    require(operators[msgSender()], \\\"Not Operator\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  event SetNewProjectFee(address indexed token, uint256 fee);\\r\\n  function setNewProjectFee(address token, uint256 fee) public onlyOwner {\\r\\n    newProjectFeeAddress = token;\\r\\n    newProjectFeeAmount = fee;\\r\\n    emit SetNewProjectFee(token, fee);\\r\\n  }\\r\\n\\r\\n  event SetNewCollectionFee(address indexed token, uint256 fee);\\r\\n  function setNewCollectionFee(address token, uint256 fee) public onlyOwner {\\r\\n    newCollectionFeeAddress = token;\\r\\n    newCollectionFeeAmount = fee;\\r\\n    emit SetNewCollectionFee(token, fee);\\r\\n  }\\r\\n\\r\\n  event SetMintFee(address indexed addr, uint256 fee);\\r\\n  function setMintFee(address addr, uint256 fee) public onlyOwner {\\r\\n    require(fee <= 1 ether, \\\"Too much fee\\\");\\r\\n    feeAddress = addr;\\r\\n    baseMintFee = fee;\\r\\n    emit SetMintFee(addr, fee);\\r\\n  }\\r\\n\\r\\n  event SetOperator(address indexed operator, bool enabled);\\r\\n  function setOperator(address operator, bool enabled) public onlyOwner {\\r\\n    operators[operator] = enabled;\\r\\n    emit SetOperator(operator, enabled);\\r\\n  }\\r\\n\\r\\n  event SetMinterTemplate(address indexed template, bool enabled);\\r\\n  function setMinterTemplate(address template, bool enabled) public onlyOwner {\\r\\n    minterTemplates[template] = enabled;\\r\\n    emit SetMinterTemplate(template, enabled);\\r\\n  }\\r\\n\\r\\n  event SetTemplate(address indexed template, bool enabled);\\r\\n  function setTemplate(address template, bool enabled) public onlyOwner {\\r\\n    templates[template] = enabled;\\r\\n    emit SetTemplate(template, enabled);\\r\\n  }\\r\\n\\r\\n  event SetAxelarSeaContract(address indexed addr, bool enabled);\\r\\n  function setAxelarSeaContract(address addr, bool enabled) public onlyOwner {\\r\\n    axelarSeaContract[addr] = enabled;\\r\\n    emit SetAxelarSeaContract(addr, enabled);\\r\\n  }\\r\\n\\r\\n  event NewProject(address indexed owner, bytes32 projectId);\\r\\n  function _newProject(address owner, bytes32 projectId) public onlyOperator {\\r\\n    projectOwner[projectId] = owner;\\r\\n    projectMember[projectId][owner] = 2;\\r\\n\\r\\n    // New project fee only paid once per chain\\r\\n    if (newProjectFeeAddress != address(0) && newProjectFeeAmount > 0) {\\r\\n      IERC20(newProjectFeeAddress).safeTransferFrom(msgSender(), address(this), newProjectFeeAmount);\\r\\n    }\\r\\n\\r\\n    emit NewProject(owner, projectId);\\r\\n  }\\r\\n\\r\\n  function newProject(address owner, bytes32 projectId) public onlyOperator {\\r\\n    if (owner == address(0)) revert Forbidden();\\r\\n    _newProject(owner, projectId);\\r\\n  }\\r\\n\\r\\n  event SetProjectMember(bytes32 indexed projectId, address indexed member, uint256 level);\\r\\n  function setProjectMember(bytes32 projectId, address member, uint256 level) public {\\r\\n    // Invalid level || Not admin || Change owner || Invalid project -> Forbidden || Invalid member -> Forbidden\\r\\n    if(level > 2 || projectMember[projectId][msgSender()] != 2 || member == projectOwner[projectId] || projectOwner[projectId] == address(0) || member == address(0)) revert Forbidden();\\r\\n    projectMember[projectId][member] = level;\\r\\n    emit SetProjectMember(projectId, member, level);\\r\\n  }\\r\\n\\r\\n  event SetProjectOwner(bytes32 indexed projectId, address indexed owner);\\r\\n  function setProjectOwner(bytes32 projectId, address owner) public {\\r\\n    // Not owner || New member not admin || Invalid project || Invalid owner -> Forbidden\\r\\n    if(msgSender() != projectOwner[projectId] || projectMember[projectId][owner] != 2 || projectOwner[projectId] == address(0) || owner == address(0)) revert Forbidden();\\r\\n    projectOwner[projectId] = owner;\\r\\n    emit SetProjectOwner(projectId, owner);\\r\\n  }\\r\\n\\r\\n  // Only linkable if that NFT implement Ownable\\r\\n  event LinkProject(address indexed contractAddress, bytes32 projectId);\\r\\n  function _linkProject(address contractAddress, bytes32 projectId) internal {\\r\\n    address owner = Ownable(contractAddress).owner();\\r\\n\\r\\n    // If no owner || owner of nft is not a member of project -> Forbidden\\r\\n    if(owner == address(0) || projectMember[projectId][owner] == 0) revert Forbidden();\\r\\n\\r\\n    nftProject[contractAddress] = projectId;\\r\\n\\r\\n    emit LinkProject(contractAddress, projectId);\\r\\n  }\\r\\n\\r\\n  function linkProject(address contractAddress, bytes32 projectId) public nonReentrant {\\r\\n    // Check support interface\\r\\n    require(IERC165(contractAddress).supportsInterface(0x80ac58cd) || IERC165(contractAddress).supportsInterface(0xd9b67a26), \\\"Not NFT\\\");\\r\\n\\r\\n    _linkProject(contractAddress, projectId);\\r\\n  }\\r\\n\\r\\n  event DeployNft(address indexed template, address indexed owner, address indexed contractAddress, bytes32 collectionId, bytes32 projectId);\\r\\n  function deployNft(\\r\\n    address template,\\r\\n    address owner,\\r\\n    bytes32 collectionId,\\r\\n    bytes32 projectId,\\r\\n    uint256 exclusiveLevel,\\r\\n    uint256 maxSupply,\\r\\n    string memory name,\\r\\n    string memory symbol\\r\\n  ) public onlyOperator nonReentrant returns(IAxelarSeaNftInitializable nft) {\\r\\n    if (!templates[template]) {\\r\\n      revert InvalidTemplate(template);\\r\\n    }\\r\\n\\r\\n    if (collectionMapping[collectionId] != address(0)) {\\r\\n      revert DuplicatedCollection(collectionId);\\r\\n    }\\r\\n\\r\\n    // Collection deployment fee\\r\\n    if (newCollectionFeeAddress != address(0) && newCollectionFeeAmount > 0) {\\r\\n      IERC20(newCollectionFeeAddress).safeTransferFrom(msgSender(), address(this), newCollectionFeeAmount);\\r\\n    }\\r\\n\\r\\n    nft = IAxelarSeaNftInitializable(Clones.clone(template));\\r\\n    nft.initialize(owner, collectionId, exclusiveLevel, maxSupply, name, symbol);\\r\\n\\r\\n    if (projectOwner[projectId] == address(0)) {\\r\\n      _newProject(owner, projectId);\\r\\n    }\\r\\n    \\r\\n    _linkProject(address(nft), projectId);\\r\\n\\r\\n    collectionMapping[collectionId] = address(nft);\\r\\n\\r\\n    emit DeployNft(template, owner, address(nft), collectionId, projectId);\\r\\n  }\\r\\n\\r\\n  function deployNftWithMinter(\\r\\n    address template,\\r\\n    address minterTemplate,\\r\\n    address owner,\\r\\n    bytes32 collectionId,\\r\\n    bytes32 projectId,\\r\\n    uint256 exclusiveLevel,\\r\\n    uint256 maxSupply,\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    bytes memory data\\r\\n  ) public onlyOperator nonReentrant returns(IAxelarSeaNftInitializable nft, IAxelarSeaMinterInitializable minter) {\\r\\n    if (!templates[template]) {\\r\\n      revert InvalidTemplate(template);\\r\\n    }\\r\\n\\r\\n    if (!minterTemplates[minterTemplate]) {\\r\\n      revert InvalidTemplate(minterTemplate);\\r\\n    }\\r\\n  \\r\\n    if (collectionMapping[collectionId] != address(0)) {\\r\\n      revert DuplicatedCollection(collectionId);\\r\\n    }\\r\\n\\r\\n    // Collection deployment fee\\r\\n    if (newCollectionFeeAddress != address(0) && newCollectionFeeAmount > 0) {\\r\\n      IERC20(newCollectionFeeAddress).safeTransferFrom(msgSender(), address(this), newCollectionFeeAmount);\\r\\n    }\\r\\n\\r\\n    nft = IAxelarSeaNftInitializable(Clones.clone(template));\\r\\n    nft.initialize(owner, collectionId, exclusiveLevel, maxSupply, name, symbol);\\r\\n\\r\\n    if (projectOwner[projectId] == address(0)) {\\r\\n      _newProject(owner, projectId);\\r\\n    }\\r\\n    \\r\\n    _linkProject(address(nft), projectId);\\r\\n\\r\\n    minter = nft.deployMinter(minterTemplate, data);\\r\\n\\r\\n    collectionMapping[collectionId] = address(nft);\\r\\n\\r\\n    emit DeployNft(template, owner, address(nft), collectionId, projectId);\\r\\n  }\\r\\n\\r\\n  function setBaseContractURI(string memory _uri) public onlyOwner {\\r\\n    baseContractURI = _uri;\\r\\n  }\\r\\n\\r\\n  function setBaseTokenURI(string memory _uri) public onlyOwner {\\r\\n    baseTokenURI = _uri;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x199dc6f15b8627e8c7f2ddd5ad5a8018094e4dc85775f7ac84c9c874eb9a102f\",\"license\":\"None\"},\"contracts/mint/lib/AxelarSeaMintingErrors.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nerror InvalidTemplate(address template);\\r\\nerror Forbidden();\\r\\nerror NotMintingTime();\\r\\nerror MintPerWalletLimited(uint256 maxAmount);\\r\\nerror SupplyLimited();\\r\\nerror NotWhitelisted();\\r\\nerror TransferFailed();\\r\\nerror DuplicatedCollection(bytes32 collectionId);\",\"keccak256\":\"0x9194f7a9fbc64488d4a0e9c749a15a2f2b167ca10649710c27cdda006c046250\",\"license\":\"None\"},\"contracts/mint/lib/AxelarSeaNftBase.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n// import \\\"../meta-transactions/MetaTransactionVerifier.sol\\\";\\r\\nimport \\\"./IAxelarSeaNftInitializable.sol\\\";\\r\\nimport \\\"../AxelarSeaProjectRegistry.sol\\\";\\r\\n\\r\\nimport \\\"./AxelarSeaMintingErrors.sol\\\";\\r\\n\\r\\n// Use Upgradeable for minimal clone pattern but actually is is not upgradeable\\r\\nabstract contract AxelarSeaNftBase is OwnableUpgradeable, IAxelarSeaNftInitializable, ReentrancyGuardUpgradeable, IERC2981, ERC165 {\\r\\n  using Strings for uint256;\\r\\n  using SafeTransferLib for IERC20;\\r\\n  using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n  bool public newMinterStopped; // default to false\\r\\n\\r\\n  AxelarSeaProjectRegistry public registry;\\r\\n  address public fundAddress;\\r\\n\\r\\n  bytes32 public collectionId;\\r\\n  string private nftName;\\r\\n  string private nftSymbol;\\r\\n  uint256 public exclusiveLevel;\\r\\n  uint256 public maxSupply;\\r\\n\\r\\n  mapping(address => bool) public exclusiveContract;\\r\\n  EnumerableSet.AddressSet private minters;\\r\\n  mapping(address => uint256) public walletMinted;\\r\\n\\r\\n  uint256 public mintFeeOverride; // default to 0\\r\\n  bool public enableMintFeeOverride; // default to false\\r\\n\\r\\n  string public baseTokenUriPrefix;\\r\\n  string public baseTokenUriSuffix;\\r\\n\\r\\n  address public royaltyReceiver;\\r\\n  uint256 public royaltyPercentage;\\r\\n\\r\\n  modifier onlyMinter(address addr) {\\r\\n    require(minters.contains(addr), \\\"Forbidden\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    address owner,\\r\\n    bytes32 _collectionId,\\r\\n    uint256 _exclusiveLevel,\\r\\n    uint256 _maxSupply,\\r\\n    string memory _nftName,\\r\\n    string memory _nftSymbol\\r\\n  ) public initializer {\\r\\n    registry = AxelarSeaProjectRegistry(msg.sender);\\r\\n    collectionId = _collectionId;\\r\\n    exclusiveLevel = _exclusiveLevel;\\r\\n    maxSupply = _maxSupply;\\r\\n    nftName = _nftName;\\r\\n    nftSymbol = _nftSymbol;\\r\\n\\r\\n    fundAddress = owner;\\r\\n\\r\\n    _transferOwnership(owner);\\r\\n    __ReentrancyGuard_init();\\r\\n  }\\r\\n\\r\\n  event StopNewMinter();\\r\\n  function stopNewMinter() public onlyOwner {\\r\\n    newMinterStopped = true;\\r\\n    emit StopNewMinter();\\r\\n  }\\r\\n\\r\\n  event SetMaxSupply(uint256 supply);\\r\\n  function setMaxSupply(uint256 newSupply) public onlyOwner {\\r\\n    if (newMinterStopped) {\\r\\n      revert Forbidden();\\r\\n    }\\r\\n\\r\\n    maxSupply = newSupply;\\r\\n    emit SetMaxSupply(newSupply);\\r\\n  }\\r\\n\\r\\n  event SetMinter(address indexed minter, bool enabled);\\r\\n  function setMinter(address minter, bool enabled) public onlyOwner {\\r\\n    if (newMinterStopped) {\\r\\n      revert Forbidden();\\r\\n    }\\r\\n\\r\\n    if (enabled) {\\r\\n      minters.add(minter);\\r\\n    } else {\\r\\n      minters.remove(minter);\\r\\n    }\\r\\n    \\r\\n    emit SetMinter(minter, enabled);\\r\\n  }\\r\\n\\r\\n  function isMinter(address minter) public view returns(bool) {\\r\\n    return minters.contains(minter);\\r\\n  }\\r\\n\\r\\n  function mintersLength() public view returns(uint256) {\\r\\n    return minters.length();\\r\\n  }\\r\\n\\r\\n  function getMinters(uint256 start, uint256 end) public view returns(address[] memory) {\\r\\n    uint256 length = end - start;\\r\\n    address[] memory result = new address[](length);\\r\\n\\r\\n    unchecked {\\r\\n      for (uint256 i = 0; i < length; i++) {\\r\\n        result[i] = minters.at(start + i);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  function getAllMinters() public view returns(address[] memory) {\\r\\n    return getMinters(0, mintersLength());\\r\\n  }\\r\\n\\r\\n  function deployMinter(address template, bytes memory data) public nonReentrant returns(IAxelarSeaMinterInitializable minter) {\\r\\n    if (msg.sender != owner() && msg.sender != address(registry)) {\\r\\n      revert Forbidden();\\r\\n    }\\r\\n\\r\\n    if (!registry.minterTemplates(template)) {\\r\\n      revert InvalidTemplate(template);\\r\\n    }\\r\\n\\r\\n    minter = IAxelarSeaMinterInitializable(Clones.clone(template));\\r\\n    minter.initialize(address(this), owner(), data);\\r\\n\\r\\n    minters.add(address(minter));\\r\\n    emit SetMinter(address(minter), true);\\r\\n  }\\r\\n\\r\\n  event SetExclusiveContract(address indexed addr, bool enabled);\\r\\n  function setExclusiveContract(address addr, bool enabled) public {\\r\\n    if (msg.sender != owner() && !registry.operators(msg.sender)) {\\r\\n      revert Forbidden();\\r\\n    }\\r\\n\\r\\n    exclusiveContract[addr] = enabled;\\r\\n    emit SetExclusiveContract(addr, enabled);\\r\\n  }\\r\\n\\r\\n  event OverrideMintFee(address indexed overrider, uint256 newFee, bool overrided);\\r\\n  function overrideMintFee(uint256 newFee, bool overrided) public {\\r\\n    if (!registry.operators(msg.sender)) {\\r\\n      revert Forbidden();\\r\\n    }\\r\\n\\r\\n    enableMintFeeOverride = overrided;\\r\\n    mintFeeOverride = newFee;\\r\\n    emit OverrideMintFee(msg.sender, newFee, overrided);\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransferCheck(address from) internal view {\\r\\n    if (from != address(0)) {\\r\\n      // Produce human readable message to be easier for debug\\r\\n      require(exclusiveLevel < 2, \\\"Soulbound\\\");\\r\\n      require(exclusiveLevel < 1 || registry.axelarSeaContract(msg.sender) || exclusiveContract[msg.sender], \\\"Exclusive to AxelarSea\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _mintInternal(address to, uint256 amount) internal virtual;\\r\\n\\r\\n  function mintFee() public view returns(uint256) {\\r\\n    return (enableMintFeeOverride ? mintFeeOverride : registry.baseMintFee());\\r\\n  }\\r\\n\\r\\n  function mint(address to, uint256 amount) public onlyMinter(msg.sender) nonReentrant {\\r\\n    _mintInternal(to, amount);\\r\\n  }\\r\\n\\r\\n  function setBaseTokenUriPrefix(string memory newPrefix) public onlyOwner {\\r\\n    baseTokenUriPrefix = newPrefix;\\r\\n  }\\r\\n\\r\\n  function setBaseTokenUriSuffix(string memory newSuffix) public onlyOwner {\\r\\n    baseTokenUriSuffix = newSuffix;\\r\\n  }\\r\\n\\r\\n  function recoverETH() external onlyOwner {\\r\\n    (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n\\r\\n    if (!success) {\\r\\n      revert TransferFailed();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function recoverERC20(IERC20 token) external onlyOwner {\\r\\n    token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\r\\n  }\\r\\n\\r\\n  function exists(uint256 tokenId) public virtual view returns(bool);\\r\\n\\r\\n  function projectId() public view returns(bytes32) {\\r\\n    return registry.nftProject(address(this));\\r\\n  }\\r\\n\\r\\n  // Opensea standard contractURI\\r\\n  function contractURI() external view returns (string memory) {\\r\\n    return string(abi.encodePacked(registry.baseContractURI(), uint256(collectionId).toHexString()));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-tokenURI}.\\r\\n    */\\r\\n  function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\r\\n    require(exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n    if (bytes(baseTokenUriPrefix).length == 0) {\\r\\n      return string(abi.encodePacked(registry.baseTokenURI(), uint256(collectionId).toHexString(), \\\"/\\\", tokenId.toString()));\\r\\n    } else {\\r\\n      return string(abi.encodePacked(baseTokenUriPrefix, tokenId.toString(), baseTokenUriSuffix));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-name}.\\r\\n    */\\r\\n  function name() public view virtual returns (string memory) {\\r\\n    return nftName;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC721Metadata-symbol}.\\r\\n    */\\r\\n  function symbol() public view virtual returns (string memory) {\\r\\n    return nftSymbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev See {IERC165-supportsInterface}.\\r\\n    */\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n    return super.supportsInterface(interfaceId) || interfaceId == type(IERC2981).interfaceId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\r\\n    * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\r\\n    */\\r\\n  function royaltyInfo(uint256, uint256 salePrice) external view virtual override returns (address receiver, uint256 royaltyAmount) {\\r\\n    receiver = royaltyReceiver;\\r\\n    royaltyAmount = salePrice * royaltyPercentage / 1e18;\\r\\n  }\\r\\n\\r\\n  event SetRoyalty(address indexed receiver, uint256 indexed percentage);\\r\\n  function setRoyalty(address receiver, uint256 percentage) public onlyOwner {\\r\\n    if (percentage > 1e18) revert Forbidden();\\r\\n\\r\\n    royaltyReceiver = receiver;\\r\\n    royaltyPercentage = percentage;\\r\\n\\r\\n    emit SetRoyalty(royaltyReceiver, royaltyPercentage);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x134383c63cb3e4e8562d90d3c72ca764dd4ccc3e9bb1035137859fe652cced95\",\"license\":\"None\"},\"contracts/mint/lib/IAxelarSeaNftInitializable.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAxelarSeaNftInitializable {\\r\\n  function initialize(\\r\\n    address owner,\\r\\n    bytes32 collectionId,\\r\\n    uint256 exclusiveLevel,\\r\\n    uint256 maxSupply,\\r\\n    string memory name, \\r\\n    string memory symbol\\r\\n  ) external;\\r\\n\\r\\n  function deployMinter(\\r\\n    address template,\\r\\n    bytes memory data\\r\\n  ) external returns(IAxelarSeaMinterInitializable minter);\\r\\n\\r\\n  function mint(address to, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface IAxelarSeaMinterInitializable {\\r\\n  function initialize(\\r\\n    address targetNft,\\r\\n    address owner,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3fb2dcef5369d4c2db4434af967c752be2bd26ee4e9f0f7a3a8922f2b304453e\",\"license\":\"None\"},\"contracts/seaport/interfaces/EIP1271Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface EIP1271Interface {\\r\\n    function isValidSignature(bytes32 digest, bytes calldata signature)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xb71aea6c8df453f992f54a62e69bd99ddc74938a43d71a622f52ace6c81372fd\",\"license\":\"MIT\"},\"contracts/seaport/interfaces/SignatureVerificationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/**\\r\\n * @title SignatureVerificationErrors\\r\\n * @author 0age\\r\\n * @notice SignatureVerificationErrors contains all errors related to signature\\r\\n *         verification.\\r\\n */\\r\\ninterface SignatureVerificationErrors {\\r\\n    /**\\r\\n     * @dev Revert with an error when a signature that does not contain a v\\r\\n     *      value of 27 or 28 has been supplied.\\r\\n     *\\r\\n     * @param v The invalid v value.\\r\\n     */\\r\\n    error BadSignatureV(uint8 v);\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with an error when the signer recovered by the supplied\\r\\n     *      signature does not match the offerer or an allowed EIP-1271 signer\\r\\n     *      as specified by the offerer in the event they are a contract.\\r\\n     */\\r\\n    error InvalidSigner();\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with an error when a signer cannot be recovered from the\\r\\n     *      supplied signature.\\r\\n     */\\r\\n    error InvalidSignature();\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with an error when an EIP-1271 call to an account fails.\\r\\n     */\\r\\n    error BadContractSignature();\\r\\n}\\r\\n\",\"keccak256\":\"0xdbf5f5e170028ae579ecd0846aedb7b304fa54db5eb37236bd180a7bcc2dd70a\",\"license\":\"MIT\"},\"contracts/seaport/lib/ConsiderationConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/*\\r\\n * -------------------------- Disambiguation & Other Notes ---------------------\\r\\n *    - The term \\\"head\\\" is used as it is in the documentation for ABI encoding,\\r\\n *      but only in reference to dynamic types, i.e. it always refers to the\\r\\n *      offset or pointer to the body of a dynamic type. In calldata, the head\\r\\n *      is always an offset (relative to the parent object), while in memory,\\r\\n *      the head is always the pointer to the body. More information found here:\\r\\n *      https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#argument-encoding\\r\\n *        - Note that the length of an array is separate from and precedes the\\r\\n *          head of the array.\\r\\n *\\r\\n *    - The term \\\"body\\\" is used in place of the term \\\"head\\\" used in the ABI\\r\\n *      documentation. It refers to the start of the data for a dynamic type,\\r\\n *      e.g. the first word of a struct or the first word of the first element\\r\\n *      in an array.\\r\\n *\\r\\n *    - The term \\\"pointer\\\" is used to describe the absolute position of a value\\r\\n *      and never an offset relative to another value.\\r\\n *        - The suffix \\\"_ptr\\\" refers to a memory pointer.\\r\\n *        - The suffix \\\"_cdPtr\\\" refers to a calldata pointer.\\r\\n *\\r\\n *    - The term \\\"offset\\\" is used to describe the position of a value relative\\r\\n *      to some parent value. For example, OrderParameters_conduit_offset is the\\r\\n *      offset to the \\\"conduit\\\" value in the OrderParameters struct relative to\\r\\n *      the start of the body.\\r\\n *        - Note: Offsets are used to derive pointers.\\r\\n *\\r\\n *    - Some structs have pointers defined for all of their fields in this file.\\r\\n *      Lines which are commented out are fields that are not used in the\\r\\n *      codebase but have been left in for readability.\\r\\n */\\r\\n\\r\\n// Declare constants for name, version, and reentrancy sentinel values.\\r\\n\\r\\n// Name is right padded, so it touches the length which is left padded. This\\r\\n// enables writing both values at once. Length goes at byte 95 in memory, and\\r\\n// name fills bytes 96-109, so both values can be written left-padded to 77.\\r\\nuint256 constant NameLengthPtr = 77;\\r\\nuint256 constant NameWithLength = 0x0d436F6E73696465726174696F6E;\\r\\n\\r\\nuint256 constant Version = 0x312e31;\\r\\nuint256 constant Version_length = 3;\\r\\nuint256 constant Version_shift = 0xe8;\\r\\n\\r\\nuint256 constant _NOT_ENTERED = 1;\\r\\nuint256 constant _ENTERED = 2;\\r\\n\\r\\n// Common Offsets\\r\\n// Offsets for identically positioned fields shared by:\\r\\n// OfferItem, ConsiderationItem, SpentItem, ReceivedItem\\r\\n\\r\\nuint256 constant Common_token_offset = 0x20;\\r\\nuint256 constant Common_identifier_offset = 0x40;\\r\\nuint256 constant Common_amount_offset = 0x60;\\r\\n\\r\\nuint256 constant ReceivedItem_size = 0xa0;\\r\\nuint256 constant ReceivedItem_amount_offset = 0x60;\\r\\nuint256 constant ReceivedItem_recipient_offset = 0x80;\\r\\n\\r\\nuint256 constant ReceivedItem_CommonParams_size = 0x60;\\r\\n\\r\\nuint256 constant ConsiderationItem_recipient_offset = 0xa0;\\r\\n// Store the same constant in an abbreviated format for a line length fix.\\r\\nuint256 constant ConsiderItem_recipient_offset = 0xa0;\\r\\n\\r\\nuint256 constant Execution_offerer_offset = 0x20;\\r\\nuint256 constant Execution_conduit_offset = 0x40;\\r\\n\\r\\nuint256 constant InvalidFulfillmentComponentData_error_signature = (\\r\\n    0x7fda727900000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidFulfillmentComponentData_error_len = 0x04;\\r\\n\\r\\nuint256 constant Panic_error_signature = (\\r\\n    0x4e487b7100000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant Panic_error_offset = 0x04;\\r\\nuint256 constant Panic_error_length = 0x24;\\r\\nuint256 constant Panic_arithmetic = 0x11;\\r\\n\\r\\nuint256 constant MissingItemAmount_error_signature = (\\r\\n    0x91b3e51400000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant MissingItemAmount_error_len = 0x04;\\r\\n\\r\\nuint256 constant OrderParameters_offer_head_offset = 0x40;\\r\\nuint256 constant OrderParameters_consideration_head_offset = 0x60;\\r\\nuint256 constant OrderParameters_conduit_offset = 0x120;\\r\\nuint256 constant OrderParameters_counter_offset = 0x140;\\r\\n\\r\\nuint256 constant Fulfillment_itemIndex_offset = 0x20;\\r\\n\\r\\nuint256 constant AdvancedOrder_numerator_offset = 0x20;\\r\\n\\r\\nuint256 constant AlmostOneWord = 0x1f;\\r\\nuint256 constant OneWord = 0x20;\\r\\nuint256 constant TwoWords = 0x40;\\r\\nuint256 constant ThreeWords = 0x60;\\r\\nuint256 constant FourWords = 0x80;\\r\\nuint256 constant FiveWords = 0xa0;\\r\\n\\r\\nuint256 constant FreeMemoryPointerSlot = 0x40;\\r\\nuint256 constant ZeroSlot = 0x60;\\r\\nuint256 constant DefaultFreeMemoryPointer = 0x80;\\r\\n\\r\\nuint256 constant Slot0x80 = 0x80;\\r\\nuint256 constant Slot0xA0 = 0xa0;\\r\\n\\r\\nuint256 constant BasicOrder_endAmount_cdPtr = 0x104;\\r\\nuint256 constant BasicOrder_common_params_size = 0xa0;\\r\\nuint256 constant BasicOrder_considerationHashesArray_ptr = 0x160;\\r\\n\\r\\nuint256 constant EIP712_Order_size = 0x180;\\r\\nuint256 constant EIP712_OfferItem_size = 0xc0;\\r\\nuint256 constant EIP712_ConsiderationItem_size = 0xe0;\\r\\nuint256 constant AdditionalRecipients_size = 0x40;\\r\\n\\r\\nuint256 constant EIP712_DomainSeparator_offset = 0x02;\\r\\nuint256 constant EIP712_OrderHash_offset = 0x22;\\r\\nuint256 constant EIP712_DigestPayload_size = 0x42;\\r\\n\\r\\nuint256 constant receivedItemsHash_ptr = 0x60;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  data for OrderFulfilled\\r\\n *\\r\\n *   event OrderFulfilled(\\r\\n *     bytes32 orderHash,\\r\\n *     address indexed offerer,\\r\\n *     address indexed zone,\\r\\n *     address fulfiller,\\r\\n *     SpentItem[] offer,\\r\\n *       > (itemType, token, id, amount)\\r\\n *     ReceivedItem[] consideration\\r\\n *       > (itemType, token, id, amount, recipient)\\r\\n *   )\\r\\n *\\r\\n *  - 0x00: orderHash\\r\\n *  - 0x20: fulfiller\\r\\n *  - 0x40: offer offset (0x80)\\r\\n *  - 0x60: consideration offset (0x120)\\r\\n *  - 0x80: offer.length (1)\\r\\n *  - 0xa0: offerItemType\\r\\n *  - 0xc0: offerToken\\r\\n *  - 0xe0: offerIdentifier\\r\\n *  - 0x100: offerAmount\\r\\n *  - 0x120: consideration.length (1 + additionalRecipients.length)\\r\\n *  - 0x140: considerationItemType\\r\\n *  - 0x160: considerationToken\\r\\n *  - 0x180: considerationIdentifier\\r\\n *  - 0x1a0: considerationAmount\\r\\n *  - 0x1c0: considerationRecipient\\r\\n *  - ...\\r\\n */\\r\\n\\r\\n// Minimum length of the OrderFulfilled event data.\\r\\n// Must be added to the size of the ReceivedItem array for additionalRecipients\\r\\n// (0xa0 * additionalRecipients.length) to calculate full size of the buffer.\\r\\nuint256 constant OrderFulfilled_baseSize = 0x1e0;\\r\\nuint256 constant OrderFulfilled_selector = (\\r\\n    0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31\\r\\n);\\r\\n\\r\\n// Minimum offset in memory to OrderFulfilled event data.\\r\\n// Must be added to the size of the EIP712 hash array for additionalRecipients\\r\\n// (32 * additionalRecipients.length) to calculate the pointer to event data.\\r\\nuint256 constant OrderFulfilled_baseOffset = 0x180;\\r\\nuint256 constant OrderFulfilled_consideration_length_baseOffset = 0x2a0;\\r\\nuint256 constant OrderFulfilled_offer_length_baseOffset = 0x200;\\r\\n\\r\\n// uint256 constant OrderFulfilled_orderHash_offset = 0x00;\\r\\nuint256 constant OrderFulfilled_fulfiller_offset = 0x20;\\r\\nuint256 constant OrderFulfilled_offer_head_offset = 0x40;\\r\\nuint256 constant OrderFulfilled_offer_body_offset = 0x80;\\r\\nuint256 constant OrderFulfilled_consideration_head_offset = 0x60;\\r\\nuint256 constant OrderFulfilled_consideration_body_offset = 0x120;\\r\\n\\r\\n// BasicOrderParameters\\r\\nuint256 constant BasicOrder_parameters_cdPtr = 0x04;\\r\\nuint256 constant BasicOrder_considerationToken_cdPtr = 0x24;\\r\\n// uint256 constant BasicOrder_considerationIdentifier_cdPtr = 0x44;\\r\\nuint256 constant BasicOrder_considerationAmount_cdPtr = 0x64;\\r\\nuint256 constant BasicOrder_offerer_cdPtr = 0x84;\\r\\nuint256 constant BasicOrder_zone_cdPtr = 0xa4;\\r\\nuint256 constant BasicOrder_offerToken_cdPtr = 0xc4;\\r\\n// uint256 constant BasicOrder_offerIdentifier_cdPtr = 0xe4;\\r\\nuint256 constant BasicOrder_offerAmount_cdPtr = 0x104;\\r\\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\\r\\nuint256 constant BasicOrder_startTime_cdPtr = 0x144;\\r\\n// uint256 constant BasicOrder_endTime_cdPtr = 0x164;\\r\\n// uint256 constant BasicOrder_zoneHash_cdPtr = 0x184;\\r\\n// uint256 constant BasicOrder_salt_cdPtr = 0x1a4;\\r\\nuint256 constant BasicOrder_offererConduit_cdPtr = 0x1c4;\\r\\nuint256 constant BasicOrder_fulfillerConduit_cdPtr = 0x1e4;\\r\\nuint256 constant BasicOrder_totalOriginalAdditionalRecipients_cdPtr = 0x204;\\r\\nuint256 constant BasicOrder_additionalRecipients_head_cdPtr = 0x224;\\r\\nuint256 constant BasicOrder_signature_cdPtr = 0x244;\\r\\nuint256 constant BasicOrder_additionalRecipients_length_cdPtr = 0x264;\\r\\nuint256 constant BasicOrder_additionalRecipients_data_cdPtr = 0x284;\\r\\n\\r\\nuint256 constant BasicOrder_parameters_ptr = 0x20;\\r\\n\\r\\nuint256 constant BasicOrder_basicOrderType_range = 0x18; // 24 values\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for ConsiderationItem\\r\\n *   - 0x80: ConsiderationItem EIP-712 typehash (constant)\\r\\n *   - 0xa0: itemType\\r\\n *   - 0xc0: token\\r\\n *   - 0xe0: identifier\\r\\n *   - 0x100: startAmount\\r\\n *   - 0x120: endAmount\\r\\n *   - 0x140: recipient\\r\\n */\\r\\nuint256 constant BasicOrder_considerationItem_typeHash_ptr = 0x80; // memoryPtr\\r\\nuint256 constant BasicOrder_considerationItem_itemType_ptr = 0xa0;\\r\\nuint256 constant BasicOrder_considerationItem_token_ptr = 0xc0;\\r\\nuint256 constant BasicOrder_considerationItem_identifier_ptr = 0xe0;\\r\\nuint256 constant BasicOrder_considerationItem_startAmount_ptr = 0x100;\\r\\nuint256 constant BasicOrder_considerationItem_endAmount_ptr = 0x120;\\r\\n// uint256 constant BasicOrder_considerationItem_recipient_ptr = 0x140;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for OfferItem\\r\\n *   - 0x80:  OfferItem EIP-712 typehash (constant)\\r\\n *   - 0xa0:  itemType\\r\\n *   - 0xc0:  token\\r\\n *   - 0xe0:  identifier (reused for offeredItemsHash)\\r\\n *   - 0x100: startAmount\\r\\n *   - 0x120: endAmount\\r\\n */\\r\\nuint256 constant BasicOrder_offerItem_typeHash_ptr = DefaultFreeMemoryPointer;\\r\\nuint256 constant BasicOrder_offerItem_itemType_ptr = 0xa0;\\r\\nuint256 constant BasicOrder_offerItem_token_ptr = 0xc0;\\r\\n// uint256 constant BasicOrder_offerItem_identifier_ptr = 0xe0;\\r\\n// uint256 constant BasicOrder_offerItem_startAmount_ptr = 0x100;\\r\\nuint256 constant BasicOrder_offerItem_endAmount_ptr = 0x120;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for Order\\r\\n *   - 0x80:   Order EIP-712 typehash (constant)\\r\\n *   - 0xa0:   orderParameters.offerer\\r\\n *   - 0xc0:   orderParameters.zone\\r\\n *   - 0xe0:   keccak256(abi.encodePacked(offerHashes))\\r\\n *   - 0x100:  keccak256(abi.encodePacked(considerationHashes))\\r\\n *   - 0x120:  orderType\\r\\n *   - 0x140:  startTime\\r\\n *   - 0x160:  endTime\\r\\n *   - 0x180:  zoneHash\\r\\n *   - 0x1a0:  salt\\r\\n *   - 0x1c0:  conduit\\r\\n *   - 0x1e0:  _counters[orderParameters.offerer] (from storage)\\r\\n */\\r\\nuint256 constant BasicOrder_order_typeHash_ptr = 0x80;\\r\\nuint256 constant BasicOrder_order_offerer_ptr = 0xa0;\\r\\n// uint256 constant BasicOrder_order_zone_ptr = 0xc0;\\r\\nuint256 constant BasicOrder_order_offerHashes_ptr = 0xe0;\\r\\nuint256 constant BasicOrder_order_considerationHashes_ptr = 0x100;\\r\\nuint256 constant BasicOrder_order_orderType_ptr = 0x120;\\r\\nuint256 constant BasicOrder_order_startTime_ptr = 0x140;\\r\\n// uint256 constant BasicOrder_order_endTime_ptr = 0x160;\\r\\n// uint256 constant BasicOrder_order_zoneHash_ptr = 0x180;\\r\\n// uint256 constant BasicOrder_order_salt_ptr = 0x1a0;\\r\\n// uint256 constant BasicOrder_order_conduitKey_ptr = 0x1c0;\\r\\nuint256 constant BasicOrder_order_counter_ptr = 0x1e0;\\r\\nuint256 constant BasicOrder_additionalRecipients_head_ptr = 0x240;\\r\\nuint256 constant BasicOrder_signature_ptr = 0x260;\\r\\n\\r\\n// Signature-related\\r\\nbytes32 constant EIP2098_allButHighestBitMask = (\\r\\n    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\r\\n);\\r\\nbytes32 constant ECDSA_twentySeventhAndTwentyEighthBytesSet = (\\r\\n    0x0000000000000000000000000000000000000000000000000000000101000000\\r\\n);\\r\\nuint256 constant ECDSA_MaxLength = 65;\\r\\nuint256 constant ECDSA_signature_s_offset = 0x40;\\r\\nuint256 constant ECDSA_signature_v_offset = 0x60;\\r\\n\\r\\nbytes32 constant EIP1271_isValidSignature_selector = (\\r\\n    0x1626ba7e00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant EIP1271_isValidSignature_signatureHead_negativeOffset = 0x20;\\r\\nuint256 constant EIP1271_isValidSignature_digest_negativeOffset = 0x40;\\r\\nuint256 constant EIP1271_isValidSignature_selector_negativeOffset = 0x44;\\r\\nuint256 constant EIP1271_isValidSignature_calldata_baseLength = 0x64;\\r\\n\\r\\nuint256 constant EIP1271_isValidSignature_signature_head_offset = 0x40;\\r\\n\\r\\n// abi.encodeWithSignature(\\\"NoContract(address)\\\")\\r\\nuint256 constant NoContract_error_signature = (\\r\\n    0x5f15d67200000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant NoContract_error_sig_ptr = 0x0;\\r\\nuint256 constant NoContract_error_token_ptr = 0x4;\\r\\nuint256 constant NoContract_error_length = 0x24; // 4 + 32 == 36\\r\\n\\r\\nuint256 constant EIP_712_PREFIX = (\\r\\n    0x1901000000000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant ExtraGasBuffer = 0x20;\\r\\nuint256 constant CostPerWord = 3;\\r\\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\\r\\n\\r\\nuint256 constant Create2AddressDerivation_ptr = 0x0b;\\r\\nuint256 constant Create2AddressDerivation_length = 0x55;\\r\\n\\r\\nuint256 constant MaskOverByteTwelve = (\\r\\n    0x0000000000000000000000ff0000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant MaskOverLastTwentyBytes = (\\r\\n    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff\\r\\n);\\r\\n\\r\\nuint256 constant MaskOverFirstFourBytes = (\\r\\n    0xffffffff00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant Conduit_execute_signature = (\\r\\n    0x4ce34aa200000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant MaxUint8 = 0xff;\\r\\nuint256 constant MaxUint120 = 0xffffffffffffffffffffffffffffff;\\r\\n\\r\\nuint256 constant Conduit_execute_ConduitTransfer_ptr = 0x20;\\r\\nuint256 constant Conduit_execute_ConduitTransfer_length = 0x01;\\r\\n\\r\\nuint256 constant Conduit_execute_ConduitTransfer_offset_ptr = 0x04;\\r\\nuint256 constant Conduit_execute_ConduitTransfer_length_ptr = 0x24;\\r\\nuint256 constant Conduit_execute_transferItemType_ptr = 0x44;\\r\\nuint256 constant Conduit_execute_transferToken_ptr = 0x64;\\r\\nuint256 constant Conduit_execute_transferFrom_ptr = 0x84;\\r\\nuint256 constant Conduit_execute_transferTo_ptr = 0xa4;\\r\\nuint256 constant Conduit_execute_transferIdentifier_ptr = 0xc4;\\r\\nuint256 constant Conduit_execute_transferAmount_ptr = 0xe4;\\r\\n\\r\\nuint256 constant OneConduitExecute_size = 0x104;\\r\\n\\r\\n// Sentinel value to indicate that the conduit accumulator is not armed.\\r\\nuint256 constant AccumulatorDisarmed = 0x20;\\r\\nuint256 constant AccumulatorArmed = 0x40;\\r\\nuint256 constant Accumulator_conduitKey_ptr = 0x20;\\r\\nuint256 constant Accumulator_selector_ptr = 0x40;\\r\\nuint256 constant Accumulator_array_offset_ptr = 0x44;\\r\\nuint256 constant Accumulator_array_length_ptr = 0x64;\\r\\n\\r\\nuint256 constant Accumulator_itemSizeOffsetDifference = 0x3c;\\r\\n\\r\\nuint256 constant Accumulator_array_offset = 0x20;\\r\\nuint256 constant Conduit_transferItem_size = 0xc0;\\r\\nuint256 constant Conduit_transferItem_token_ptr = 0x20;\\r\\nuint256 constant Conduit_transferItem_from_ptr = 0x40;\\r\\nuint256 constant Conduit_transferItem_to_ptr = 0x60;\\r\\nuint256 constant Conduit_transferItem_identifier_ptr = 0x80;\\r\\nuint256 constant Conduit_transferItem_amount_ptr = 0xa0;\\r\\n\\r\\n// Declare constant for errors related to amount derivation.\\r\\n// error InexactFraction() @ AmountDerivationErrors.sol\\r\\nuint256 constant InexactFraction_error_signature = (\\r\\n    0xc63cf08900000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InexactFraction_error_len = 0x04;\\r\\n\\r\\n// Declare constant for errors related to signature verification.\\r\\nuint256 constant Ecrecover_precompile = 1;\\r\\nuint256 constant Ecrecover_args_size = 0x80;\\r\\nuint256 constant Signature_lower_v = 27;\\r\\n\\r\\n// error BadSignatureV(uint8) @ SignatureVerificationErrors.sol\\r\\nuint256 constant BadSignatureV_error_signature = (\\r\\n    0x1f003d0a00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant BadSignatureV_error_offset = 0x04;\\r\\nuint256 constant BadSignatureV_error_length = 0x24;\\r\\n\\r\\n// error InvalidSigner() @ SignatureVerificationErrors.sol\\r\\nuint256 constant InvalidSigner_error_signature = (\\r\\n    0x815e1d6400000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidSigner_error_length = 0x04;\\r\\n\\r\\n// error InvalidSignature() @ SignatureVerificationErrors.sol\\r\\nuint256 constant InvalidSignature_error_signature = (\\r\\n    0x8baa579f00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidSignature_error_length = 0x04;\\r\\n\\r\\n// error BadContractSignature() @ SignatureVerificationErrors.sol\\r\\nuint256 constant BadContractSignature_error_signature = (\\r\\n    0x4f7fb80d00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant BadContractSignature_error_length = 0x04;\\r\\n\\r\\nuint256 constant NumBitsAfterSelector = 0xe0;\\r\\n\\r\\n// 69 is the lowest modulus for which the remainder\\r\\n// of every selector other than the two match functions\\r\\n// is greater than those of the match functions.\\r\\nuint256 constant NonMatchSelector_MagicModulus = 69;\\r\\n// Of the two match function selectors, the highest\\r\\n// remainder modulo 69 is 29.\\r\\nuint256 constant NonMatchSelector_MagicRemainder = 0x1d;\\r\\n\",\"keccak256\":\"0x846b840742ea7f1b43a399840c09a3ffda40d8e7c95f90e63b5c8fb47e908856\",\"license\":\"MIT\"},\"contracts/seaport/lib/LowLevelHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./ConsiderationConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LowLevelHelpers\\r\\n * @author 0age\\r\\n * @notice LowLevelHelpers contains logic for performing various low-level\\r\\n *         operations.\\r\\n */\\r\\ncontract LowLevelHelpers {\\r\\n    /**\\r\\n     * @dev Internal view function to staticcall an arbitrary target with given\\r\\n     *      calldata. Note that no data is written to memory and no contract\\r\\n     *      size check is performed.\\r\\n     *\\r\\n     * @param target   The account to staticcall.\\r\\n     * @param callData The calldata to supply when staticcalling the target.\\r\\n     *\\r\\n     * @return success The status of the staticcall to the target.\\r\\n     */\\r\\n    function _staticcall(address target, bytes memory callData)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool success)\\r\\n    {\\r\\n        assembly {\\r\\n            // Perform the staticcall.\\r\\n            success := staticcall(\\r\\n                gas(),\\r\\n                target,\\r\\n                add(callData, OneWord),\\r\\n                mload(callData),\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal view function to revert and pass along the revert reason if\\r\\n     *      data was returned by the last call and that the size of that data\\r\\n     *      does not exceed the currently allocated memory size.\\r\\n     */\\r\\n    function _revertWithReasonIfOneIsReturned() internal view {\\r\\n        assembly {\\r\\n            // If it returned a message, bubble it up as long as sufficient gas\\r\\n            // remains to do so:\\r\\n            if returndatasize() {\\r\\n                // Ensure that sufficient gas is available to copy returndata\\r\\n                // while expanding memory where necessary. Start by computing\\r\\n                // the word size of returndata and allocated memory.\\r\\n                let returnDataWords := div(\\r\\n                    add(returndatasize(), AlmostOneWord),\\r\\n                    OneWord\\r\\n                )\\r\\n\\r\\n                // Note: use the free memory pointer in place of msize() to work\\r\\n                // around a Yul warning that prevents accessing msize directly\\r\\n                // when the IR pipeline is activated.\\r\\n                let msizeWords := div(mload(FreeMemoryPointerSlot), OneWord)\\r\\n\\r\\n                // Next, compute the cost of the returndatacopy.\\r\\n                let cost := mul(CostPerWord, returnDataWords)\\r\\n\\r\\n                // Then, compute cost of new memory allocation.\\r\\n                if gt(returnDataWords, msizeWords) {\\r\\n                    cost := add(\\r\\n                        cost,\\r\\n                        add(\\r\\n                            mul(sub(returnDataWords, msizeWords), CostPerWord),\\r\\n                            div(\\r\\n                                sub(\\r\\n                                    mul(returnDataWords, returnDataWords),\\r\\n                                    mul(msizeWords, msizeWords)\\r\\n                                ),\\r\\n                                MemoryExpansionCoefficient\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                }\\r\\n\\r\\n                // Finally, add a small constant and compare to gas remaining;\\r\\n                // bubble up the revert data if enough gas is still available.\\r\\n                if lt(add(cost, ExtraGasBuffer), gas()) {\\r\\n                    // Copy returndata to memory; overwrite existing memory.\\r\\n                    returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n                    // Revert, specifying memory region with copied returndata.\\r\\n                    revert(0, returndatasize())\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal pure function to determine if the first word of returndata\\r\\n     *      matches an expected magic value.\\r\\n     *\\r\\n     * @param expected The expected magic value.\\r\\n     *\\r\\n     * @return A boolean indicating whether the expected value matches the one\\r\\n     *         located in the first word of returndata.\\r\\n     */\\r\\n    function _doesNotMatchMagic(bytes4 expected) internal pure returns (bool) {\\r\\n        // Declare a variable for the value held by the return data buffer.\\r\\n        bytes4 result;\\r\\n\\r\\n        // Utilize assembly in order to read directly from returndata buffer.\\r\\n        assembly {\\r\\n            // Only put result on stack if return data is exactly one word.\\r\\n            if eq(returndatasize(), OneWord) {\\r\\n                // Copy the word directly from return data into scratch space.\\r\\n                returndatacopy(0, 0, OneWord)\\r\\n\\r\\n                // Take value from scratch space and place it on the stack.\\r\\n                result := mload(0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Return a boolean indicating whether expected and located value match.\\r\\n        return result != expected;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd85e5873064cf540f137adaa566da6fc6d7b9b366e6ab94da60c4648e1e28a03\",\"license\":\"MIT\"},\"contracts/seaport/lib/SignatureVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport { EIP1271Interface } from \\\"../interfaces/EIP1271Interface.sol\\\";\\r\\n\\r\\nimport {\\r\\n    SignatureVerificationErrors\\r\\n} from \\\"../interfaces/SignatureVerificationErrors.sol\\\";\\r\\n\\r\\nimport { LowLevelHelpers } from \\\"./LowLevelHelpers.sol\\\";\\r\\n\\r\\nimport \\\"./ConsiderationConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SignatureVerification\\r\\n * @author 0age\\r\\n * @notice SignatureVerification contains logic for verifying signatures.\\r\\n */\\r\\ncontract SignatureVerification is SignatureVerificationErrors, LowLevelHelpers {\\r\\n    /**\\r\\n     * @dev Internal view function to verify the signature of an order. An\\r\\n     *      ERC-1271 fallback will be attempted if either the signature length\\r\\n     *      is not 64 or 65 bytes or if the recovered signer does not match the\\r\\n     *      supplied signer.\\r\\n     *\\r\\n     * @param signer    The signer for the order.\\r\\n     * @param digest    The digest to verify the signature against.\\r\\n     * @param signature A signature from the signer indicating that the order\\r\\n     *                  has been approved.\\r\\n     */\\r\\n    function _assertValidSignature(\\r\\n        address signer,\\r\\n        bytes32 digest,\\r\\n        bytes memory signature\\r\\n    ) internal view {\\r\\n        // Declare value for ecrecover equality or 1271 call success status.\\r\\n        bool success;\\r\\n\\r\\n        // Utilize assembly to perform optimized signature verification check.\\r\\n        assembly {\\r\\n            // Ensure that first word of scratch space is empty.\\r\\n            mstore(0, 0)\\r\\n\\r\\n            // Declare value for v signature parameter.\\r\\n            let v\\r\\n\\r\\n            // Get the length of the signature.\\r\\n            let signatureLength := mload(signature)\\r\\n\\r\\n            // Get the pointer to the value preceding the signature length.\\r\\n            // This will be used for temporary memory overrides - either the\\r\\n            // signature head for isValidSignature or the digest for ecrecover.\\r\\n            let wordBeforeSignaturePtr := sub(signature, OneWord)\\r\\n\\r\\n            // Cache the current value behind the signature to restore it later.\\r\\n            let cachedWordBeforeSignature := mload(wordBeforeSignaturePtr)\\r\\n\\r\\n            // Declare lenDiff + recoveredSigner scope to manage stack pressure.\\r\\n            {\\r\\n                // Take the difference between the max ECDSA signature length\\r\\n                // and the actual signature length. Overflow desired for any\\r\\n                // values > 65. If the diff is not 0 or 1, it is not a valid\\r\\n                // ECDSA signature - move on to EIP1271 check.\\r\\n                let lenDiff := sub(ECDSA_MaxLength, signatureLength)\\r\\n\\r\\n                // Declare variable for recovered signer.\\r\\n                let recoveredSigner\\r\\n\\r\\n                // If diff is 0 or 1, it may be an ECDSA signature.\\r\\n                // Try to recover signer.\\r\\n                if iszero(gt(lenDiff, 1)) {\\r\\n                    // Read the signature `s` value.\\r\\n                    let originalSignatureS := mload(\\r\\n                        add(signature, ECDSA_signature_s_offset)\\r\\n                    )\\r\\n\\r\\n                    // Read the first byte of the word after `s`. If the\\r\\n                    // signature is 65 bytes, this will be the real `v` value.\\r\\n                    // If not, it will need to be modified - doing it this way\\r\\n                    // saves an extra condition.\\r\\n                    v := byte(\\r\\n                        0,\\r\\n                        mload(add(signature, ECDSA_signature_v_offset))\\r\\n                    )\\r\\n\\r\\n                    // If lenDiff is 1, parse 64-byte signature as ECDSA.\\r\\n                    if lenDiff {\\r\\n                        // Extract yParity from highest bit of vs and add 27 to\\r\\n                        // get v.\\r\\n                        v := add(\\r\\n                            shr(MaxUint8, originalSignatureS),\\r\\n                            Signature_lower_v\\r\\n                        )\\r\\n\\r\\n                        // Extract canonical s from vs, all but the highest bit.\\r\\n                        // Temporarily overwrite the original `s` value in the\\r\\n                        // signature.\\r\\n                        mstore(\\r\\n                            add(signature, ECDSA_signature_s_offset),\\r\\n                            and(\\r\\n                                originalSignatureS,\\r\\n                                EIP2098_allButHighestBitMask\\r\\n                            )\\r\\n                        )\\r\\n                    }\\r\\n                    // Temporarily overwrite the signature length with `v` to\\r\\n                    // conform to the expected input for ecrecover.\\r\\n                    mstore(signature, v)\\r\\n\\r\\n                    // Temporarily overwrite the word before the length with\\r\\n                    // `digest` to conform to the expected input for ecrecover.\\r\\n                    mstore(wordBeforeSignaturePtr, digest)\\r\\n\\r\\n                    // Attempt to recover the signer for the given signature. Do\\r\\n                    // not check the call status as ecrecover will return a null\\r\\n                    // address if the signature is invalid.\\r\\n                    pop(\\r\\n                        staticcall(\\r\\n                            gas(),\\r\\n                            Ecrecover_precompile, // Call ecrecover precompile.\\r\\n                            wordBeforeSignaturePtr, // Use data memory location.\\r\\n                            Ecrecover_args_size, // Size of digest, v, r, and s.\\r\\n                            0, // Write result to scratch space.\\r\\n                            OneWord // Provide size of returned result.\\r\\n                        )\\r\\n                    )\\r\\n\\r\\n                    // Restore cached word before signature.\\r\\n                    mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\r\\n\\r\\n                    // Restore cached signature length.\\r\\n                    mstore(signature, signatureLength)\\r\\n\\r\\n                    // Restore cached signature `s` value.\\r\\n                    mstore(\\r\\n                        add(signature, ECDSA_signature_s_offset),\\r\\n                        originalSignatureS\\r\\n                    )\\r\\n\\r\\n                    // Read the recovered signer from the buffer given as return\\r\\n                    // space for ecrecover.\\r\\n                    recoveredSigner := mload(0)\\r\\n                }\\r\\n\\r\\n                // Set success to true if the signature provided was a valid\\r\\n                // ECDSA signature and the signer is not the null address. Use\\r\\n                // gt instead of direct as success is used outside of assembly.\\r\\n                success := and(eq(signer, recoveredSigner), gt(signer, 0))\\r\\n            }\\r\\n\\r\\n            // If the signature was not verified with ecrecover, try EIP1271.\\r\\n            if iszero(success) {\\r\\n                // Temporarily overwrite the word before the signature length\\r\\n                // and use it as the head of the signature input to\\r\\n                // `isValidSignature`, which has a value of 64.\\r\\n                mstore(\\r\\n                    wordBeforeSignaturePtr,\\r\\n                    EIP1271_isValidSignature_signature_head_offset\\r\\n                )\\r\\n\\r\\n                // Get pointer to use for the selector of `isValidSignature`.\\r\\n                let selectorPtr := sub(\\r\\n                    signature,\\r\\n                    EIP1271_isValidSignature_selector_negativeOffset\\r\\n                )\\r\\n\\r\\n                // Cache the value currently stored at the selector pointer.\\r\\n                let cachedWordOverwrittenBySelector := mload(selectorPtr)\\r\\n\\r\\n                // Get pointer to use for `digest` input to `isValidSignature`.\\r\\n                let digestPtr := sub(\\r\\n                    signature,\\r\\n                    EIP1271_isValidSignature_digest_negativeOffset\\r\\n                )\\r\\n\\r\\n                // Cache the value currently stored at the digest pointer.\\r\\n                let cachedWordOverwrittenByDigest := mload(digestPtr)\\r\\n\\r\\n                // Write the selector first, since it overlaps the digest.\\r\\n                mstore(selectorPtr, EIP1271_isValidSignature_selector)\\r\\n\\r\\n                // Next, write the digest.\\r\\n                mstore(digestPtr, digest)\\r\\n\\r\\n                // Call signer with `isValidSignature` to validate signature.\\r\\n                success := staticcall(\\r\\n                    gas(),\\r\\n                    signer,\\r\\n                    selectorPtr,\\r\\n                    add(\\r\\n                        signatureLength,\\r\\n                        EIP1271_isValidSignature_calldata_baseLength\\r\\n                    ),\\r\\n                    0,\\r\\n                    OneWord\\r\\n                )\\r\\n\\r\\n                // Determine if the signature is valid on successful calls.\\r\\n                if success {\\r\\n                    // If first word of scratch space does not contain EIP-1271\\r\\n                    // signature selector, revert.\\r\\n                    if iszero(eq(mload(0), EIP1271_isValidSignature_selector)) {\\r\\n                        // Revert with bad 1271 signature if signer has code.\\r\\n                        if extcodesize(signer) {\\r\\n                            // Bad contract signature.\\r\\n                            mstore(0, BadContractSignature_error_signature)\\r\\n                            revert(0, BadContractSignature_error_length)\\r\\n                        }\\r\\n\\r\\n                        // Check if signature length was invalid.\\r\\n                        if gt(sub(ECDSA_MaxLength, signatureLength), 1) {\\r\\n                            // Revert with generic invalid signature error.\\r\\n                            mstore(0, InvalidSignature_error_signature)\\r\\n                            revert(0, InvalidSignature_error_length)\\r\\n                        }\\r\\n\\r\\n                        // Check if v was invalid.\\r\\n                        if iszero(\\r\\n                            byte(v, ECDSA_twentySeventhAndTwentyEighthBytesSet)\\r\\n                        ) {\\r\\n                            // Revert with invalid v value.\\r\\n                            mstore(0, BadSignatureV_error_signature)\\r\\n                            mstore(BadSignatureV_error_offset, v)\\r\\n                            revert(0, BadSignatureV_error_length)\\r\\n                        }\\r\\n\\r\\n                        // Revert with generic invalid signer error message.\\r\\n                        mstore(0, InvalidSigner_error_signature)\\r\\n                        revert(0, InvalidSigner_error_length)\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                // Restore the cached values overwritten by selector, digest and\\r\\n                // signature head.\\r\\n                mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\r\\n                mstore(selectorPtr, cachedWordOverwrittenBySelector)\\r\\n                mstore(digestPtr, cachedWordOverwrittenByDigest)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If the call failed...\\r\\n        if (!success) {\\r\\n            // Revert and pass reason along if one was returned.\\r\\n            _revertWithReasonIfOneIsReturned();\\r\\n\\r\\n            // Otherwise, revert with error indicating bad contract signature.\\r\\n            assembly {\\r\\n                mstore(0, BadContractSignature_error_signature)\\r\\n                revert(0, BadContractSignature_error_length)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc23b9d4ea88187158c8dcae275fecfca2fc6c61dbf33dcca46a682ba681d66c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040805180820182526001808252605f60f81b6020808401828152855180870190965292855284015281519192916200004e916097916200006d565b508051620000649060989060208401906200006d565b5050506200014f565b8280546200007b9062000113565b90600052602060002090601f0160209004810192826200009f5760008555620000ea565b82601f10620000ba57805160ff1916838001178555620000ea565b82800160010185558215620000ea579182015b82811115620000ea578251825591602001919060010190620000cd565b50620000f8929150620000fc565b5090565b5b80821115620000f85760008155600101620000fd565b600181811c908216806200012857607f821691505b6020821081036200014957634e487b7160e01b600052602260045260246000fd5b50919050565b613712806200015f6000396000f3fe608060405234801561001057600080fd5b506004361061036d5760003560e01c80638a81b211116101d3578063b88d4fde11610104578063d8b4fc5b116100a2578063e985e9c51161007c578063e985e9c51461071a578063f2fde38b14610756578063f910617514610769578063fac651aa1461077157600080fd5b8063d8b4fc5b146106ec578063e82bef29146106ff578063e8a3d4851461071257600080fd5b8063c87b56dd116100de578063c87b56dd1461069d578063cf456ae7146106b0578063d3738fc8146106c3578063d5abeb01146106e357600080fd5b8063b88d4fde14610679578063b8c317811461068c578063c37bbabc1461069557600080fd5b80639fbc871311610171578063aa271e1a1161014b578063aa271e1a14610633578063ab5ea25214610646578063ace0103d14610659578063b850d0a11461066c57600080fd5b80639fbc871314610605578063a045442c14610618578063a22cb4651461062057600080fd5b8063918aa11b116101ad578063918aa11b146105a757806395d89b41146105ca57806396a85be8146105d25780639e8c708e146105f257600080fd5b80638a81b211146105705780638da5cb5b1461058357806390b2464b1461059457600080fd5b80633d26bb67116102ad5780636352211e1161024b578063715018a611610225578063715018a61461053457806375ec7d481461053c5780637b1039991461054f5780638a71bb2d1461056757600080fd5b80636352211e146104fb5780636f8b44b01461050e57806370a082311461052157600080fd5b806342842e0e1161028757806342842e0e146104ba5780634f558e79146104cd5780634f6ccce7146104e0578063537d4924146104f357600080fd5b80633d26bb67146104965780633fafa1271461049f57806340c10f19146104a757600080fd5b806313966db51161031a5780632a55205a116102f45780632a55205a1461043b5780632f745c591461046d57806333cde651146104805780633655116b1461048957600080fd5b806313966db51461040a57806318160ddd1461042057806323b872dd1461042857600080fd5b8063081812fc1161034b578063081812fc146103b9578063095ea7b3146103e457806310fd332b146103f757600080fd5b806301ffc9a7146103725780630614117a1461039a57806306fdde03146103a4575b600080fd5b610385610380366004612dab565b610779565b60405190151581526020015b60405180910390f35b6103a2610799565b005b6103ac61080d565b6040516103919190612e20565b6103cc6103c7366004612e33565b61081c565b6040516001600160a01b039091168152602001610391565b6103a26103f2366004612e61565b610843565b6103a2610405366004612e61565b61095d565b6104126109e1565b604051908152602001610391565b609f54610412565b6103a2610436366004612e8d565b610a6c565b61044e610449366004612ece565b610a9d565b604080516001600160a01b039093168352602083019190915201610391565b61041261047b366004612e61565b610ad9565b61041260ac5481565b60a1546103859060ff1681565b61041260a35481565b610412610b6f565b6103a26104b5366004612e61565b610bbd565b6103a26104c8366004612e8d565b610c6c565b6103856104db366004612e33565b610c87565b6104126104ee366004612e33565b610ca6565b6103ac610d39565b6103cc610509366004612e33565b610dc7565b6103a261051c366004612e33565b610e27565b61041261052f366004612ef0565b610e8e565b6103a2610f14565b6103a261054a366004612f1b565b610f28565b60a1546103cc9061010090046001600160a01b031681565b61041260b15481565b6103a261057e366004613019565b61102e565b6033546001600160a01b03166103cc565b6103a26105a236600461304e565b61104d565b6103856105b5366004612ef0565b60a86020526000908152604090205460ff1681565b6103ac6111e3565b6105e56105e0366004612ece565b6111ed565b60405161039191906130e0565b6103a2610600366004612ef0565b611297565b60b0546103cc906001600160a01b031681565b6105e561131e565b6103a261062e366004612f1b565b61132d565b610385610641366004612ef0565b611338565b6103a2610654366004613019565b611345565b6103cc61066736600461312d565b611360565b60ad546103859060ff1681565b6103a261068736600461317d565b61157b565b61041260a65481565b6104126115b3565b6103ac6106ab366004612e33565b6115bf565b6103a26106be366004612f1b565b6115ca565b6104126106d1366004612ef0565b60ab6020526000908152604090205481565b61041260a75481565b6103a26106fa3660046131e9565b611657565b60a2546103cc906001600160a01b031681565b6103ac611733565b61038561072836600461320e565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b6103a2610764366004612ef0565b6117e1565b6103ac611857565b6103a2611864565b6000610784826118a4565b806107935750610793826118cf565b92915050565b6107a16118f4565b604051600090339047908381818185875af1925050503d80600081146107e3576040519150601f19603f3d011682016040523d82523d6000602084013e6107e8565b606091505b505090508061080a576040516312171d8360e31b815260040160405180910390fd5b50565b606061081761194e565b905090565b6000610827826119e0565b506000908152609b60205260409020546001600160a01b031690565b600061084e82610dc7565b9050806001600160a01b0316836001600160a01b0316036108c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806108dc57506108dc8133610728565b61094e5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016108b7565b6109588383611a3f565b505050565b6109656118f4565b670de0b6b3a764000081111561098e57604051631dd2188d60e31b815260040160405180910390fd5b60b080546001600160a01b0319166001600160a01b03841690811790915560b18290556040518291907faf80eecb6d383b7ffd8fa84554dd154b74dfdf6410e2dc8a7f5afda7f2d7e01890600090a35050565b60ad5460009060ff16610a655760a160019054906101000a90046001600160a01b03166001600160a01b031663f70210ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610817919061323c565b5060ac5490565b610a763382611aad565b610a925760405162461bcd60e51b81526004016108b790613255565b610958838383611b2c565b60b05460b1546001600160a01b0390911690600090670de0b6b3a764000090610ac690856132b9565b610ad091906132ee565b90509250929050565b6000610ae483610e8e565b8210610b465760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016108b7565b506001600160a01b03919091166000908152609d60209081526040808320938352929052205490565b60a1546040516308d247d360e41b815230600482015260009161010090046001600160a01b031690638d247d3090602401602060405180830381865afa158015610a41573d6000803e3d6000fd5b33610bc960a982611cd3565b610c015760405162461bcd60e51b81526020600482015260096024820152682337b93134b23232b760b91b60448201526064016108b7565b600260655403610c535760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108b7565b6002606555610c628383611cf8565b5050600160655550565b6109588383836040518060200160405280600081525061157b565b6000818152609960205260408120546001600160a01b03161515610793565b6000610cb1609f5490565b8210610d145760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016108b7565b609f8281548110610d2757610d27613302565b90600052602060002001549050919050565b60ae8054610d4690613318565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7290613318565b8015610dbf5780601f10610d9457610100808354040283529160200191610dbf565b820191906000526020600020905b815481529060010190602001808311610da257829003601f168201915b505050505081565b6000818152609960205260408120546001600160a01b0316806107935760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016108b7565b610e2f6118f4565b60a15460ff1615610e5357604051631dd2188d60e31b815260040160405180910390fd5b60a78190556040518181527f3f8118fc46e72ecde0c5e090803cad8c88e817b2f1e93e820aa9bfbf51f2468d9060200160405180910390a150565b60006001600160a01b038216610ef85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016108b7565b506001600160a01b03166000908152609a602052604090205490565b610f1c6118f4565b610f266000611da5565b565b6033546001600160a01b03163314801590610fb0575060a15460405163027cf93b60e31b81523360048201526101009091046001600160a01b0316906313e7c9d890602401602060405180830381865afa158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190613352565b155b15610fce57604051631dd2188d60e31b815260040160405180910390fd5b6001600160a01b038216600081815260a86020908152604091829020805460ff191685151590811790915591519182527f05d3978e3d4c9953c7d2cbd54c2c9901050350ecd9c40284efa828e2bcdcb94191015b60405180910390a25050565b6110366118f4565b80516110499060af906020840190612cfc565b5050565b600054610100900460ff161580801561106d5750600054600160ff909116105b806110875750303b158015611087575060005460ff166001145b6110ea5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108b7565b6000805460ff19166001179055801561110d576000805461ff0019166101001790555b60a1805474ffffffffffffffffffffffffffffffffffffffff001916336101000217905560a386905560a685905560a784905582516111539060a4906020860190612cfc565b5081516111679060a5906020850190612cfc565b5060a280546001600160a01b0319166001600160a01b03891617905561118c87611da5565b611194611df7565b80156111da576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6060610817611e26565b606060006111fb848461336f565b905060008167ffffffffffffffff81111561121857611218612f54565b604051908082528060200260200182016040528015611241578160200160208202803683370190505b50905060005b8281101561128e5761125c60a9878301611e35565b82828151811061126e5761126e613302565b6001600160a01b0390921660209283029190910190910152600101611247565b50949350505050565b61129f6118f4565b6040516370a0823160e01b815230600482015261080a9033906001600160a01b038416906370a0823190602401602060405180830381865afa1580156112e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130d919061323c565b6001600160a01b0384169190611e41565b606061081760006105e06115b3565b611049338383611eb9565b600061079360a983611cd3565b61134d6118f4565b80516110499060ae906020840190612cfc565b60006002606554036113b45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108b7565b60026065556033546001600160a01b031633148015906113e4575060a15461010090046001600160a01b03163314155b1561140257604051631dd2188d60e31b815260040160405180910390fd5b60a15460405163a90cb89b60e01b81526001600160a01b0385811660048301526101009092049091169063a90cb89b90602401602060405180830381865afa158015611452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114769190613352565b61149e57604051633855dd1960e21b81526001600160a01b03841660048201526024016108b7565b6114a783611f87565b9050806001600160a01b031663cf7a1d77306114cb6033546001600160a01b031690565b856040518463ffffffff1660e01b81526004016114ea93929190613386565b600060405180830381600087803b15801561150457600080fd5b505af1158015611518573d6000803e3d6000fd5b505050506115308160a961203490919063ffffffff16565b50604051600181526001600160a01b038216907f1f96bc657d385fd83da973a43f2ad969e6d96b6779b779571a7306db7ca1cd009060200160405180910390a2600160655592915050565b6115853383611aad565b6115a15760405162461bcd60e51b81526004016108b790613255565b6115ad84848484612049565b50505050565b600061081760a961207c565b606061079382612086565b6115d26118f4565b60a15460ff16156115f657604051631dd2188d60e31b815260040160405180910390fd5b801561160d5761160760a983612034565b5061161a565b61161860a9836121e2565b505b816001600160a01b03167f1f96bc657d385fd83da973a43f2ad969e6d96b6779b779571a7306db7ca1cd0082604051611022911515815260200190565b60a15460405163027cf93b60e31b81523360048201526101009091046001600160a01b0316906313e7c9d890602401602060405180830381865afa1580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c79190613352565b6116e457604051631dd2188d60e31b815260040160405180910390fd5b60ad805460ff191682151590811790915560ac83905560408051848152602081019290925233917f3adcad50d42c2c3ec23ad4ebf52f75cf92212482d66ff9060f0b46735d74b9f09101611022565b606060a160019054906101000a90046001600160a01b03166001600160a01b03166380f2152e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611788573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117b091908101906133bb565b60a3546117bc906121f7565b6040516020016117cd929190613429565b604051602081830303815290604052905090565b6117e96118f4565b6001600160a01b03811661184e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108b7565b61080a81611da5565b60af8054610d4690613318565b61186c6118f4565b60a1805460ff191660011790556040517f312de1f2fe8510f37391aa593066f10f0a60eda0aa8400eedbbf16fe320467b790600090a1565b60006118af826118cf565b8061079357506001600160e01b0319821663152a902d60e11b1492915050565b60006001600160e01b0319821663780e9d6360e01b148061079357506107938261224e565b6033546001600160a01b03163314610f265760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108b7565b606060a4805461195d90613318565b80601f016020809104026020016040519081016040528092919081815260200182805461198990613318565b80156119d65780601f106119ab576101008083540402835291602001916119d6565b820191906000526020600020905b8154815290600101906020018083116119b957829003601f168201915b5050505050905090565b6000818152609960205260409020546001600160a01b031661080a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016108b7565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611a7482610dc7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611ab983610dc7565b9050806001600160a01b0316846001600160a01b03161480611b0057506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b80611b245750836001600160a01b0316611b198461081c565b6001600160a01b0316145b949350505050565b826001600160a01b0316611b3f82610dc7565b6001600160a01b031614611ba35760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016108b7565b6001600160a01b038216611c055760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108b7565b611c1083838361229e565b611c1b600082611a3f565b6001600160a01b0383166000908152609a60205260408120805460019290611c4490849061336f565b90915550506001600160a01b0382166000908152609a60205260408120805460019290611c72908490613458565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6001600160a01b038216600090815260ab602052604081208054839290611d20908490613458565b9091555050609f5460a754611d358383613458565b1115611d725760405162461bcd60e51b815260206004820152600c60248201526b14dd5c1c1b1e481b585e195960a21b60448201526064016108b7565b81600103611d875761095883826001016122b2565b60015b8281116115ad57611d9d848284016122b2565b600101611d8a565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611e1e5760405162461bcd60e51b81526004016108b790613470565b610f266122cc565b606060a5805461195d90613318565b6000611cf183836122fa565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806115ad5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016108b7565b816001600160a01b0316836001600160a01b031603611f1a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108b7565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661202f5760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c65640000000000000000000060448201526064016108b7565b919050565b6000611cf1836001600160a01b038416612324565b612054848484611b2c565b61206084848484612373565b6115ad5760405162461bcd60e51b81526004016108b7906134bb565b6000610793825490565b606061209182610c87565b6120f55760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016108b7565b60ae805461210290613318565b90506000036121c35760a160019054906101000a90046001600160a01b03166001600160a01b031663d547cfb76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561215e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261218691908101906133bb565b60a354612192906121f7565b61219b84612474565b6040516020016121ad9392919061350d565b6040516020818303038152906040529050919050565b60ae6121ce83612474565b60af6040516020016121ad939291906135f6565b6000611cf1836001600160a01b038416612575565b6060816000036122215750506040805180820190915260048152630307830360e41b602082015290565b8160005b8115612244578061223581613629565b915050600882901c9150612225565b611b248482612668565b60006001600160e01b031982166380ac58cd60e01b148061227f57506001600160e01b03198216635b5e139f60e01b145b8061079357506301ffc9a760e01b6001600160e01b0319831614610793565b6122a783612804565b610958838383612933565b6110498282604051806020016040528060008152506129eb565b600054610100900460ff166122f35760405162461bcd60e51b81526004016108b790613470565b6001606555565b600082600001828154811061231157612311613302565b9060005260206000200154905092915050565b600081815260018301602052604081205461236b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610793565b506000610793565b60006001600160a01b0384163b1561246957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906123b7903390899088908890600401613642565b6020604051808303816000875af19250505080156123f2575060408051601f3d908101601f191682019092526123ef9181019061367e565b60015b61244f573d808015612420576040519150601f19603f3d011682016040523d82523d6000602084013e612425565b606091505b5080516000036124475760405162461bcd60e51b81526004016108b7906134bb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611b24565b506001949350505050565b60608160000361249b5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156124c557806124af81613629565b91506124be9050600a836132ee565b915061249f565b60008167ffffffffffffffff8111156124e0576124e0612f54565b6040519080825280601f01601f19166020018201604052801561250a576020820181803683370190505b5090505b8415611b245761251f60018361336f565b915061252c600a8661369b565b612537906030613458565b60f81b81838151811061254c5761254c613302565b60200101906001600160f81b031916908160001a90535061256e600a866132ee565b945061250e565b6000818152600183016020526040812054801561265e57600061259960018361336f565b85549091506000906125ad9060019061336f565b90508181146126125760008660000182815481106125cd576125cd613302565b90600052602060002001549050808760000184815481106125f0576125f0613302565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612623576126236136af565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610793565b6000915050610793565b606060006126778360026132b9565b612682906002613458565b67ffffffffffffffff81111561269a5761269a612f54565b6040519080825280601f01601f1916602001820160405280156126c4576020820181803683370190505b509050600360fc1b816000815181106126df576126df613302565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061270e5761270e613302565b60200101906001600160f81b031916908160001a90535060006127328460026132b9565b61273d906001613458565b90505b60018111156127b5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061277157612771613302565b1a60f81b82828151811061278757612787613302565b60200101906001600160f81b031916908160001a90535060049490941c936127ae816136c5565b9050612740565b508315611cf15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108b7565b6001600160a01b0381161561080a57600260a654106128515760405162461bcd60e51b815260206004820152600960248201526814dbdd5b189bdd5b9960ba1b60448201526064016108b7565b600160a65410806128cd575060a154604051637765acf760e11b81523360048201526101009091046001600160a01b03169063eecb59ee90602401602060405180830381865afa1580156128a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cd9190613352565b806128e7575033600090815260a8602052604090205460ff165b61080a5760405162461bcd60e51b815260206004820152601660248201527f4578636c757369766520746f204178656c61725365610000000000000000000060448201526064016108b7565b6001600160a01b03831661298e5761298981609f8054600083815260a060205260408120829055600182018355919091527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de280155565b6129b1565b816001600160a01b0316836001600160a01b0316146129b1576129b18382612a1e565b6001600160a01b0382166129c85761095881612abb565b826001600160a01b0316826001600160a01b031614610958576109588282612b6a565b6129f58383612bae565b612a026000848484612373565b6109585760405162461bcd60e51b81526004016108b7906134bb565b60006001612a2b84610e8e565b612a35919061336f565b6000838152609e6020526040902054909150808214612a88576001600160a01b0384166000908152609d602090815260408083208584528252808320548484528184208190558352609e90915290208190555b506000918252609e602090815260408084208490556001600160a01b039094168352609d81528383209183525290812055565b609f54600090612acd9060019061336f565b600083815260a06020526040812054609f8054939450909284908110612af557612af5613302565b9060005260206000200154905080609f8381548110612b1657612b16613302565b600091825260208083209091019290925582815260a09091526040808220849055858252812055609f805480612b4e57612b4e6136af565b6001900381819060005260206000200160009055905550505050565b6000612b7583610e8e565b6001600160a01b039093166000908152609d602090815260408083208684528252808320859055938252609e9052919091209190915550565b6001600160a01b038216612c045760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108b7565b6000818152609960205260409020546001600160a01b031615612c695760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108b7565b612c756000838361229e565b6001600160a01b0382166000908152609a60205260408120805460019290612c9e908490613458565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612d0890613318565b90600052602060002090601f016020900481019282612d2a5760008555612d70565b82601f10612d4357805160ff1916838001178555612d70565b82800160010185558215612d70579182015b82811115612d70578251825591602001919060010190612d55565b50612d7c929150612d80565b5090565b5b80821115612d7c5760008155600101612d81565b6001600160e01b03198116811461080a57600080fd5b600060208284031215612dbd57600080fd5b8135611cf181612d95565b60005b83811015612de3578181015183820152602001612dcb565b838111156115ad5750506000910152565b60008151808452612e0c816020860160208601612dc8565b601f01601f19169290920160200192915050565b602081526000611cf16020830184612df4565b600060208284031215612e4557600080fd5b5035919050565b6001600160a01b038116811461080a57600080fd5b60008060408385031215612e7457600080fd5b8235612e7f81612e4c565b946020939093013593505050565b600080600060608486031215612ea257600080fd5b8335612ead81612e4c565b92506020840135612ebd81612e4c565b929592945050506040919091013590565b60008060408385031215612ee157600080fd5b50508035926020909101359150565b600060208284031215612f0257600080fd5b8135611cf181612e4c565b801515811461080a57600080fd5b60008060408385031215612f2e57600080fd5b8235612f3981612e4c565b91506020830135612f4981612f0d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612f9357612f93612f54565b604052919050565b600067ffffffffffffffff821115612fb557612fb5612f54565b50601f01601f191660200190565b600082601f830112612fd457600080fd5b8135612fe7612fe282612f9b565b612f6a565b818152846020838601011115612ffc57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561302b57600080fd5b813567ffffffffffffffff81111561304257600080fd5b611b2484828501612fc3565b60008060008060008060c0878903121561306757600080fd5b863561307281612e4c565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff808211156130a457600080fd5b6130b08a838b01612fc3565b935060a08901359150808211156130c657600080fd5b506130d389828a01612fc3565b9150509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156131215783516001600160a01b0316835292840192918401916001016130fc565b50909695505050505050565b6000806040838503121561314057600080fd5b823561314b81612e4c565b9150602083013567ffffffffffffffff81111561316757600080fd5b61317385828601612fc3565b9150509250929050565b6000806000806080858703121561319357600080fd5b843561319e81612e4c565b935060208501356131ae81612e4c565b925060408501359150606085013567ffffffffffffffff8111156131d157600080fd5b6131dd87828801612fc3565b91505092959194509250565b600080604083850312156131fc57600080fd5b823591506020830135612f4981612f0d565b6000806040838503121561322157600080fd5b823561322c81612e4c565b91506020830135612f4981612e4c565b60006020828403121561324e57600080fd5b5051919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156132d3576132d36132a3565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826132fd576132fd6132d8565b500490565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061332c57607f821691505b60208210810361334c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561336457600080fd5b8151611cf181612f0d565b600082821015613381576133816132a3565b500390565b60006001600160a01b038086168352808516602084015250606060408301526133b26060830184612df4565b95945050505050565b6000602082840312156133cd57600080fd5b815167ffffffffffffffff8111156133e457600080fd5b8201601f810184136133f557600080fd5b8051613403612fe282612f9b565b81815285602083850101111561341857600080fd5b6133b2826020830160208601612dc8565b6000835161343b818460208801612dc8565b83519083019061344f818360208801612dc8565b01949350505050565b6000821982111561346b5761346b6132a3565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000845161351f818460208901612dc8565b845190830190613533818360208901612dc8565b602f60f81b91019081528351613550816001840160208801612dc8565b0160010195945050505050565b8054600090600181811c908083168061357757607f831692505b6020808410820361359857634e487b7160e01b600052602260045260246000fd5b8180156135ac57600181146135bd576135ea565b60ff198616895284890196506135ea565b60008881526020902060005b868110156135e25781548b8201529085019083016135c9565b505084890196505b50505050505092915050565b6000613602828661355d565b8451613612818360208901612dc8565b61361e8183018661355d565b979650505050505050565b60006001820161363b5761363b6132a3565b5060010190565b60006001600160a01b038087168352808616602084015250836040830152608060608301526136746080830184612df4565b9695505050505050565b60006020828403121561369057600080fd5b8151611cf181612d95565b6000826136aa576136aa6132d8565b500690565b634e487b7160e01b600052603160045260246000fd5b6000816136d4576136d46132a3565b50600019019056fea26469706673582212200aa793aac0fe62bcd5717cfb2cb97c232596a7bd7cde1e299a3137f502e733e664736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061036d5760003560e01c80638a81b211116101d3578063b88d4fde11610104578063d8b4fc5b116100a2578063e985e9c51161007c578063e985e9c51461071a578063f2fde38b14610756578063f910617514610769578063fac651aa1461077157600080fd5b8063d8b4fc5b146106ec578063e82bef29146106ff578063e8a3d4851461071257600080fd5b8063c87b56dd116100de578063c87b56dd1461069d578063cf456ae7146106b0578063d3738fc8146106c3578063d5abeb01146106e357600080fd5b8063b88d4fde14610679578063b8c317811461068c578063c37bbabc1461069557600080fd5b80639fbc871311610171578063aa271e1a1161014b578063aa271e1a14610633578063ab5ea25214610646578063ace0103d14610659578063b850d0a11461066c57600080fd5b80639fbc871314610605578063a045442c14610618578063a22cb4651461062057600080fd5b8063918aa11b116101ad578063918aa11b146105a757806395d89b41146105ca57806396a85be8146105d25780639e8c708e146105f257600080fd5b80638a81b211146105705780638da5cb5b1461058357806390b2464b1461059457600080fd5b80633d26bb67116102ad5780636352211e1161024b578063715018a611610225578063715018a61461053457806375ec7d481461053c5780637b1039991461054f5780638a71bb2d1461056757600080fd5b80636352211e146104fb5780636f8b44b01461050e57806370a082311461052157600080fd5b806342842e0e1161028757806342842e0e146104ba5780634f558e79146104cd5780634f6ccce7146104e0578063537d4924146104f357600080fd5b80633d26bb67146104965780633fafa1271461049f57806340c10f19146104a757600080fd5b806313966db51161031a5780632a55205a116102f45780632a55205a1461043b5780632f745c591461046d57806333cde651146104805780633655116b1461048957600080fd5b806313966db51461040a57806318160ddd1461042057806323b872dd1461042857600080fd5b8063081812fc1161034b578063081812fc146103b9578063095ea7b3146103e457806310fd332b146103f757600080fd5b806301ffc9a7146103725780630614117a1461039a57806306fdde03146103a4575b600080fd5b610385610380366004612dab565b610779565b60405190151581526020015b60405180910390f35b6103a2610799565b005b6103ac61080d565b6040516103919190612e20565b6103cc6103c7366004612e33565b61081c565b6040516001600160a01b039091168152602001610391565b6103a26103f2366004612e61565b610843565b6103a2610405366004612e61565b61095d565b6104126109e1565b604051908152602001610391565b609f54610412565b6103a2610436366004612e8d565b610a6c565b61044e610449366004612ece565b610a9d565b604080516001600160a01b039093168352602083019190915201610391565b61041261047b366004612e61565b610ad9565b61041260ac5481565b60a1546103859060ff1681565b61041260a35481565b610412610b6f565b6103a26104b5366004612e61565b610bbd565b6103a26104c8366004612e8d565b610c6c565b6103856104db366004612e33565b610c87565b6104126104ee366004612e33565b610ca6565b6103ac610d39565b6103cc610509366004612e33565b610dc7565b6103a261051c366004612e33565b610e27565b61041261052f366004612ef0565b610e8e565b6103a2610f14565b6103a261054a366004612f1b565b610f28565b60a1546103cc9061010090046001600160a01b031681565b61041260b15481565b6103a261057e366004613019565b61102e565b6033546001600160a01b03166103cc565b6103a26105a236600461304e565b61104d565b6103856105b5366004612ef0565b60a86020526000908152604090205460ff1681565b6103ac6111e3565b6105e56105e0366004612ece565b6111ed565b60405161039191906130e0565b6103a2610600366004612ef0565b611297565b60b0546103cc906001600160a01b031681565b6105e561131e565b6103a261062e366004612f1b565b61132d565b610385610641366004612ef0565b611338565b6103a2610654366004613019565b611345565b6103cc61066736600461312d565b611360565b60ad546103859060ff1681565b6103a261068736600461317d565b61157b565b61041260a65481565b6104126115b3565b6103ac6106ab366004612e33565b6115bf565b6103a26106be366004612f1b565b6115ca565b6104126106d1366004612ef0565b60ab6020526000908152604090205481565b61041260a75481565b6103a26106fa3660046131e9565b611657565b60a2546103cc906001600160a01b031681565b6103ac611733565b61038561072836600461320e565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b6103a2610764366004612ef0565b6117e1565b6103ac611857565b6103a2611864565b6000610784826118a4565b806107935750610793826118cf565b92915050565b6107a16118f4565b604051600090339047908381818185875af1925050503d80600081146107e3576040519150601f19603f3d011682016040523d82523d6000602084013e6107e8565b606091505b505090508061080a576040516312171d8360e31b815260040160405180910390fd5b50565b606061081761194e565b905090565b6000610827826119e0565b506000908152609b60205260409020546001600160a01b031690565b600061084e82610dc7565b9050806001600160a01b0316836001600160a01b0316036108c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806108dc57506108dc8133610728565b61094e5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016108b7565b6109588383611a3f565b505050565b6109656118f4565b670de0b6b3a764000081111561098e57604051631dd2188d60e31b815260040160405180910390fd5b60b080546001600160a01b0319166001600160a01b03841690811790915560b18290556040518291907faf80eecb6d383b7ffd8fa84554dd154b74dfdf6410e2dc8a7f5afda7f2d7e01890600090a35050565b60ad5460009060ff16610a655760a160019054906101000a90046001600160a01b03166001600160a01b031663f70210ea6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610817919061323c565b5060ac5490565b610a763382611aad565b610a925760405162461bcd60e51b81526004016108b790613255565b610958838383611b2c565b60b05460b1546001600160a01b0390911690600090670de0b6b3a764000090610ac690856132b9565b610ad091906132ee565b90509250929050565b6000610ae483610e8e565b8210610b465760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016108b7565b506001600160a01b03919091166000908152609d60209081526040808320938352929052205490565b60a1546040516308d247d360e41b815230600482015260009161010090046001600160a01b031690638d247d3090602401602060405180830381865afa158015610a41573d6000803e3d6000fd5b33610bc960a982611cd3565b610c015760405162461bcd60e51b81526020600482015260096024820152682337b93134b23232b760b91b60448201526064016108b7565b600260655403610c535760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108b7565b6002606555610c628383611cf8565b5050600160655550565b6109588383836040518060200160405280600081525061157b565b6000818152609960205260408120546001600160a01b03161515610793565b6000610cb1609f5490565b8210610d145760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016108b7565b609f8281548110610d2757610d27613302565b90600052602060002001549050919050565b60ae8054610d4690613318565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7290613318565b8015610dbf5780601f10610d9457610100808354040283529160200191610dbf565b820191906000526020600020905b815481529060010190602001808311610da257829003601f168201915b505050505081565b6000818152609960205260408120546001600160a01b0316806107935760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016108b7565b610e2f6118f4565b60a15460ff1615610e5357604051631dd2188d60e31b815260040160405180910390fd5b60a78190556040518181527f3f8118fc46e72ecde0c5e090803cad8c88e817b2f1e93e820aa9bfbf51f2468d9060200160405180910390a150565b60006001600160a01b038216610ef85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016108b7565b506001600160a01b03166000908152609a602052604090205490565b610f1c6118f4565b610f266000611da5565b565b6033546001600160a01b03163314801590610fb0575060a15460405163027cf93b60e31b81523360048201526101009091046001600160a01b0316906313e7c9d890602401602060405180830381865afa158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190613352565b155b15610fce57604051631dd2188d60e31b815260040160405180910390fd5b6001600160a01b038216600081815260a86020908152604091829020805460ff191685151590811790915591519182527f05d3978e3d4c9953c7d2cbd54c2c9901050350ecd9c40284efa828e2bcdcb94191015b60405180910390a25050565b6110366118f4565b80516110499060af906020840190612cfc565b5050565b600054610100900460ff161580801561106d5750600054600160ff909116105b806110875750303b158015611087575060005460ff166001145b6110ea5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108b7565b6000805460ff19166001179055801561110d576000805461ff0019166101001790555b60a1805474ffffffffffffffffffffffffffffffffffffffff001916336101000217905560a386905560a685905560a784905582516111539060a4906020860190612cfc565b5081516111679060a5906020850190612cfc565b5060a280546001600160a01b0319166001600160a01b03891617905561118c87611da5565b611194611df7565b80156111da576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6060610817611e26565b606060006111fb848461336f565b905060008167ffffffffffffffff81111561121857611218612f54565b604051908082528060200260200182016040528015611241578160200160208202803683370190505b50905060005b8281101561128e5761125c60a9878301611e35565b82828151811061126e5761126e613302565b6001600160a01b0390921660209283029190910190910152600101611247565b50949350505050565b61129f6118f4565b6040516370a0823160e01b815230600482015261080a9033906001600160a01b038416906370a0823190602401602060405180830381865afa1580156112e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130d919061323c565b6001600160a01b0384169190611e41565b606061081760006105e06115b3565b611049338383611eb9565b600061079360a983611cd3565b61134d6118f4565b80516110499060ae906020840190612cfc565b60006002606554036113b45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108b7565b60026065556033546001600160a01b031633148015906113e4575060a15461010090046001600160a01b03163314155b1561140257604051631dd2188d60e31b815260040160405180910390fd5b60a15460405163a90cb89b60e01b81526001600160a01b0385811660048301526101009092049091169063a90cb89b90602401602060405180830381865afa158015611452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114769190613352565b61149e57604051633855dd1960e21b81526001600160a01b03841660048201526024016108b7565b6114a783611f87565b9050806001600160a01b031663cf7a1d77306114cb6033546001600160a01b031690565b856040518463ffffffff1660e01b81526004016114ea93929190613386565b600060405180830381600087803b15801561150457600080fd5b505af1158015611518573d6000803e3d6000fd5b505050506115308160a961203490919063ffffffff16565b50604051600181526001600160a01b038216907f1f96bc657d385fd83da973a43f2ad969e6d96b6779b779571a7306db7ca1cd009060200160405180910390a2600160655592915050565b6115853383611aad565b6115a15760405162461bcd60e51b81526004016108b790613255565b6115ad84848484612049565b50505050565b600061081760a961207c565b606061079382612086565b6115d26118f4565b60a15460ff16156115f657604051631dd2188d60e31b815260040160405180910390fd5b801561160d5761160760a983612034565b5061161a565b61161860a9836121e2565b505b816001600160a01b03167f1f96bc657d385fd83da973a43f2ad969e6d96b6779b779571a7306db7ca1cd0082604051611022911515815260200190565b60a15460405163027cf93b60e31b81523360048201526101009091046001600160a01b0316906313e7c9d890602401602060405180830381865afa1580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c79190613352565b6116e457604051631dd2188d60e31b815260040160405180910390fd5b60ad805460ff191682151590811790915560ac83905560408051848152602081019290925233917f3adcad50d42c2c3ec23ad4ebf52f75cf92212482d66ff9060f0b46735d74b9f09101611022565b606060a160019054906101000a90046001600160a01b03166001600160a01b03166380f2152e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611788573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117b091908101906133bb565b60a3546117bc906121f7565b6040516020016117cd929190613429565b604051602081830303815290604052905090565b6117e96118f4565b6001600160a01b03811661184e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108b7565b61080a81611da5565b60af8054610d4690613318565b61186c6118f4565b60a1805460ff191660011790556040517f312de1f2fe8510f37391aa593066f10f0a60eda0aa8400eedbbf16fe320467b790600090a1565b60006118af826118cf565b8061079357506001600160e01b0319821663152a902d60e11b1492915050565b60006001600160e01b0319821663780e9d6360e01b148061079357506107938261224e565b6033546001600160a01b03163314610f265760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108b7565b606060a4805461195d90613318565b80601f016020809104026020016040519081016040528092919081815260200182805461198990613318565b80156119d65780601f106119ab576101008083540402835291602001916119d6565b820191906000526020600020905b8154815290600101906020018083116119b957829003601f168201915b5050505050905090565b6000818152609960205260409020546001600160a01b031661080a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016108b7565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611a7482610dc7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611ab983610dc7565b9050806001600160a01b0316846001600160a01b03161480611b0057506001600160a01b038082166000908152609c602090815260408083209388168352929052205460ff165b80611b245750836001600160a01b0316611b198461081c565b6001600160a01b0316145b949350505050565b826001600160a01b0316611b3f82610dc7565b6001600160a01b031614611ba35760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016108b7565b6001600160a01b038216611c055760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108b7565b611c1083838361229e565b611c1b600082611a3f565b6001600160a01b0383166000908152609a60205260408120805460019290611c4490849061336f565b90915550506001600160a01b0382166000908152609a60205260408120805460019290611c72908490613458565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6001600160a01b038216600090815260ab602052604081208054839290611d20908490613458565b9091555050609f5460a754611d358383613458565b1115611d725760405162461bcd60e51b815260206004820152600c60248201526b14dd5c1c1b1e481b585e195960a21b60448201526064016108b7565b81600103611d875761095883826001016122b2565b60015b8281116115ad57611d9d848284016122b2565b600101611d8a565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611e1e5760405162461bcd60e51b81526004016108b790613470565b610f266122cc565b606060a5805461195d90613318565b6000611cf183836122fa565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806115ad5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016108b7565b816001600160a01b0316836001600160a01b031603611f1a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108b7565b6001600160a01b038381166000818152609c6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661202f5760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c65640000000000000000000060448201526064016108b7565b919050565b6000611cf1836001600160a01b038416612324565b612054848484611b2c565b61206084848484612373565b6115ad5760405162461bcd60e51b81526004016108b7906134bb565b6000610793825490565b606061209182610c87565b6120f55760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016108b7565b60ae805461210290613318565b90506000036121c35760a160019054906101000a90046001600160a01b03166001600160a01b031663d547cfb76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561215e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261218691908101906133bb565b60a354612192906121f7565b61219b84612474565b6040516020016121ad9392919061350d565b6040516020818303038152906040529050919050565b60ae6121ce83612474565b60af6040516020016121ad939291906135f6565b6000611cf1836001600160a01b038416612575565b6060816000036122215750506040805180820190915260048152630307830360e41b602082015290565b8160005b8115612244578061223581613629565b915050600882901c9150612225565b611b248482612668565b60006001600160e01b031982166380ac58cd60e01b148061227f57506001600160e01b03198216635b5e139f60e01b145b8061079357506301ffc9a760e01b6001600160e01b0319831614610793565b6122a783612804565b610958838383612933565b6110498282604051806020016040528060008152506129eb565b600054610100900460ff166122f35760405162461bcd60e51b81526004016108b790613470565b6001606555565b600082600001828154811061231157612311613302565b9060005260206000200154905092915050565b600081815260018301602052604081205461236b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610793565b506000610793565b60006001600160a01b0384163b1561246957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906123b7903390899088908890600401613642565b6020604051808303816000875af19250505080156123f2575060408051601f3d908101601f191682019092526123ef9181019061367e565b60015b61244f573d808015612420576040519150601f19603f3d011682016040523d82523d6000602084013e612425565b606091505b5080516000036124475760405162461bcd60e51b81526004016108b7906134bb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611b24565b506001949350505050565b60608160000361249b5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156124c557806124af81613629565b91506124be9050600a836132ee565b915061249f565b60008167ffffffffffffffff8111156124e0576124e0612f54565b6040519080825280601f01601f19166020018201604052801561250a576020820181803683370190505b5090505b8415611b245761251f60018361336f565b915061252c600a8661369b565b612537906030613458565b60f81b81838151811061254c5761254c613302565b60200101906001600160f81b031916908160001a90535061256e600a866132ee565b945061250e565b6000818152600183016020526040812054801561265e57600061259960018361336f565b85549091506000906125ad9060019061336f565b90508181146126125760008660000182815481106125cd576125cd613302565b90600052602060002001549050808760000184815481106125f0576125f0613302565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612623576126236136af565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610793565b6000915050610793565b606060006126778360026132b9565b612682906002613458565b67ffffffffffffffff81111561269a5761269a612f54565b6040519080825280601f01601f1916602001820160405280156126c4576020820181803683370190505b509050600360fc1b816000815181106126df576126df613302565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061270e5761270e613302565b60200101906001600160f81b031916908160001a90535060006127328460026132b9565b61273d906001613458565b90505b60018111156127b5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061277157612771613302565b1a60f81b82828151811061278757612787613302565b60200101906001600160f81b031916908160001a90535060049490941c936127ae816136c5565b9050612740565b508315611cf15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108b7565b6001600160a01b0381161561080a57600260a654106128515760405162461bcd60e51b815260206004820152600960248201526814dbdd5b189bdd5b9960ba1b60448201526064016108b7565b600160a65410806128cd575060a154604051637765acf760e11b81523360048201526101009091046001600160a01b03169063eecb59ee90602401602060405180830381865afa1580156128a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cd9190613352565b806128e7575033600090815260a8602052604090205460ff165b61080a5760405162461bcd60e51b815260206004820152601660248201527f4578636c757369766520746f204178656c61725365610000000000000000000060448201526064016108b7565b6001600160a01b03831661298e5761298981609f8054600083815260a060205260408120829055600182018355919091527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de280155565b6129b1565b816001600160a01b0316836001600160a01b0316146129b1576129b18382612a1e565b6001600160a01b0382166129c85761095881612abb565b826001600160a01b0316826001600160a01b031614610958576109588282612b6a565b6129f58383612bae565b612a026000848484612373565b6109585760405162461bcd60e51b81526004016108b7906134bb565b60006001612a2b84610e8e565b612a35919061336f565b6000838152609e6020526040902054909150808214612a88576001600160a01b0384166000908152609d602090815260408083208584528252808320548484528184208190558352609e90915290208190555b506000918252609e602090815260408084208490556001600160a01b039094168352609d81528383209183525290812055565b609f54600090612acd9060019061336f565b600083815260a06020526040812054609f8054939450909284908110612af557612af5613302565b9060005260206000200154905080609f8381548110612b1657612b16613302565b600091825260208083209091019290925582815260a09091526040808220849055858252812055609f805480612b4e57612b4e6136af565b6001900381819060005260206000200160009055905550505050565b6000612b7583610e8e565b6001600160a01b039093166000908152609d602090815260408083208684528252808320859055938252609e9052919091209190915550565b6001600160a01b038216612c045760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108b7565b6000818152609960205260409020546001600160a01b031615612c695760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108b7565b612c756000838361229e565b6001600160a01b0382166000908152609a60205260408120805460019290612c9e908490613458565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612d0890613318565b90600052602060002090601f016020900481019282612d2a5760008555612d70565b82601f10612d4357805160ff1916838001178555612d70565b82800160010185558215612d70579182015b82811115612d70578251825591602001919060010190612d55565b50612d7c929150612d80565b5090565b5b80821115612d7c5760008155600101612d81565b6001600160e01b03198116811461080a57600080fd5b600060208284031215612dbd57600080fd5b8135611cf181612d95565b60005b83811015612de3578181015183820152602001612dcb565b838111156115ad5750506000910152565b60008151808452612e0c816020860160208601612dc8565b601f01601f19169290920160200192915050565b602081526000611cf16020830184612df4565b600060208284031215612e4557600080fd5b5035919050565b6001600160a01b038116811461080a57600080fd5b60008060408385031215612e7457600080fd5b8235612e7f81612e4c565b946020939093013593505050565b600080600060608486031215612ea257600080fd5b8335612ead81612e4c565b92506020840135612ebd81612e4c565b929592945050506040919091013590565b60008060408385031215612ee157600080fd5b50508035926020909101359150565b600060208284031215612f0257600080fd5b8135611cf181612e4c565b801515811461080a57600080fd5b60008060408385031215612f2e57600080fd5b8235612f3981612e4c565b91506020830135612f4981612f0d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612f9357612f93612f54565b604052919050565b600067ffffffffffffffff821115612fb557612fb5612f54565b50601f01601f191660200190565b600082601f830112612fd457600080fd5b8135612fe7612fe282612f9b565b612f6a565b818152846020838601011115612ffc57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561302b57600080fd5b813567ffffffffffffffff81111561304257600080fd5b611b2484828501612fc3565b60008060008060008060c0878903121561306757600080fd5b863561307281612e4c565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff808211156130a457600080fd5b6130b08a838b01612fc3565b935060a08901359150808211156130c657600080fd5b506130d389828a01612fc3565b9150509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156131215783516001600160a01b0316835292840192918401916001016130fc565b50909695505050505050565b6000806040838503121561314057600080fd5b823561314b81612e4c565b9150602083013567ffffffffffffffff81111561316757600080fd5b61317385828601612fc3565b9150509250929050565b6000806000806080858703121561319357600080fd5b843561319e81612e4c565b935060208501356131ae81612e4c565b925060408501359150606085013567ffffffffffffffff8111156131d157600080fd5b6131dd87828801612fc3565b91505092959194509250565b600080604083850312156131fc57600080fd5b823591506020830135612f4981612f0d565b6000806040838503121561322157600080fd5b823561322c81612e4c565b91506020830135612f4981612e4c565b60006020828403121561324e57600080fd5b5051919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156132d3576132d36132a3565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826132fd576132fd6132d8565b500490565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061332c57607f821691505b60208210810361334c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561336457600080fd5b8151611cf181612f0d565b600082821015613381576133816132a3565b500390565b60006001600160a01b038086168352808516602084015250606060408301526133b26060830184612df4565b95945050505050565b6000602082840312156133cd57600080fd5b815167ffffffffffffffff8111156133e457600080fd5b8201601f810184136133f557600080fd5b8051613403612fe282612f9b565b81815285602083850101111561341857600080fd5b6133b2826020830160208601612dc8565b6000835161343b818460208801612dc8565b83519083019061344f818360208801612dc8565b01949350505050565b6000821982111561346b5761346b6132a3565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000845161351f818460208901612dc8565b845190830190613533818360208901612dc8565b602f60f81b91019081528351613550816001840160208801612dc8565b0160010195945050505050565b8054600090600181811c908083168061357757607f831692505b6020808410820361359857634e487b7160e01b600052602260045260246000fd5b8180156135ac57600181146135bd576135ea565b60ff198616895284890196506135ea565b60008881526020902060005b868110156135e25781548b8201529085019083016135c9565b505084890196505b50505050505092915050565b6000613602828661355d565b8451613612818360208901612dc8565b61361e8183018661355d565b979650505050505050565b60006001820161363b5761363b6132a3565b5060010190565b60006001600160a01b038087168352808616602084015250836040830152608060608301526136746080830184612df4565b9695505050505050565b60006020828403121561369057600080fd5b8151611cf181612d95565b6000826136aa576136aa6132d8565b500690565b634e487b7160e01b600052603160045260246000fd5b6000816136d4576136d46132a3565b50600019019056fea26469706673582212200aa793aac0fe62bcd5717cfb2cb97c232596a7bd7cde1e299a3137f502e733e664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 625,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 296,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 942,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 944,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 948,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 952,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 956,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 962,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1932,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1936,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1939,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_allTokens",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1943,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6318,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "newMinterStopped",
        "offset": 0,
        "slot": "161",
        "type": "t_bool"
      },
      {
        "astId": 6321,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "registry",
        "offset": 1,
        "slot": "161",
        "type": "t_contract(AxelarSeaProjectRegistry)6259"
      },
      {
        "astId": 6323,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "fundAddress",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 6325,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "collectionId",
        "offset": 0,
        "slot": "163",
        "type": "t_bytes32"
      },
      {
        "astId": 6327,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "nftName",
        "offset": 0,
        "slot": "164",
        "type": "t_string_storage"
      },
      {
        "astId": 6329,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "nftSymbol",
        "offset": 0,
        "slot": "165",
        "type": "t_string_storage"
      },
      {
        "astId": 6331,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "exclusiveLevel",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 6333,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "maxSupply",
        "offset": 0,
        "slot": "167",
        "type": "t_uint256"
      },
      {
        "astId": 6337,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "exclusiveContract",
        "offset": 0,
        "slot": "168",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6340,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "minters",
        "offset": 0,
        "slot": "169",
        "type": "t_struct(AddressSet)3706_storage"
      },
      {
        "astId": 6344,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "walletMinted",
        "offset": 0,
        "slot": "171",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6346,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "mintFeeOverride",
        "offset": 0,
        "slot": "172",
        "type": "t_uint256"
      },
      {
        "astId": 6348,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "enableMintFeeOverride",
        "offset": 0,
        "slot": "173",
        "type": "t_bool"
      },
      {
        "astId": 6350,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "baseTokenUriPrefix",
        "offset": 0,
        "slot": "174",
        "type": "t_string_storage"
      },
      {
        "astId": 6352,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "baseTokenUriSuffix",
        "offset": 0,
        "slot": "175",
        "type": "t_string_storage"
      },
      {
        "astId": 6354,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "royaltyReceiver",
        "offset": 0,
        "slot": "176",
        "type": "t_address"
      },
      {
        "astId": 6356,
        "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
        "label": "royaltyPercentage",
        "offset": 0,
        "slot": "177",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AxelarSeaProjectRegistry)6259": {
        "encoding": "inplace",
        "label": "contract AxelarSeaProjectRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3706_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3705,
            "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3405_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3405_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3400,
            "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3404,
            "contract": "contracts/mint/AxelarSeaNft721Enumerable.sol:AxelarSeaNft721Enumerable",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}