{
  "language": "Solidity",
  "sources": {
    "contracts/AxelarSeaCrossChainAdapter.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\n// Emit event and let backend submit it to meta wallet\r\n\r\n// On test we exclude fee, so we can bypass this section\r\n\r\ncontract AxelarSeaCrossChainAdapter {\r\n  using SafeERC20 for IERC20;\r\n\r\n  event CreateMetaWallet(address target);\r\n  function createMetaWallet() public {\r\n    emit CreateMetaWallet(msg.sender);\r\n  }\r\n\r\n  // event BuyERC721();\r\n  // function buyERC721(IERC721 token, address seller, uint256 tokenId, address destination, IERC20 token, uint256 amount) public {\r\n  //   token.safeTransfer\r\n  // }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/paymentGateway/AxelarSeaMetaWallet.sol": {
      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"../lib/SafeTransferLib.sol\";\r\nimport \"../lib/RevertReason.sol\";\r\nimport \"./AxelarSeaPGError.sol\";\r\n\r\nbytes4 constant VALID_SIGNATURE = 0x1626ba7e;\r\n\r\ninterface IAxelarSeaMetaWalletFactoryOperator {\r\n  function operator(address op) external view returns(bool);\r\n}\r\n\r\ncontract AxelarSeaMetaWallet is Initializable, IERC721Receiver, IERC1155Receiver {\r\n  using SafeTransferLib for IERC20;\r\n\r\n  event Signed(address indexed caller, uint256 indexed commandId, bytes32 indexed digest, bytes32 secretHash);\r\n  event ExecutionFailed(address indexed caller, address indexed target, address indexed token, uint256 amount, bytes payload, string reason);\r\n  event ExecutionSuccess(address indexed caller, address indexed target, address indexed token, uint256 amount, bytes payload, bytes returnData);\r\n\r\n  // Not allowed to change the owner\r\n  address public owner;\r\n  address public factory;\r\n\r\n  address private _contextToken;\r\n  uint256 private _contextTokenAmount;\r\n\r\n  // commandId => digest map, can be search using public\r\n  mapping(uint256 => bytes32) public approvedDigest;\r\n\r\n  // secretHash = keccak256(commandId, secret) => digest map, cannot reverse lookup for secret\r\n  mapping(bytes32 => bytes32) private approvedDigestHash;\r\n\r\n  function initialize(\r\n    address _owner\r\n  ) public initializer {\r\n    factory = msg.sender;\r\n    owner = _owner;\r\n  }\r\n\r\n  modifier onlyOperator(address op) {\r\n    if (op != owner && !IAxelarSeaMetaWalletFactoryOperator(factory).operator(op)) {\r\n      revert NotOperator();\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    if (msg.sender != owner) {\r\n      revert NotOwner();\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  function execute(address target, bytes calldata payload) public payable onlyOperator(msg.sender) returns(bytes memory) {\r\n    (bool success, bytes memory data) = target.call{value: msg.value}(payload);\r\n\r\n    if (!success) {\r\n      string memory reason = RevertReason.getRevertMsg(data);\r\n      emit ExecutionFailed(msg.sender, target, _contextToken, _contextTokenAmount, payload, reason);\r\n      revert(reason);\r\n    }\r\n\r\n    emit ExecutionSuccess(msg.sender, target, _contextToken, _contextTokenAmount, payload, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  function executeWithToken(\r\n    IERC20 token,\r\n    uint256 amount,\r\n    address target,\r\n    bytes calldata payload\r\n  ) public payable onlyOperator(msg.sender) returns(bytes memory data) {\r\n    if (address(token) != address(0)) {\r\n      token.safeTransferFrom(msg.sender, address(this), amount);\r\n      approveERC20(token, target, amount);\r\n    }\r\n\r\n    _contextToken = address(token);\r\n    _contextTokenAmount = amount;\r\n\r\n    data = execute(target, payload);\r\n\r\n    _contextToken = address(0);\r\n    _contextTokenAmount = 0;\r\n  }\r\n\r\n  function sign(uint256 commandId, bytes32 secretHash, bytes32 digest) public onlyOperator(msg.sender) {\r\n    approvedDigest[commandId] = approvedDigestHash[secretHash] = digest;\r\n    emit Signed(msg.sender, commandId, digest, secretHash);\r\n  }\r\n\r\n  // Note: For ERC721 and ERC1155 use execute with appropriate function directly\r\n\r\n  function approveERC20(IERC20 token, address spender, uint256 amount) public onlyOperator(msg.sender) {\r\n    try token.approve(spender, amount) returns (bool success) {\r\n      if (!success) {\r\n        revert ApproveFailed();\r\n      }\r\n    } catch {\r\n      token.safeApprove(spender, 0);\r\n      token.safeApprove(spender, amount);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC165-supportsInterface}.\r\n    */\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {\r\n    return (\r\n      interfaceId == type(IERC1155Receiver).interfaceId ||\r\n      interfaceId == type(IERC721Receiver).interfaceId\r\n    );\r\n  }\r\n\r\n  /**\r\n    * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n    * by `operator` from `from`, this function is called.\r\n    *\r\n    * It must return its Solidity selector to confirm the token transfer.\r\n    * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n    *\r\n    * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n    */\r\n  function onERC721Received(\r\n    address,\r\n    address,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external returns (bytes4) {\r\n    IERC721(msg.sender).safeTransferFrom(address(this), owner, tokenId, data);\r\n    return IERC721Receiver.onERC721Received.selector;\r\n  }\r\n\r\n  /**\r\n    * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n    * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n    *\r\n    * NOTE: To accept the transfer, this must return\r\n    * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    * (i.e. 0xf23a6e61, or its own function selector).\r\n    *\r\n    * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n    * @param from The address which previously owned the token\r\n    * @param id The ID of the token being transferred\r\n    * @param amount The amount of tokens being transferred\r\n    * @param data Additional data with no specified format\r\n    * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n  function onERC1155Received(\r\n    address operator,\r\n    address from,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes calldata data\r\n  ) external returns (bytes4) {\r\n    operator;\r\n    from;\r\n\r\n    IERC1155(msg.sender).safeTransferFrom(address(this), owner, id, amount, data);\r\n\r\n    return IERC1155Receiver.onERC1155Received.selector;\r\n  }\r\n\r\n  /**\r\n    * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n    * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n    * been updated.\r\n    *\r\n    * NOTE: To accept the transfer(s), this must return\r\n    * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    * (i.e. 0xbc197c81, or its own function selector).\r\n    *\r\n    * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n    * @param from The address which previously owned the token\r\n    * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n    * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n    * @param data Additional data with no specified format\r\n    * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n  function onERC1155BatchReceived(\r\n    address operator,\r\n    address from,\r\n    uint256[] calldata ids,\r\n    uint256[] calldata values,\r\n    bytes calldata data\r\n  ) external returns (bytes4) {\r\n    operator;\r\n    from;\r\n\r\n    IERC1155(msg.sender).safeBatchTransferFrom(address(this), owner, ids, values, data);\r\n\r\n    return IERC1155Receiver.onERC1155BatchReceived.selector;\r\n  }\r\n\r\n  /**\r\n   * @dev Should return whether the signature provided is valid for the provided hash\r\n   * @param digest      Hash of the data to be signed\r\n   * @param signature   Signature byte array associated with _hash\r\n   *\r\n   * MUST return the bytes4 magic value 0x1626ba7e when function passes.\r\n   * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\r\n   * MUST allow external calls\r\n   */ \r\n  function isValidSignature(\r\n    bytes32 digest, \r\n    bytes memory signature\r\n  ) public view returns (bytes4) {\r\n    (uint256 commandId, ) = abi.decode(signature, (uint256, bytes32));\r\n\r\n    if (approvedDigest[commandId] != digest || approvedDigestHash[keccak256(signature)] != digest) {\r\n      revert InvalidSignature();\r\n    }\r\n\r\n    return VALID_SIGNATURE;\r\n  }\r\n\r\n  function recoverETH(uint256 amount) external onlyOwner {\r\n    SafeTransferLib.safeTransferETH(msg.sender, amount);\r\n  }\r\n\r\n  function recoverERC20(IERC20 token, uint256 amount) external onlyOwner {\r\n    token.safeTransfer(msg.sender, amount);\r\n  }\r\n\r\n  function recoverERC721(IERC721 token, uint256 tokenId, bytes calldata data) external onlyOwner {\r\n    token.safeTransferFrom(address(this), msg.sender, tokenId, data);\r\n  }\r\n\r\n  function recoverERC1155(IERC1155 token, uint256 tokenId, uint256 amount, bytes calldata data) external onlyOwner {\r\n    token.safeTransferFrom(address(this), msg.sender, tokenId, amount, data);\r\n  }\r\n}"
    },
    "contracts/lib/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\n// Using IERC20 instead of ERC20\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\r\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\r\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\r\nlibrary SafeTransferLib {\r\n    /*//////////////////////////////////////////////////////////////\r\n                             ETH OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        bool success;\r\n\r\n        assembly {\r\n            // Transfer the ETH and store if it succeeded or not.\r\n            success := call(gas(), to, amount, 0, 0, 0, 0)\r\n        }\r\n\r\n        require(success, \"ETH_TRANSFER_FAILED\");\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            ERC20 OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool success;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\r\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\r\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\r\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\r\n\r\n            success := and(\r\n                // Set success to whether the call reverted, if not we check it either\r\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\r\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\r\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\r\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\r\n                // Counterintuitively, this call must be positioned second to the or() call in the\r\n                // surrounding and() call or else returndatasize() will be zero during the computation.\r\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\r\n            )\r\n        }\r\n\r\n        require(success, \"TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool success;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\r\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\r\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\r\n\r\n            success := and(\r\n                // Set success to whether the call reverted, if not we check it either\r\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\r\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\r\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\r\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\r\n                // Counterintuitively, this call must be positioned second to the or() call in the\r\n                // surrounding and() call or else returndatasize() will be zero during the computation.\r\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\r\n            )\r\n        }\r\n\r\n        require(success, \"TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool success;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\r\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\r\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\r\n\r\n            success := and(\r\n                // Set success to whether the call reverted, if not we check it either\r\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\r\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\r\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\r\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\r\n                // Counterintuitively, this call must be positioned second to the or() call in the\r\n                // surrounding and() call or else returndatasize() will be zero during the computation.\r\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\r\n            )\r\n        }\r\n\r\n        require(success, \"APPROVE_FAILED\");\r\n    }\r\n}"
    },
    "contracts/lib/RevertReason.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\n// Credit: https://github.com/ProjectOpenSea/seaport/blob/891b5d4f52b58eb7030597fbb22dca67fd86c4c8/contracts/lib/LowLevelHelpers.sol\r\n\r\nuint256 constant AlmostOneWord = 0x1f;\r\nuint256 constant OneWord = 0x20;\r\nuint256 constant FreeMemoryPointerSlot = 0x40;\r\nuint256 constant CostPerWord = 3;\r\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\r\nuint256 constant ExtraGasBuffer = 0x20;\r\n\r\nlibrary RevertReason {\r\n    /**\r\n     * @dev Internal view function to revert and pass along the revert reason if\r\n     *      data was returned by the last call and that the size of that data\r\n     *      does not exceed the currently allocated memory size.\r\n     */\r\n    function revertWithReasonIfOneIsReturned() internal view {\r\n        assembly {\r\n            // If it returned a message, bubble it up as long as sufficient gas\r\n            // remains to do so:\r\n            if returndatasize() {\r\n                // Ensure that sufficient gas is available to copy returndata\r\n                // while expanding memory where necessary. Start by computing\r\n                // the word size of returndata and allocated memory.\r\n                let returnDataWords := div(\r\n                    add(returndatasize(), AlmostOneWord),\r\n                    OneWord\r\n                )\r\n\r\n                // Note: use the free memory pointer in place of msize() to work\r\n                // around a Yul warning that prevents accessing msize directly\r\n                // when the IR pipeline is activated.\r\n                let msizeWords := div(mload(FreeMemoryPointerSlot), OneWord)\r\n\r\n                // Next, compute the cost of the returndatacopy.\r\n                let cost := mul(CostPerWord, returnDataWords)\r\n\r\n                // Then, compute cost of new memory allocation.\r\n                if gt(returnDataWords, msizeWords) {\r\n                    cost := add(\r\n                        cost,\r\n                        add(\r\n                            mul(sub(returnDataWords, msizeWords), CostPerWord),\r\n                            div(\r\n                                sub(\r\n                                    mul(returnDataWords, returnDataWords),\r\n                                    mul(msizeWords, msizeWords)\r\n                                ),\r\n                                MemoryExpansionCoefficient\r\n                            )\r\n                        )\r\n                    )\r\n                }\r\n\r\n                // Finally, add a small constant and compare to gas remaining;\r\n                // bubble up the revert data if enough gas is still available.\r\n                if lt(add(cost, ExtraGasBuffer), gas()) {\r\n                    // Copy returndata to memory; overwrite existing memory.\r\n                    returndatacopy(0, 0, returndatasize())\r\n\r\n                    // Revert, specifying memory region with copied returndata.\r\n                    revert(0, returndatasize())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n}\r\n"
    },
    "contracts/paymentGateway/AxelarSeaPGError.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\nerror LowLevelCallFailed();\r\nerror NotOwner();\r\nerror NotOperator();\r\nerror ApproveFailed();\r\nerror TransferFailed();\r\nerror InvalidSignature();"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/paymentGateway/AxelarSeaMetaWalletFactory.sol": {
      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./AxelarSeaMetaWallet.sol\";\r\n\r\ncontract AxelarSeaMetaWalletFactory is OwnableUpgradeable {\r\n  address public metaWalletTemplate;\r\n\r\n  // Address of AxelarSeaMetaWallet contract for a particular user\r\n  mapping(address => address) public metaWalletAddress;\r\n  mapping(address => uint256) public metaWalletVersion;\r\n  uint256 public version;\r\n\r\n  // Operator is a contract that can perform any operation on behalf of MetaWallet\r\n  mapping(address => bool) public operators;\r\n\r\n  // GAP is not neccessary since this contract operate on its own\r\n\r\n  function initialize(address _metaWalletTemplate) public initializer {\r\n    version = 1;\r\n    metaWalletTemplate = _metaWalletTemplate;\r\n    __Ownable_init();\r\n  }\r\n\r\n  event SetOperator(address indexed operator, bool enabled);\r\n  function setOperator(address operator, bool enabled) external onlyOwner {\r\n    operators[operator] = enabled;\r\n    emit SetOperator(operator, enabled);\r\n  }\r\n\r\n  event DeployMetaWallet(address indexed metaWalletOwner, address indexed metaWallet);\r\n  function deployMetaWallet(address metaWalletOwner) public returns(address metaWallet) {\r\n    if (metaWalletAddress[metaWalletOwner] != address(0) && metaWalletVersion[metaWalletOwner] == version) {\r\n      return metaWalletAddress[metaWalletOwner];\r\n    }\r\n\r\n    metaWallet = Clones.clone(metaWalletTemplate);\r\n\r\n    // AxelarSeaMetaWallet(metaWallet).initialize(metaWalletOwner);\r\n\r\n    metaWalletAddress[metaWalletOwner] = metaWallet;\r\n    metaWalletVersion[metaWalletOwner] = version;\r\n\r\n    emit DeployMetaWallet(metaWalletOwner, metaWallet);\r\n  }\r\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/paymentGateway/SimpleRangoTest.sol": {
      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"../lib/SafeTransferLib.sol\";\r\nimport \"./AxelarSeaMetaWalletFactory.sol\";\r\n\r\ninterface IRangoMessageReceiver {\r\n    enum ProcessStatus { SUCCESS, REFUND_IN_SOURCE, REFUND_IN_DESTINATION }\r\n\r\n    function handleRangoMessage(\r\n        address _token,\r\n        uint _amount,\r\n        ProcessStatus _status,\r\n        bytes memory _message\r\n    ) external;\r\n}\r\n\r\ncontract SimpleRangoTest is IRangoMessageReceiver, OwnableUpgradeable {\r\n    using SafeTransferLib for IERC20;\r\n\r\n    address payable public rangoContract;\r\n\r\n    function initialize(address payable _rangoContract) public initializer {\r\n        rangoContract = _rangoContract;\r\n        __Ownable_init();\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    // Source chain (Likely to be called from a token aggregator)\r\n    function buy(IERC20 token, uint256 amount, bytes calldata rangoData) external payable {\r\n        // 1. Receive fund and approve rango\r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n        token.safeApprove(rangoContract, 0);\r\n        token.safeApprove(rangoContract, amount);\r\n\r\n        // 2. Send the money via Rango\r\n        (bool success, bytes memory retData) = rangoContract.call{value: msg.value}(rangoData);\r\n        if (!success) revert(_getRevertMsg(retData));\r\n    }\r\n\r\n    // Destination chain\r\n    event HandleRangoMessage(address indexed token, uint amount, uint status, bytes message);\r\n    function handleRangoMessage(\r\n        address _token,\r\n        uint _amount,\r\n        ProcessStatus _status,\r\n        bytes memory _message\r\n    ) external {\r\n        emit HandleRangoMessage(_token, _amount, uint(_status), _message);\r\n    }\r\n\r\n    function refundTo(address _to, IERC20 _token, uint256 _amount) internal {\r\n        if (address(_token) == address(0)) {\r\n            refundNativeTo(payable(_to), _amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function refundNativeTo(address payable _to, uint256 _amount) internal {\r\n        SafeTransferLib.safeTransferETH(_to, _amount);\r\n    }\r\n\r\n    function recoverETH() external onlyOwner {\r\n        SafeTransferLib.safeTransferETH(msg.sender, address(this).balance);\r\n    }\r\n\r\n    function recoverERC20(IERC20 token) external onlyOwner {\r\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function recoverERC721(IERC721 token, uint256 tokenId, bytes calldata data) external onlyOwner {\r\n        token.safeTransferFrom(address(this), msg.sender, tokenId, data);\r\n    }\r\n\r\n    function recoverERC1155(IERC1155 token, uint256 tokenId, uint256 amount, bytes calldata data) external onlyOwner {\r\n        token.safeTransferFrom(address(this), msg.sender, tokenId, amount, data);\r\n    }\r\n\r\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n        assembly {\r\n        // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n\r\n\r\n}"
    },
    "contracts/paymentGateway/AxelarSeaRangoPGMockSource.sol": {
      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./AxelarSeaRangoPG.sol\";\r\nimport \"../lib/SafeTransferLib.sol\";\r\n\r\ncontract AxelarSeaRangoPGMockSource is Ownable {\r\n  using SafeTransferLib for IERC20;\r\n\r\n  function stealToken(bytes calldata rangoData) public {\r\n    (address token, uint256 amount, ) = abi.decode(rangoData, (address, uint256, bytes));\r\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n  }\r\n}"
    },
    "contracts/paymentGateway/AxelarSeaRangoPG.sol": {
      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"../lib/SafeTransferLib.sol\";\r\nimport \"./AxelarSeaMetaWalletFactory.sol\";\r\n\r\ninterface IRangoMessageReceiver {\r\n    enum ProcessStatus { SUCCESS, REFUND_IN_SOURCE, REFUND_IN_DESTINATION }\r\n\r\n    function handleRangoMessage(\r\n        address _token,\r\n        uint _amount,\r\n        ProcessStatus _status,\r\n        bytes memory _message\r\n    ) external;\r\n}\r\n\r\ncontract AxelarSeaRangoPG is IRangoMessageReceiver, OwnableUpgradeable {\r\n    using SafeTransferLib for IERC20;\r\n\r\n    struct AppMessage { \r\n      address buyer;\r\n      address targetContract;\r\n      bytes payload;\r\n    }\r\n    enum PurchaseType { BOUGHT, SOLD_OUT }\r\n    event NFTPurchaseStatus(uint assetId, address buyer, PurchaseType purchaseType);\r\n\r\n    mapping(address => bool) public whitelistedRelayer;\r\n    address payable public rangoContract;\r\n    AxelarSeaMetaWalletFactory public metaWalletFactory;\r\n\r\n    function initialize(address payable _rangoContract, AxelarSeaMetaWalletFactory _metaWalletFactory) public initializer {\r\n        rangoContract = _rangoContract;\r\n        metaWalletFactory = _metaWalletFactory;\r\n        __Ownable_init();\r\n    }\r\n\r\n    event WhitelistedRelayer(address indexed relayer, bool whitelisted);\r\n    function whitelistRelayer(address relayer, bool whitelisted) public onlyOwner {\r\n        whitelistedRelayer[relayer] = whitelisted;\r\n        emit WhitelistedRelayer(relayer, whitelisted);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    // Source chain (Likely to be called from a token aggregator)\r\n    function buyNFTCrosschain(IERC20 token, uint256 amount, bytes calldata rangoData) external payable {\r\n        // 1. Receive fund and approve rango\r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n        token.safeApprove(rangoContract, 0);\r\n        token.safeApprove(rangoContract, amount);\r\n\r\n        // 2. Send the money via Rango\r\n        (bool success, bytes memory retData) = rangoContract.call{value: msg.value}(rangoData);\r\n        if (!success) revert(_getRevertMsg(retData));\r\n    }\r\n\r\n    // Destination chain\r\n    function handleRangoMessage(\r\n        address _token,\r\n        uint _amount,\r\n        ProcessStatus _status,\r\n        bytes memory _message\r\n    ) external {\r\n        require(whitelistedRelayer[msg.sender], \"Not Whitelisted\");\r\n\r\n        AppMessage memory m = abi.decode((_message), (AppMessage));\r\n\r\n        if (_status == ProcessStatus.REFUND_IN_SOURCE || _status == ProcessStatus.REFUND_IN_DESTINATION) {\r\n            refundTo(m.buyer, IERC20(_token), _amount);\r\n        } else {\r\n            AxelarSeaMetaWallet metaWallet = AxelarSeaMetaWallet(metaWalletFactory.deployMetaWallet(m.buyer));\r\n\r\n            uint256 nativeAmount = _amount;\r\n\r\n            if (_token != address(0)) {\r\n                nativeAmount = 0;\r\n                try IERC20(_token).approve(address(metaWallet), _amount) returns(bool) {} catch {\r\n                    IERC20(_token).safeApprove(address(metaWallet), 0);\r\n                    IERC20(_token).safeApprove(address(metaWallet), _amount);\r\n                }\r\n            }\r\n\r\n            try metaWallet.executeWithToken{value: nativeAmount}(IERC20(_token), _amount, m.targetContract, m.payload) returns(bytes memory) {}\r\n            catch {\r\n                refundTo(m.buyer, IERC20(_token), _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function refundTo(address _to, IERC20 _token, uint256 _amount) internal {\r\n        if (address(_token) == address(0)) {\r\n            refundNativeTo(payable(_to), _amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function refundNativeTo(address payable _to, uint256 _amount) internal {\r\n        SafeTransferLib.safeTransferETH(_to, _amount);\r\n    }\r\n\r\n    function recoverETH() external onlyOwner {\r\n        SafeTransferLib.safeTransferETH(msg.sender, address(this).balance);\r\n    }\r\n\r\n    function recoverERC20(IERC20 token) external onlyOwner {\r\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function recoverERC721(IERC721 token, uint256 tokenId, bytes calldata data) external onlyOwner {\r\n        token.safeTransferFrom(address(this), msg.sender, tokenId, data);\r\n    }\r\n\r\n    function recoverERC1155(IERC1155 token, uint256 tokenId, uint256 amount, bytes calldata data) external onlyOwner {\r\n        token.safeTransferFrom(address(this), msg.sender, tokenId, amount, data);\r\n    }\r\n\r\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n        assembly {\r\n        // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n\r\n\r\n}"
    },
    "contracts/paymentGateway/AxelarSeaRangoPGMockDest.sol": {
      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./AxelarSeaRangoPG.sol\";\r\nimport \"../lib/SafeTransferLib.sol\";\r\n\r\ncontract AxelarSeaRangoPGMockDest is Ownable {\r\n  using SafeTransferLib for IERC20;\r\n\r\n  AxelarSeaRangoPG public immutable rangoPg;\r\n\r\n  constructor(AxelarSeaRangoPG _rangoPg) {\r\n    rangoPg = _rangoPg;\r\n  }\r\n\r\n  function stealToken(bytes calldata rangoData) public {\r\n    (address token, uint256 amount) = abi.decode(rangoData, (address, uint256));\r\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n  }\r\n\r\n  struct AppMessage { \r\n    address buyer;\r\n    address targetContract;\r\n    bytes payload;\r\n  }\r\n\r\n  function mockMessage(\r\n    address _token,\r\n    uint _amount,\r\n    IRangoMessageReceiver.ProcessStatus _status,\r\n    bytes memory _message\r\n  ) public {\r\n    IERC20(_token).safeTransfer(address(rangoPg), _amount);\r\n    rangoPg.handleRangoMessage(_token, _amount, _status, _message);\r\n  }\r\n\r\n  function mockAppMessage(\r\n    address _token,\r\n    uint _amount,\r\n    IRangoMessageReceiver.ProcessStatus _status,\r\n    address buyer,\r\n    address targetContract,\r\n    bytes memory payload\r\n  ) public {\r\n    mockMessage(_token, _amount, _status, abi.encode(AppMessage({\r\n      buyer: buyer,\r\n      targetContract: targetContract,\r\n      payload: payload\r\n    })));\r\n  }\r\n}"
    },
    "contracts/mint/AxelarSeaProjectRegistry.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./lib/IAxelarSeaNftInitializable.sol\";\r\nimport \"../meta-transactions/NativeMetaTransaction.sol\";\r\nimport \"../meta-transactions/ContextMixin.sol\";\r\nimport \"../lib/SafeTransferLib.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\n\r\nimport \"./lib/AxelarSeaMintingErrors.sol\";\r\n\r\ncontract AxelarSeaProjectRegistry is OwnableUpgradeable, NativeMetaTransaction, ContextMixin, ReentrancyGuardUpgradeable {\r\n  using SafeTransferLib for IERC20;\r\n\r\n  mapping(address => bool) public operators;\r\n  mapping(address => bool) public templates;\r\n  mapping(address => bool) public minterTemplates;\r\n  mapping(address => bool) public axelarSeaContract;\r\n\r\n  mapping(bytes32 => address) public projectOwner;\r\n  mapping(address => bytes32) public nftProject;\r\n\r\n  // 1 = Member, 2 = Admin\r\n  mapping(bytes32 => mapping(address => uint256)) public projectMember;\r\n\r\n  // Collection ID -> contract address\r\n  mapping(bytes32 => address) public collectionMapping;\r\n\r\n  // Minting fee\r\n  address public feeAddress;\r\n  uint256 public baseMintFee;\r\n\r\n  string public baseContractURI;\r\n  string public baseTokenURI;\r\n\r\n  // Deployment fee\r\n  address public newProjectFeeAddress;\r\n  uint256 public newProjectFeeAmount;\r\n\r\n  address public newCollectionFeeAddress;\r\n  uint256 public newCollectionFeeAmount;\r\n\r\n  // Best practice to leave room for more variable if upgradeable\r\n  uint256[200] private __GAP;\r\n\r\n  function initialize() public initializer {\r\n    baseMintFee = 0.02 ether; // 2%\r\n    baseContractURI = \"https://api-nftdrop.axelarsea.com/contractMetadata/\"; // TODO\r\n    baseTokenURI = \"https://api-nftdrop.axelarsea.com/tokenMetadata/\"; // TODO\r\n\r\n    feeAddress = msg.sender;\r\n    _initializeEIP712(\"AxelarSeaProjectRegistry\");\r\n\r\n    __Ownable_init();\r\n    __ReentrancyGuard_init();\r\n  }\r\n\r\n  modifier onlyOperator {\r\n    require(operators[msgSender()], \"Not Operator\");\r\n    _;\r\n  }\r\n\r\n  event SetNewProjectFee(address indexed token, uint256 fee);\r\n  function setNewProjectFee(address token, uint256 fee) public onlyOwner {\r\n    newProjectFeeAddress = token;\r\n    newProjectFeeAmount = fee;\r\n    emit SetNewProjectFee(token, fee);\r\n  }\r\n\r\n  event SetNewCollectionFee(address indexed token, uint256 fee);\r\n  function setNewCollectionFee(address token, uint256 fee) public onlyOwner {\r\n    newCollectionFeeAddress = token;\r\n    newCollectionFeeAmount = fee;\r\n    emit SetNewCollectionFee(token, fee);\r\n  }\r\n\r\n  event SetMintFee(address indexed addr, uint256 fee);\r\n  function setMintFee(address addr, uint256 fee) public onlyOwner {\r\n    require(fee <= 1 ether, \"Too much fee\");\r\n    feeAddress = addr;\r\n    baseMintFee = fee;\r\n    emit SetMintFee(addr, fee);\r\n  }\r\n\r\n  event SetOperator(address indexed operator, bool enabled);\r\n  function setOperator(address operator, bool enabled) public onlyOwner {\r\n    operators[operator] = enabled;\r\n    emit SetOperator(operator, enabled);\r\n  }\r\n\r\n  event SetMinterTemplate(address indexed template, bool enabled);\r\n  function setMinterTemplate(address template, bool enabled) public onlyOwner {\r\n    minterTemplates[template] = enabled;\r\n    emit SetMinterTemplate(template, enabled);\r\n  }\r\n\r\n  event SetTemplate(address indexed template, bool enabled);\r\n  function setTemplate(address template, bool enabled) public onlyOwner {\r\n    templates[template] = enabled;\r\n    emit SetTemplate(template, enabled);\r\n  }\r\n\r\n  event SetAxelarSeaContract(address indexed addr, bool enabled);\r\n  function setAxelarSeaContract(address addr, bool enabled) public onlyOwner {\r\n    axelarSeaContract[addr] = enabled;\r\n    emit SetAxelarSeaContract(addr, enabled);\r\n  }\r\n\r\n  event NewProject(address indexed owner, bytes32 projectId);\r\n  function _newProject(address owner, bytes32 projectId) public onlyOperator {\r\n    projectOwner[projectId] = owner;\r\n    projectMember[projectId][owner] = 2;\r\n\r\n    // New project fee only paid once per chain\r\n    if (newProjectFeeAddress != address(0) && newProjectFeeAmount > 0) {\r\n      IERC20(newProjectFeeAddress).safeTransferFrom(msgSender(), address(this), newProjectFeeAmount);\r\n    }\r\n\r\n    emit NewProject(owner, projectId);\r\n  }\r\n\r\n  function newProject(address owner, bytes32 projectId) public onlyOperator {\r\n    if (owner == address(0)) revert Forbidden();\r\n    _newProject(owner, projectId);\r\n  }\r\n\r\n  event SetProjectMember(bytes32 indexed projectId, address indexed member, uint256 level);\r\n  function setProjectMember(bytes32 projectId, address member, uint256 level) public {\r\n    // Invalid level || Not admin || Change owner || Invalid project -> Forbidden || Invalid member -> Forbidden\r\n    if(level > 2 || projectMember[projectId][msgSender()] != 2 || member == projectOwner[projectId] || projectOwner[projectId] == address(0) || member == address(0)) revert Forbidden();\r\n    projectMember[projectId][member] = level;\r\n    emit SetProjectMember(projectId, member, level);\r\n  }\r\n\r\n  event SetProjectOwner(bytes32 indexed projectId, address indexed owner);\r\n  function setProjectOwner(bytes32 projectId, address owner) public {\r\n    // Not owner || New member not admin || Invalid project || Invalid owner -> Forbidden\r\n    if(msgSender() != projectOwner[projectId] || projectMember[projectId][owner] != 2 || projectOwner[projectId] == address(0) || owner == address(0)) revert Forbidden();\r\n    projectOwner[projectId] = owner;\r\n    emit SetProjectOwner(projectId, owner);\r\n  }\r\n\r\n  // Only linkable if that NFT implement Ownable\r\n  event LinkProject(address indexed contractAddress, bytes32 projectId);\r\n  function _linkProject(address contractAddress, bytes32 projectId) internal {\r\n    address owner = Ownable(contractAddress).owner();\r\n\r\n    // If no owner || owner of nft is not a member of project -> Forbidden\r\n    if(owner == address(0) || projectMember[projectId][owner] == 0) revert Forbidden();\r\n\r\n    nftProject[contractAddress] = projectId;\r\n\r\n    emit LinkProject(contractAddress, projectId);\r\n  }\r\n\r\n  function linkProject(address contractAddress, bytes32 projectId) public nonReentrant {\r\n    // Check support interface\r\n    require(IERC165(contractAddress).supportsInterface(0x80ac58cd) || IERC165(contractAddress).supportsInterface(0xd9b67a26), \"Not NFT\");\r\n\r\n    _linkProject(contractAddress, projectId);\r\n  }\r\n\r\n  event DeployNft(address indexed template, address indexed owner, address indexed contractAddress, bytes32 collectionId, bytes32 projectId);\r\n  function deployNft(\r\n    address template,\r\n    address owner,\r\n    bytes32 collectionId,\r\n    bytes32 projectId,\r\n    uint256 exclusiveLevel,\r\n    uint256 maxSupply,\r\n    string memory name,\r\n    string memory symbol\r\n  ) public onlyOperator nonReentrant returns(IAxelarSeaNftInitializable nft) {\r\n    if (!templates[template]) {\r\n      revert InvalidTemplate(template);\r\n    }\r\n\r\n    if (collectionMapping[collectionId] != address(0)) {\r\n      revert DuplicatedCollection(collectionId);\r\n    }\r\n\r\n    // Collection deployment fee\r\n    if (newCollectionFeeAddress != address(0) && newCollectionFeeAmount > 0) {\r\n      IERC20(newCollectionFeeAddress).safeTransferFrom(msgSender(), address(this), newCollectionFeeAmount);\r\n    }\r\n\r\n    nft = IAxelarSeaNftInitializable(Clones.clone(template));\r\n    nft.initialize(owner, collectionId, exclusiveLevel, maxSupply, name, symbol);\r\n\r\n    if (projectOwner[projectId] == address(0)) {\r\n      _newProject(owner, projectId);\r\n    }\r\n    \r\n    _linkProject(address(nft), projectId);\r\n\r\n    collectionMapping[collectionId] = address(nft);\r\n\r\n    emit DeployNft(template, owner, address(nft), collectionId, projectId);\r\n  }\r\n\r\n  function deployNftWithMinter(\r\n    address template,\r\n    address minterTemplate,\r\n    address owner,\r\n    bytes32 collectionId,\r\n    bytes32 projectId,\r\n    uint256 exclusiveLevel,\r\n    uint256 maxSupply,\r\n    string memory name,\r\n    string memory symbol,\r\n    bytes memory data\r\n  ) public onlyOperator nonReentrant returns(IAxelarSeaNftInitializable nft, IAxelarSeaMinterInitializable minter) {\r\n    if (!templates[template]) {\r\n      revert InvalidTemplate(template);\r\n    }\r\n\r\n    if (!minterTemplates[minterTemplate]) {\r\n      revert InvalidTemplate(minterTemplate);\r\n    }\r\n  \r\n    if (collectionMapping[collectionId] != address(0)) {\r\n      revert DuplicatedCollection(collectionId);\r\n    }\r\n\r\n    // Collection deployment fee\r\n    if (newCollectionFeeAddress != address(0) && newCollectionFeeAmount > 0) {\r\n      IERC20(newCollectionFeeAddress).safeTransferFrom(msgSender(), address(this), newCollectionFeeAmount);\r\n    }\r\n\r\n    nft = IAxelarSeaNftInitializable(Clones.clone(template));\r\n    nft.initialize(owner, collectionId, exclusiveLevel, maxSupply, name, symbol);\r\n\r\n    if (projectOwner[projectId] == address(0)) {\r\n      _newProject(owner, projectId);\r\n    }\r\n    \r\n    _linkProject(address(nft), projectId);\r\n\r\n    minter = nft.deployMinter(minterTemplate, data);\r\n\r\n    collectionMapping[collectionId] = address(nft);\r\n\r\n    emit DeployNft(template, owner, address(nft), collectionId, projectId);\r\n  }\r\n\r\n  function setBaseContractURI(string memory _uri) public onlyOwner {\r\n    baseContractURI = _uri;\r\n  }\r\n\r\n  function setBaseTokenURI(string memory _uri) public onlyOwner {\r\n    baseTokenURI = _uri;\r\n  }\r\n}"
    },
    "contracts/mint/lib/IAxelarSeaNftInitializable.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAxelarSeaNftInitializable {\r\n  function initialize(\r\n    address owner,\r\n    bytes32 collectionId,\r\n    uint256 exclusiveLevel,\r\n    uint256 maxSupply,\r\n    string memory name, \r\n    string memory symbol\r\n  ) external;\r\n\r\n  function deployMinter(\r\n    address template,\r\n    bytes memory data\r\n  ) external returns(IAxelarSeaMinterInitializable minter);\r\n\r\n  function mint(address to, uint256 maxAmount, uint256 amount) external;\r\n}\r\n\r\ninterface IAxelarSeaMinterInitializable {\r\n  function initialize(\r\n    address targetNft,\r\n    address owner,\r\n    bytes memory data\r\n  ) external;\r\n}\r\n"
    },
    "contracts/meta-transactions/NativeMetaTransaction.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport {MetaTransactionVerifier} from \"./MetaTransactionVerifier.sol\";\r\nimport \"../lib/RevertReason.sol\";\r\n\r\ncontract NativeMetaTransaction is MetaTransactionVerifier {\r\n    function executeMetaTransaction(\r\n        address userAddress,\r\n        uint256 nonce,\r\n        bytes calldata functionSignature,\r\n        bytes calldata signature\r\n    ) public payable returns (bytes memory) {\r\n        verifyMetaTransaction(userAddress, nonce, functionSignature, signature);\r\n\r\n        emit MetaTransactionExecuted(\r\n            userAddress,\r\n            payable(msg.sender),\r\n            functionSignature\r\n        );\r\n\r\n        // Append userAddress and relayer address at the end to extract it from calling context\r\n        (bool success, bytes memory returnData) = address(this).call(\r\n            abi.encodePacked(functionSignature, userAddress)\r\n        );\r\n\r\n        // require(success, \"Function call not successful\");\r\n\r\n        if (!success) {\r\n            RevertReason.revertWithReasonIfOneIsReturned();\r\n            revert(\"Function call not successful\");\r\n        }\r\n\r\n        return returnData;\r\n    }\r\n}"
    },
    "contracts/meta-transactions/ContextMixin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ContextMixin {\r\n    function msgSender() internal view returns (address sender) {\r\n        if (msg.sender == address(this)) {\r\n            bytes memory array = msg.data;\r\n            uint256 index = msg.data.length;\r\n            assembly {\r\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n                sender := and(\r\n                    mload(add(array, index)),\r\n                    0xffffffffffffffffffffffffffffffffffffffff\r\n                )\r\n            }\r\n        } else {\r\n            sender = msg.sender;\r\n        }\r\n        return sender;\r\n    }\r\n}\r\n"
    },
    "contracts/mint/lib/AxelarSeaMintingErrors.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\nerror InvalidTemplate(address template);\r\nerror Forbidden();\r\nerror NotMintingTime();\r\nerror MintPerWalletLimited();\r\nerror SupplyLimited();\r\nerror NotWhitelisted();\r\nerror TransferFailed();\r\nerror DuplicatedCollection(bytes32 collectionId);"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/meta-transactions/MetaTransactionVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport {EIP712Base} from \"./EIP712Base.sol\";\r\nimport \"../seaport/lib/SignatureVerification.sol\";\r\n\r\ncontract MetaTransactionVerifier is EIP712Base, SignatureVerification {\r\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\r\n        bytes(\r\n            \"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"\r\n        )\r\n    );\r\n    event MetaTransactionExecuted(\r\n        address userAddress,\r\n        address payable relayerAddress,\r\n        bytes functionSignature\r\n    );\r\n    mapping(uint256 => bool) nonces;\r\n\r\n    /*\r\n     * Meta transaction structure.\r\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\r\n     * He should call the desired function directly in that case.\r\n     */\r\n    struct MetaTransaction {\r\n        uint256 nonce;\r\n        address from;\r\n        bytes functionSignature;\r\n    }\r\n\r\n    function verifyMetaTransaction(\r\n        address userAddress,\r\n        uint256 nonce,\r\n        bytes calldata functionSignature,\r\n        bytes calldata signature\r\n    ) internal {\r\n        require(!nonces[nonce], \"Already run\");\r\n\r\n        MetaTransaction memory metaTx = MetaTransaction({\r\n            nonce: nonce,\r\n            from: userAddress,\r\n            functionSignature: functionSignature\r\n        });\r\n\r\n        require(\r\n            _verifyMetaTransaction(userAddress, metaTx, signature),\r\n            \"Signer and signature do not match\"\r\n        );\r\n\r\n        // mark nonce to prevent tx reuse\r\n        nonces[nonce] = true;\r\n    }\r\n\r\n    function hashMetaTransaction(MetaTransaction memory metaTx)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    META_TRANSACTION_TYPEHASH,\r\n                    metaTx.nonce,\r\n                    metaTx.from,\r\n                    keccak256(metaTx.functionSignature)\r\n                )\r\n            );\r\n    }\r\n\r\n    function _verifyMetaTransaction(\r\n        address signer,\r\n        MetaTransaction memory metaTx,\r\n        bytes calldata signature\r\n    ) internal view returns (bool) {\r\n        require(signer != address(0), \"NativeMetaTransaction: INVALID_SIGNER\");\r\n\r\n        // console.log(uint256(toTypedMessageHash(hashMetaTransaction(metaTx))));\r\n\r\n        _assertValidSignature(signer, toTypedMessageHash(hashMetaTransaction(metaTx)), signature);\r\n\r\n        return true;\r\n\r\n        // return\r\n        //     signer ==\r\n        //     ecrecover(\r\n        //         toTypedMessageHash(hashMetaTransaction(metaTx)),\r\n        //         sigV,\r\n        //         sigR,\r\n        //         sigS\r\n        //     );\r\n    }\r\n}"
    },
    "contracts/meta-transactions/EIP712Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\ncontract EIP712Base is Initializable {\r\n    struct EIP712Domain {\r\n        string name;\r\n        string version;\r\n        address verifyingContract;\r\n        bytes32 salt;\r\n    }\r\n\r\n    string constant public ERC712_VERSION = \"1\";\r\n\r\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\r\n        bytes(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        )\r\n    );\r\n    bytes32 internal domainSeperator;\r\n\r\n    // supposed to be called once while initializing.\r\n    // one of the contracts that inherits this contract follows proxy pattern\r\n    // so it is not possible to do this in a constructor\r\n    function _initializeEIP712(\r\n        string memory name\r\n    )\r\n        internal\r\n        initializer\r\n    {\r\n        _setDomainSeperator(name);\r\n    }\r\n\r\n    function _setDomainSeperator(string memory name) internal {\r\n        domainSeperator = keccak256(\r\n            abi.encode(\r\n                EIP712_DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(ERC712_VERSION)),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function getDomainSeperator() public view returns (bytes32) {\r\n        return domainSeperator;\r\n    }\r\n\r\n    function getChainId() public view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Accept message hash and returns hash message in EIP712 compatible form\r\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\r\n     * https://eips.ethereum.org/EIPS/eip-712\r\n     * \"\\\\x19\" makes the encoding deterministic\r\n     * \"\\\\x01\" is the version byte to make it compatible to EIP-191\r\n     */\r\n    function toTypedMessageHash(bytes32 messageHash)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\"\\x19\\x01\", getDomainSeperator(), messageHash)\r\n            );\r\n    }\r\n}"
    },
    "contracts/seaport/lib/SignatureVerification.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport { EIP1271Interface } from \"../interfaces/EIP1271Interface.sol\";\r\n\r\nimport {\r\n    SignatureVerificationErrors\r\n} from \"../interfaces/SignatureVerificationErrors.sol\";\r\n\r\nimport { LowLevelHelpers } from \"./LowLevelHelpers.sol\";\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title SignatureVerification\r\n * @author 0age\r\n * @notice SignatureVerification contains logic for verifying signatures.\r\n */\r\ncontract SignatureVerification is SignatureVerificationErrors, LowLevelHelpers {\r\n    /**\r\n     * @dev Internal view function to verify the signature of an order. An\r\n     *      ERC-1271 fallback will be attempted if either the signature length\r\n     *      is not 64 or 65 bytes or if the recovered signer does not match the\r\n     *      supplied signer.\r\n     *\r\n     * @param signer    The signer for the order.\r\n     * @param digest    The digest to verify the signature against.\r\n     * @param signature A signature from the signer indicating that the order\r\n     *                  has been approved.\r\n     */\r\n    function _assertValidSignature(\r\n        address signer,\r\n        bytes32 digest,\r\n        bytes memory signature\r\n    ) internal view {\r\n        // Declare value for ecrecover equality or 1271 call success status.\r\n        bool success;\r\n\r\n        // Utilize assembly to perform optimized signature verification check.\r\n        assembly {\r\n            // Ensure that first word of scratch space is empty.\r\n            mstore(0, 0)\r\n\r\n            // Declare value for v signature parameter.\r\n            let v\r\n\r\n            // Get the length of the signature.\r\n            let signatureLength := mload(signature)\r\n\r\n            // Get the pointer to the value preceding the signature length.\r\n            // This will be used for temporary memory overrides - either the\r\n            // signature head for isValidSignature or the digest for ecrecover.\r\n            let wordBeforeSignaturePtr := sub(signature, OneWord)\r\n\r\n            // Cache the current value behind the signature to restore it later.\r\n            let cachedWordBeforeSignature := mload(wordBeforeSignaturePtr)\r\n\r\n            // Declare lenDiff + recoveredSigner scope to manage stack pressure.\r\n            {\r\n                // Take the difference between the max ECDSA signature length\r\n                // and the actual signature length. Overflow desired for any\r\n                // values > 65. If the diff is not 0 or 1, it is not a valid\r\n                // ECDSA signature - move on to EIP1271 check.\r\n                let lenDiff := sub(ECDSA_MaxLength, signatureLength)\r\n\r\n                // Declare variable for recovered signer.\r\n                let recoveredSigner\r\n\r\n                // If diff is 0 or 1, it may be an ECDSA signature.\r\n                // Try to recover signer.\r\n                if iszero(gt(lenDiff, 1)) {\r\n                    // Read the signature `s` value.\r\n                    let originalSignatureS := mload(\r\n                        add(signature, ECDSA_signature_s_offset)\r\n                    )\r\n\r\n                    // Read the first byte of the word after `s`. If the\r\n                    // signature is 65 bytes, this will be the real `v` value.\r\n                    // If not, it will need to be modified - doing it this way\r\n                    // saves an extra condition.\r\n                    v := byte(\r\n                        0,\r\n                        mload(add(signature, ECDSA_signature_v_offset))\r\n                    )\r\n\r\n                    // If lenDiff is 1, parse 64-byte signature as ECDSA.\r\n                    if lenDiff {\r\n                        // Extract yParity from highest bit of vs and add 27 to\r\n                        // get v.\r\n                        v := add(\r\n                            shr(MaxUint8, originalSignatureS),\r\n                            Signature_lower_v\r\n                        )\r\n\r\n                        // Extract canonical s from vs, all but the highest bit.\r\n                        // Temporarily overwrite the original `s` value in the\r\n                        // signature.\r\n                        mstore(\r\n                            add(signature, ECDSA_signature_s_offset),\r\n                            and(\r\n                                originalSignatureS,\r\n                                EIP2098_allButHighestBitMask\r\n                            )\r\n                        )\r\n                    }\r\n                    // Temporarily overwrite the signature length with `v` to\r\n                    // conform to the expected input for ecrecover.\r\n                    mstore(signature, v)\r\n\r\n                    // Temporarily overwrite the word before the length with\r\n                    // `digest` to conform to the expected input for ecrecover.\r\n                    mstore(wordBeforeSignaturePtr, digest)\r\n\r\n                    // Attempt to recover the signer for the given signature. Do\r\n                    // not check the call status as ecrecover will return a null\r\n                    // address if the signature is invalid.\r\n                    pop(\r\n                        staticcall(\r\n                            gas(),\r\n                            Ecrecover_precompile, // Call ecrecover precompile.\r\n                            wordBeforeSignaturePtr, // Use data memory location.\r\n                            Ecrecover_args_size, // Size of digest, v, r, and s.\r\n                            0, // Write result to scratch space.\r\n                            OneWord // Provide size of returned result.\r\n                        )\r\n                    )\r\n\r\n                    // Restore cached word before signature.\r\n                    mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\r\n\r\n                    // Restore cached signature length.\r\n                    mstore(signature, signatureLength)\r\n\r\n                    // Restore cached signature `s` value.\r\n                    mstore(\r\n                        add(signature, ECDSA_signature_s_offset),\r\n                        originalSignatureS\r\n                    )\r\n\r\n                    // Read the recovered signer from the buffer given as return\r\n                    // space for ecrecover.\r\n                    recoveredSigner := mload(0)\r\n                }\r\n\r\n                // Set success to true if the signature provided was a valid\r\n                // ECDSA signature and the signer is not the null address. Use\r\n                // gt instead of direct as success is used outside of assembly.\r\n                success := and(eq(signer, recoveredSigner), gt(signer, 0))\r\n            }\r\n\r\n            // If the signature was not verified with ecrecover, try EIP1271.\r\n            if iszero(success) {\r\n                // Temporarily overwrite the word before the signature length\r\n                // and use it as the head of the signature input to\r\n                // `isValidSignature`, which has a value of 64.\r\n                mstore(\r\n                    wordBeforeSignaturePtr,\r\n                    EIP1271_isValidSignature_signature_head_offset\r\n                )\r\n\r\n                // Get pointer to use for the selector of `isValidSignature`.\r\n                let selectorPtr := sub(\r\n                    signature,\r\n                    EIP1271_isValidSignature_selector_negativeOffset\r\n                )\r\n\r\n                // Cache the value currently stored at the selector pointer.\r\n                let cachedWordOverwrittenBySelector := mload(selectorPtr)\r\n\r\n                // Get pointer to use for `digest` input to `isValidSignature`.\r\n                let digestPtr := sub(\r\n                    signature,\r\n                    EIP1271_isValidSignature_digest_negativeOffset\r\n                )\r\n\r\n                // Cache the value currently stored at the digest pointer.\r\n                let cachedWordOverwrittenByDigest := mload(digestPtr)\r\n\r\n                // Write the selector first, since it overlaps the digest.\r\n                mstore(selectorPtr, EIP1271_isValidSignature_selector)\r\n\r\n                // Next, write the digest.\r\n                mstore(digestPtr, digest)\r\n\r\n                // Call signer with `isValidSignature` to validate signature.\r\n                success := staticcall(\r\n                    gas(),\r\n                    signer,\r\n                    selectorPtr,\r\n                    add(\r\n                        signatureLength,\r\n                        EIP1271_isValidSignature_calldata_baseLength\r\n                    ),\r\n                    0,\r\n                    OneWord\r\n                )\r\n\r\n                // Determine if the signature is valid on successful calls.\r\n                if success {\r\n                    // If first word of scratch space does not contain EIP-1271\r\n                    // signature selector, revert.\r\n                    if iszero(eq(mload(0), EIP1271_isValidSignature_selector)) {\r\n                        // Revert with bad 1271 signature if signer has code.\r\n                        if extcodesize(signer) {\r\n                            // Bad contract signature.\r\n                            mstore(0, BadContractSignature_error_signature)\r\n                            revert(0, BadContractSignature_error_length)\r\n                        }\r\n\r\n                        // Check if signature length was invalid.\r\n                        if gt(sub(ECDSA_MaxLength, signatureLength), 1) {\r\n                            // Revert with generic invalid signature error.\r\n                            mstore(0, InvalidSignature_error_signature)\r\n                            revert(0, InvalidSignature_error_length)\r\n                        }\r\n\r\n                        // Check if v was invalid.\r\n                        if iszero(\r\n                            byte(v, ECDSA_twentySeventhAndTwentyEighthBytesSet)\r\n                        ) {\r\n                            // Revert with invalid v value.\r\n                            mstore(0, BadSignatureV_error_signature)\r\n                            mstore(BadSignatureV_error_offset, v)\r\n                            revert(0, BadSignatureV_error_length)\r\n                        }\r\n\r\n                        // Revert with generic invalid signer error message.\r\n                        mstore(0, InvalidSigner_error_signature)\r\n                        revert(0, InvalidSigner_error_length)\r\n                    }\r\n                }\r\n\r\n                // Restore the cached values overwritten by selector, digest and\r\n                // signature head.\r\n                mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\r\n                mstore(selectorPtr, cachedWordOverwrittenBySelector)\r\n                mstore(digestPtr, cachedWordOverwrittenByDigest)\r\n            }\r\n        }\r\n\r\n        // If the call failed...\r\n        if (!success) {\r\n            // Revert and pass reason along if one was returned.\r\n            _revertWithReasonIfOneIsReturned();\r\n\r\n            // Otherwise, revert with error indicating bad contract signature.\r\n            assembly {\r\n                mstore(0, BadContractSignature_error_signature)\r\n                revert(0, BadContractSignature_error_length)\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/seaport/interfaces/EIP1271Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface EIP1271Interface {\r\n    function isValidSignature(bytes32 digest, bytes calldata signature)\r\n        external\r\n        view\r\n        returns (bytes4);\r\n}\r\n"
    },
    "contracts/seaport/interfaces/SignatureVerificationErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n * @title SignatureVerificationErrors\r\n * @author 0age\r\n * @notice SignatureVerificationErrors contains all errors related to signature\r\n *         verification.\r\n */\r\ninterface SignatureVerificationErrors {\r\n    /**\r\n     * @dev Revert with an error when a signature that does not contain a v\r\n     *      value of 27 or 28 has been supplied.\r\n     *\r\n     * @param v The invalid v value.\r\n     */\r\n    error BadSignatureV(uint8 v);\r\n\r\n    /**\r\n     * @dev Revert with an error when the signer recovered by the supplied\r\n     *      signature does not match the offerer or an allowed EIP-1271 signer\r\n     *      as specified by the offerer in the event they are a contract.\r\n     */\r\n    error InvalidSigner();\r\n\r\n    /**\r\n     * @dev Revert with an error when a signer cannot be recovered from the\r\n     *      supplied signature.\r\n     */\r\n    error InvalidSignature();\r\n\r\n    /**\r\n     * @dev Revert with an error when an EIP-1271 call to an account fails.\r\n     */\r\n    error BadContractSignature();\r\n}\r\n"
    },
    "contracts/seaport/lib/LowLevelHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport \"./ConsiderationConstants.sol\";\r\n\r\n/**\r\n * @title LowLevelHelpers\r\n * @author 0age\r\n * @notice LowLevelHelpers contains logic for performing various low-level\r\n *         operations.\r\n */\r\ncontract LowLevelHelpers {\r\n    /**\r\n     * @dev Internal view function to staticcall an arbitrary target with given\r\n     *      calldata. Note that no data is written to memory and no contract\r\n     *      size check is performed.\r\n     *\r\n     * @param target   The account to staticcall.\r\n     * @param callData The calldata to supply when staticcalling the target.\r\n     *\r\n     * @return success The status of the staticcall to the target.\r\n     */\r\n    function _staticcall(address target, bytes memory callData)\r\n        internal\r\n        view\r\n        returns (bool success)\r\n    {\r\n        assembly {\r\n            // Perform the staticcall.\r\n            success := staticcall(\r\n                gas(),\r\n                target,\r\n                add(callData, OneWord),\r\n                mload(callData),\r\n                0,\r\n                0\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert and pass along the revert reason if\r\n     *      data was returned by the last call and that the size of that data\r\n     *      does not exceed the currently allocated memory size.\r\n     */\r\n    function _revertWithReasonIfOneIsReturned() internal view {\r\n        assembly {\r\n            // If it returned a message, bubble it up as long as sufficient gas\r\n            // remains to do so:\r\n            if returndatasize() {\r\n                // Ensure that sufficient gas is available to copy returndata\r\n                // while expanding memory where necessary. Start by computing\r\n                // the word size of returndata and allocated memory.\r\n                let returnDataWords := div(\r\n                    add(returndatasize(), AlmostOneWord),\r\n                    OneWord\r\n                )\r\n\r\n                // Note: use the free memory pointer in place of msize() to work\r\n                // around a Yul warning that prevents accessing msize directly\r\n                // when the IR pipeline is activated.\r\n                let msizeWords := div(mload(FreeMemoryPointerSlot), OneWord)\r\n\r\n                // Next, compute the cost of the returndatacopy.\r\n                let cost := mul(CostPerWord, returnDataWords)\r\n\r\n                // Then, compute cost of new memory allocation.\r\n                if gt(returnDataWords, msizeWords) {\r\n                    cost := add(\r\n                        cost,\r\n                        add(\r\n                            mul(sub(returnDataWords, msizeWords), CostPerWord),\r\n                            div(\r\n                                sub(\r\n                                    mul(returnDataWords, returnDataWords),\r\n                                    mul(msizeWords, msizeWords)\r\n                                ),\r\n                                MemoryExpansionCoefficient\r\n                            )\r\n                        )\r\n                    )\r\n                }\r\n\r\n                // Finally, add a small constant and compare to gas remaining;\r\n                // bubble up the revert data if enough gas is still available.\r\n                if lt(add(cost, ExtraGasBuffer), gas()) {\r\n                    // Copy returndata to memory; overwrite existing memory.\r\n                    returndatacopy(0, 0, returndatasize())\r\n\r\n                    // Revert, specifying memory region with copied returndata.\r\n                    revert(0, returndatasize())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to determine if the first word of returndata\r\n     *      matches an expected magic value.\r\n     *\r\n     * @param expected The expected magic value.\r\n     *\r\n     * @return A boolean indicating whether the expected value matches the one\r\n     *         located in the first word of returndata.\r\n     */\r\n    function _doesNotMatchMagic(bytes4 expected) internal pure returns (bool) {\r\n        // Declare a variable for the value held by the return data buffer.\r\n        bytes4 result;\r\n\r\n        // Utilize assembly in order to read directly from returndata buffer.\r\n        assembly {\r\n            // Only put result on stack if return data is exactly one word.\r\n            if eq(returndatasize(), OneWord) {\r\n                // Copy the word directly from return data into scratch space.\r\n                returndatacopy(0, 0, OneWord)\r\n\r\n                // Take value from scratch space and place it on the stack.\r\n                result := mload(0)\r\n            }\r\n        }\r\n\r\n        // Return a boolean indicating whether expected and located value match.\r\n        return result != expected;\r\n    }\r\n}\r\n"
    },
    "contracts/seaport/lib/ConsiderationConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/*\r\n * -------------------------- Disambiguation & Other Notes ---------------------\r\n *    - The term \"head\" is used as it is in the documentation for ABI encoding,\r\n *      but only in reference to dynamic types, i.e. it always refers to the\r\n *      offset or pointer to the body of a dynamic type. In calldata, the head\r\n *      is always an offset (relative to the parent object), while in memory,\r\n *      the head is always the pointer to the body. More information found here:\r\n *      https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#argument-encoding\r\n *        - Note that the length of an array is separate from and precedes the\r\n *          head of the array.\r\n *\r\n *    - The term \"body\" is used in place of the term \"head\" used in the ABI\r\n *      documentation. It refers to the start of the data for a dynamic type,\r\n *      e.g. the first word of a struct or the first word of the first element\r\n *      in an array.\r\n *\r\n *    - The term \"pointer\" is used to describe the absolute position of a value\r\n *      and never an offset relative to another value.\r\n *        - The suffix \"_ptr\" refers to a memory pointer.\r\n *        - The suffix \"_cdPtr\" refers to a calldata pointer.\r\n *\r\n *    - The term \"offset\" is used to describe the position of a value relative\r\n *      to some parent value. For example, OrderParameters_conduit_offset is the\r\n *      offset to the \"conduit\" value in the OrderParameters struct relative to\r\n *      the start of the body.\r\n *        - Note: Offsets are used to derive pointers.\r\n *\r\n *    - Some structs have pointers defined for all of their fields in this file.\r\n *      Lines which are commented out are fields that are not used in the\r\n *      codebase but have been left in for readability.\r\n */\r\n\r\n// Declare constants for name, version, and reentrancy sentinel values.\r\n\r\n// Name is right padded, so it touches the length which is left padded. This\r\n// enables writing both values at once. Length goes at byte 95 in memory, and\r\n// name fills bytes 96-109, so both values can be written left-padded to 77.\r\nuint256 constant NameLengthPtr = 77;\r\nuint256 constant NameWithLength = 0x0d436F6E73696465726174696F6E;\r\n\r\nuint256 constant Version = 0x312e31;\r\nuint256 constant Version_length = 3;\r\nuint256 constant Version_shift = 0xe8;\r\n\r\nuint256 constant _NOT_ENTERED = 1;\r\nuint256 constant _ENTERED = 2;\r\n\r\n// Common Offsets\r\n// Offsets for identically positioned fields shared by:\r\n// OfferItem, ConsiderationItem, SpentItem, ReceivedItem\r\n\r\nuint256 constant Common_token_offset = 0x20;\r\nuint256 constant Common_identifier_offset = 0x40;\r\nuint256 constant Common_amount_offset = 0x60;\r\n\r\nuint256 constant ReceivedItem_size = 0xa0;\r\nuint256 constant ReceivedItem_amount_offset = 0x60;\r\nuint256 constant ReceivedItem_recipient_offset = 0x80;\r\n\r\nuint256 constant ReceivedItem_CommonParams_size = 0x60;\r\n\r\nuint256 constant ConsiderationItem_recipient_offset = 0xa0;\r\n// Store the same constant in an abbreviated format for a line length fix.\r\nuint256 constant ConsiderItem_recipient_offset = 0xa0;\r\n\r\nuint256 constant Execution_offerer_offset = 0x20;\r\nuint256 constant Execution_conduit_offset = 0x40;\r\n\r\nuint256 constant InvalidFulfillmentComponentData_error_signature = (\r\n    0x7fda727900000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InvalidFulfillmentComponentData_error_len = 0x04;\r\n\r\nuint256 constant Panic_error_signature = (\r\n    0x4e487b7100000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant Panic_error_offset = 0x04;\r\nuint256 constant Panic_error_length = 0x24;\r\nuint256 constant Panic_arithmetic = 0x11;\r\n\r\nuint256 constant MissingItemAmount_error_signature = (\r\n    0x91b3e51400000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant MissingItemAmount_error_len = 0x04;\r\n\r\nuint256 constant OrderParameters_offer_head_offset = 0x40;\r\nuint256 constant OrderParameters_consideration_head_offset = 0x60;\r\nuint256 constant OrderParameters_conduit_offset = 0x120;\r\nuint256 constant OrderParameters_counter_offset = 0x140;\r\n\r\nuint256 constant Fulfillment_itemIndex_offset = 0x20;\r\n\r\nuint256 constant AdvancedOrder_numerator_offset = 0x20;\r\n\r\nuint256 constant AlmostOneWord = 0x1f;\r\nuint256 constant OneWord = 0x20;\r\nuint256 constant TwoWords = 0x40;\r\nuint256 constant ThreeWords = 0x60;\r\nuint256 constant FourWords = 0x80;\r\nuint256 constant FiveWords = 0xa0;\r\n\r\nuint256 constant FreeMemoryPointerSlot = 0x40;\r\nuint256 constant ZeroSlot = 0x60;\r\nuint256 constant DefaultFreeMemoryPointer = 0x80;\r\n\r\nuint256 constant Slot0x80 = 0x80;\r\nuint256 constant Slot0xA0 = 0xa0;\r\n\r\nuint256 constant BasicOrder_endAmount_cdPtr = 0x104;\r\nuint256 constant BasicOrder_common_params_size = 0xa0;\r\nuint256 constant BasicOrder_considerationHashesArray_ptr = 0x160;\r\n\r\nuint256 constant EIP712_Order_size = 0x180;\r\nuint256 constant EIP712_OfferItem_size = 0xc0;\r\nuint256 constant EIP712_ConsiderationItem_size = 0xe0;\r\nuint256 constant AdditionalRecipients_size = 0x40;\r\n\r\nuint256 constant EIP712_DomainSeparator_offset = 0x02;\r\nuint256 constant EIP712_OrderHash_offset = 0x22;\r\nuint256 constant EIP712_DigestPayload_size = 0x42;\r\n\r\nuint256 constant receivedItemsHash_ptr = 0x60;\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  data for OrderFulfilled\r\n *\r\n *   event OrderFulfilled(\r\n *     bytes32 orderHash,\r\n *     address indexed offerer,\r\n *     address indexed zone,\r\n *     address fulfiller,\r\n *     SpentItem[] offer,\r\n *       > (itemType, token, id, amount)\r\n *     ReceivedItem[] consideration\r\n *       > (itemType, token, id, amount, recipient)\r\n *   )\r\n *\r\n *  - 0x00: orderHash\r\n *  - 0x20: fulfiller\r\n *  - 0x40: offer offset (0x80)\r\n *  - 0x60: consideration offset (0x120)\r\n *  - 0x80: offer.length (1)\r\n *  - 0xa0: offerItemType\r\n *  - 0xc0: offerToken\r\n *  - 0xe0: offerIdentifier\r\n *  - 0x100: offerAmount\r\n *  - 0x120: consideration.length (1 + additionalRecipients.length)\r\n *  - 0x140: considerationItemType\r\n *  - 0x160: considerationToken\r\n *  - 0x180: considerationIdentifier\r\n *  - 0x1a0: considerationAmount\r\n *  - 0x1c0: considerationRecipient\r\n *  - ...\r\n */\r\n\r\n// Minimum length of the OrderFulfilled event data.\r\n// Must be added to the size of the ReceivedItem array for additionalRecipients\r\n// (0xa0 * additionalRecipients.length) to calculate full size of the buffer.\r\nuint256 constant OrderFulfilled_baseSize = 0x1e0;\r\nuint256 constant OrderFulfilled_selector = (\r\n    0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31\r\n);\r\n\r\n// Minimum offset in memory to OrderFulfilled event data.\r\n// Must be added to the size of the EIP712 hash array for additionalRecipients\r\n// (32 * additionalRecipients.length) to calculate the pointer to event data.\r\nuint256 constant OrderFulfilled_baseOffset = 0x180;\r\nuint256 constant OrderFulfilled_consideration_length_baseOffset = 0x2a0;\r\nuint256 constant OrderFulfilled_offer_length_baseOffset = 0x200;\r\n\r\n// uint256 constant OrderFulfilled_orderHash_offset = 0x00;\r\nuint256 constant OrderFulfilled_fulfiller_offset = 0x20;\r\nuint256 constant OrderFulfilled_offer_head_offset = 0x40;\r\nuint256 constant OrderFulfilled_offer_body_offset = 0x80;\r\nuint256 constant OrderFulfilled_consideration_head_offset = 0x60;\r\nuint256 constant OrderFulfilled_consideration_body_offset = 0x120;\r\n\r\n// BasicOrderParameters\r\nuint256 constant BasicOrder_parameters_cdPtr = 0x04;\r\nuint256 constant BasicOrder_considerationToken_cdPtr = 0x24;\r\n// uint256 constant BasicOrder_considerationIdentifier_cdPtr = 0x44;\r\nuint256 constant BasicOrder_considerationAmount_cdPtr = 0x64;\r\nuint256 constant BasicOrder_offerer_cdPtr = 0x84;\r\nuint256 constant BasicOrder_zone_cdPtr = 0xa4;\r\nuint256 constant BasicOrder_offerToken_cdPtr = 0xc4;\r\n// uint256 constant BasicOrder_offerIdentifier_cdPtr = 0xe4;\r\nuint256 constant BasicOrder_offerAmount_cdPtr = 0x104;\r\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\r\nuint256 constant BasicOrder_startTime_cdPtr = 0x144;\r\n// uint256 constant BasicOrder_endTime_cdPtr = 0x164;\r\n// uint256 constant BasicOrder_zoneHash_cdPtr = 0x184;\r\n// uint256 constant BasicOrder_salt_cdPtr = 0x1a4;\r\nuint256 constant BasicOrder_offererConduit_cdPtr = 0x1c4;\r\nuint256 constant BasicOrder_fulfillerConduit_cdPtr = 0x1e4;\r\nuint256 constant BasicOrder_totalOriginalAdditionalRecipients_cdPtr = 0x204;\r\nuint256 constant BasicOrder_additionalRecipients_head_cdPtr = 0x224;\r\nuint256 constant BasicOrder_signature_cdPtr = 0x244;\r\nuint256 constant BasicOrder_additionalRecipients_length_cdPtr = 0x264;\r\nuint256 constant BasicOrder_additionalRecipients_data_cdPtr = 0x284;\r\n\r\nuint256 constant BasicOrder_parameters_ptr = 0x20;\r\n\r\nuint256 constant BasicOrder_basicOrderType_range = 0x18; // 24 values\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  EIP712 data for ConsiderationItem\r\n *   - 0x80: ConsiderationItem EIP-712 typehash (constant)\r\n *   - 0xa0: itemType\r\n *   - 0xc0: token\r\n *   - 0xe0: identifier\r\n *   - 0x100: startAmount\r\n *   - 0x120: endAmount\r\n *   - 0x140: recipient\r\n */\r\nuint256 constant BasicOrder_considerationItem_typeHash_ptr = 0x80; // memoryPtr\r\nuint256 constant BasicOrder_considerationItem_itemType_ptr = 0xa0;\r\nuint256 constant BasicOrder_considerationItem_token_ptr = 0xc0;\r\nuint256 constant BasicOrder_considerationItem_identifier_ptr = 0xe0;\r\nuint256 constant BasicOrder_considerationItem_startAmount_ptr = 0x100;\r\nuint256 constant BasicOrder_considerationItem_endAmount_ptr = 0x120;\r\n// uint256 constant BasicOrder_considerationItem_recipient_ptr = 0x140;\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  EIP712 data for OfferItem\r\n *   - 0x80:  OfferItem EIP-712 typehash (constant)\r\n *   - 0xa0:  itemType\r\n *   - 0xc0:  token\r\n *   - 0xe0:  identifier (reused for offeredItemsHash)\r\n *   - 0x100: startAmount\r\n *   - 0x120: endAmount\r\n */\r\nuint256 constant BasicOrder_offerItem_typeHash_ptr = DefaultFreeMemoryPointer;\r\nuint256 constant BasicOrder_offerItem_itemType_ptr = 0xa0;\r\nuint256 constant BasicOrder_offerItem_token_ptr = 0xc0;\r\n// uint256 constant BasicOrder_offerItem_identifier_ptr = 0xe0;\r\n// uint256 constant BasicOrder_offerItem_startAmount_ptr = 0x100;\r\nuint256 constant BasicOrder_offerItem_endAmount_ptr = 0x120;\r\n\r\n/*\r\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\r\n *  EIP712 data for Order\r\n *   - 0x80:   Order EIP-712 typehash (constant)\r\n *   - 0xa0:   orderParameters.offerer\r\n *   - 0xc0:   orderParameters.zone\r\n *   - 0xe0:   keccak256(abi.encodePacked(offerHashes))\r\n *   - 0x100:  keccak256(abi.encodePacked(considerationHashes))\r\n *   - 0x120:  orderType\r\n *   - 0x140:  startTime\r\n *   - 0x160:  endTime\r\n *   - 0x180:  zoneHash\r\n *   - 0x1a0:  salt\r\n *   - 0x1c0:  conduit\r\n *   - 0x1e0:  _counters[orderParameters.offerer] (from storage)\r\n */\r\nuint256 constant BasicOrder_order_typeHash_ptr = 0x80;\r\nuint256 constant BasicOrder_order_offerer_ptr = 0xa0;\r\n// uint256 constant BasicOrder_order_zone_ptr = 0xc0;\r\nuint256 constant BasicOrder_order_offerHashes_ptr = 0xe0;\r\nuint256 constant BasicOrder_order_considerationHashes_ptr = 0x100;\r\nuint256 constant BasicOrder_order_orderType_ptr = 0x120;\r\nuint256 constant BasicOrder_order_startTime_ptr = 0x140;\r\n// uint256 constant BasicOrder_order_endTime_ptr = 0x160;\r\n// uint256 constant BasicOrder_order_zoneHash_ptr = 0x180;\r\n// uint256 constant BasicOrder_order_salt_ptr = 0x1a0;\r\n// uint256 constant BasicOrder_order_conduitKey_ptr = 0x1c0;\r\nuint256 constant BasicOrder_order_counter_ptr = 0x1e0;\r\nuint256 constant BasicOrder_additionalRecipients_head_ptr = 0x240;\r\nuint256 constant BasicOrder_signature_ptr = 0x260;\r\n\r\n// Signature-related\r\nbytes32 constant EIP2098_allButHighestBitMask = (\r\n    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\r\n);\r\nbytes32 constant ECDSA_twentySeventhAndTwentyEighthBytesSet = (\r\n    0x0000000000000000000000000000000000000000000000000000000101000000\r\n);\r\nuint256 constant ECDSA_MaxLength = 65;\r\nuint256 constant ECDSA_signature_s_offset = 0x40;\r\nuint256 constant ECDSA_signature_v_offset = 0x60;\r\n\r\nbytes32 constant EIP1271_isValidSignature_selector = (\r\n    0x1626ba7e00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant EIP1271_isValidSignature_signatureHead_negativeOffset = 0x20;\r\nuint256 constant EIP1271_isValidSignature_digest_negativeOffset = 0x40;\r\nuint256 constant EIP1271_isValidSignature_selector_negativeOffset = 0x44;\r\nuint256 constant EIP1271_isValidSignature_calldata_baseLength = 0x64;\r\n\r\nuint256 constant EIP1271_isValidSignature_signature_head_offset = 0x40;\r\n\r\n// abi.encodeWithSignature(\"NoContract(address)\")\r\nuint256 constant NoContract_error_signature = (\r\n    0x5f15d67200000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant NoContract_error_sig_ptr = 0x0;\r\nuint256 constant NoContract_error_token_ptr = 0x4;\r\nuint256 constant NoContract_error_length = 0x24; // 4 + 32 == 36\r\n\r\nuint256 constant EIP_712_PREFIX = (\r\n    0x1901000000000000000000000000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant ExtraGasBuffer = 0x20;\r\nuint256 constant CostPerWord = 3;\r\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\r\n\r\nuint256 constant Create2AddressDerivation_ptr = 0x0b;\r\nuint256 constant Create2AddressDerivation_length = 0x55;\r\n\r\nuint256 constant MaskOverByteTwelve = (\r\n    0x0000000000000000000000ff0000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant MaskOverLastTwentyBytes = (\r\n    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff\r\n);\r\n\r\nuint256 constant MaskOverFirstFourBytes = (\r\n    0xffffffff00000000000000000000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant Conduit_execute_signature = (\r\n    0x4ce34aa200000000000000000000000000000000000000000000000000000000\r\n);\r\n\r\nuint256 constant MaxUint8 = 0xff;\r\nuint256 constant MaxUint120 = 0xffffffffffffffffffffffffffffff;\r\n\r\nuint256 constant Conduit_execute_ConduitTransfer_ptr = 0x20;\r\nuint256 constant Conduit_execute_ConduitTransfer_length = 0x01;\r\n\r\nuint256 constant Conduit_execute_ConduitTransfer_offset_ptr = 0x04;\r\nuint256 constant Conduit_execute_ConduitTransfer_length_ptr = 0x24;\r\nuint256 constant Conduit_execute_transferItemType_ptr = 0x44;\r\nuint256 constant Conduit_execute_transferToken_ptr = 0x64;\r\nuint256 constant Conduit_execute_transferFrom_ptr = 0x84;\r\nuint256 constant Conduit_execute_transferTo_ptr = 0xa4;\r\nuint256 constant Conduit_execute_transferIdentifier_ptr = 0xc4;\r\nuint256 constant Conduit_execute_transferAmount_ptr = 0xe4;\r\n\r\nuint256 constant OneConduitExecute_size = 0x104;\r\n\r\n// Sentinel value to indicate that the conduit accumulator is not armed.\r\nuint256 constant AccumulatorDisarmed = 0x20;\r\nuint256 constant AccumulatorArmed = 0x40;\r\nuint256 constant Accumulator_conduitKey_ptr = 0x20;\r\nuint256 constant Accumulator_selector_ptr = 0x40;\r\nuint256 constant Accumulator_array_offset_ptr = 0x44;\r\nuint256 constant Accumulator_array_length_ptr = 0x64;\r\n\r\nuint256 constant Accumulator_itemSizeOffsetDifference = 0x3c;\r\n\r\nuint256 constant Accumulator_array_offset = 0x20;\r\nuint256 constant Conduit_transferItem_size = 0xc0;\r\nuint256 constant Conduit_transferItem_token_ptr = 0x20;\r\nuint256 constant Conduit_transferItem_from_ptr = 0x40;\r\nuint256 constant Conduit_transferItem_to_ptr = 0x60;\r\nuint256 constant Conduit_transferItem_identifier_ptr = 0x80;\r\nuint256 constant Conduit_transferItem_amount_ptr = 0xa0;\r\n\r\n// Declare constant for errors related to amount derivation.\r\n// error InexactFraction() @ AmountDerivationErrors.sol\r\nuint256 constant InexactFraction_error_signature = (\r\n    0xc63cf08900000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InexactFraction_error_len = 0x04;\r\n\r\n// Declare constant for errors related to signature verification.\r\nuint256 constant Ecrecover_precompile = 1;\r\nuint256 constant Ecrecover_args_size = 0x80;\r\nuint256 constant Signature_lower_v = 27;\r\n\r\n// error BadSignatureV(uint8) @ SignatureVerificationErrors.sol\r\nuint256 constant BadSignatureV_error_signature = (\r\n    0x1f003d0a00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant BadSignatureV_error_offset = 0x04;\r\nuint256 constant BadSignatureV_error_length = 0x24;\r\n\r\n// error InvalidSigner() @ SignatureVerificationErrors.sol\r\nuint256 constant InvalidSigner_error_signature = (\r\n    0x815e1d6400000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InvalidSigner_error_length = 0x04;\r\n\r\n// error InvalidSignature() @ SignatureVerificationErrors.sol\r\nuint256 constant InvalidSignature_error_signature = (\r\n    0x8baa579f00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant InvalidSignature_error_length = 0x04;\r\n\r\n// error BadContractSignature() @ SignatureVerificationErrors.sol\r\nuint256 constant BadContractSignature_error_signature = (\r\n    0x4f7fb80d00000000000000000000000000000000000000000000000000000000\r\n);\r\nuint256 constant BadContractSignature_error_length = 0x04;\r\n\r\nuint256 constant NumBitsAfterSelector = 0xe0;\r\n\r\n// 69 is the lowest modulus for which the remainder\r\n// of every selector other than the two match functions\r\n// is greater than those of the match functions.\r\nuint256 constant NonMatchSelector_MagicModulus = 69;\r\n// Of the two match function selectors, the highest\r\n// remainder modulo 69 is 29.\r\nuint256 constant NonMatchSelector_MagicRemainder = 0x1d;\r\n"
    },
    "contracts/mint/lib/AxelarSeaNftBase.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\n// import \"../meta-transactions/MetaTransactionVerifier.sol\";\r\nimport \"./IAxelarSeaNftInitializable.sol\";\r\nimport \"../AxelarSeaProjectRegistry.sol\";\r\n\r\nimport \"./AxelarSeaMintingErrors.sol\";\r\n\r\n// Use Upgradeable for minimal clone pattern but actually is is not upgradeable\r\nabstract contract AxelarSeaNftBase is OwnableUpgradeable, IAxelarSeaNftInitializable, ReentrancyGuardUpgradeable, IERC2981, ERC165 {\r\n  using Strings for uint256;\r\n  using SafeTransferLib for IERC20;\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  bool public newMinterStopped; // default to false\r\n\r\n  AxelarSeaProjectRegistry public registry;\r\n  address public fundAddress;\r\n\r\n  bytes32 public collectionId;\r\n  string private nftName;\r\n  string private nftSymbol;\r\n  uint256 public exclusiveLevel;\r\n  uint256 public maxSupply;\r\n\r\n  mapping(address => bool) public exclusiveContract;\r\n  EnumerableSet.AddressSet private minters;\r\n  mapping(address => uint256) public walletMinted;\r\n\r\n  uint256 public mintFeeOverride; // default to 0\r\n  bool public enableMintFeeOverride; // default to false\r\n\r\n  string public baseTokenUriPrefix;\r\n  string public baseTokenUriSuffix;\r\n\r\n  address public royaltyReceiver;\r\n  uint256 public royaltyPercentage;\r\n\r\n  modifier onlyMinter(address addr) {\r\n    require(minters.contains(addr), \"Forbidden\");\r\n    _;\r\n  }\r\n\r\n  function initialize(\r\n    address owner,\r\n    bytes32 _collectionId,\r\n    uint256 _exclusiveLevel,\r\n    uint256 _maxSupply,\r\n    string memory _nftName,\r\n    string memory _nftSymbol\r\n  ) public initializer {\r\n    registry = AxelarSeaProjectRegistry(msg.sender);\r\n    collectionId = _collectionId;\r\n    exclusiveLevel = _exclusiveLevel;\r\n    maxSupply = _maxSupply;\r\n    nftName = _nftName;\r\n    nftSymbol = _nftSymbol;\r\n\r\n    fundAddress = owner;\r\n\r\n    _transferOwnership(owner);\r\n    __ReentrancyGuard_init();\r\n  }\r\n\r\n  event StopNewMinter();\r\n  function stopNewMinter() public onlyOwner {\r\n    newMinterStopped = true;\r\n    emit StopNewMinter();\r\n  }\r\n\r\n  event SetMaxSupply(uint256 supply);\r\n  function setMaxSupply(uint256 newSupply) public onlyOwner {\r\n    if (newMinterStopped) {\r\n      revert Forbidden();\r\n    }\r\n\r\n    maxSupply = newSupply;\r\n    emit SetMaxSupply(newSupply);\r\n  }\r\n\r\n  event SetMinter(address indexed minter, bool enabled);\r\n  function setMinter(address minter, bool enabled) public onlyOwner {\r\n    if (newMinterStopped) {\r\n      revert Forbidden();\r\n    }\r\n\r\n    if (enabled) {\r\n      minters.add(minter);\r\n    } else {\r\n      minters.remove(minter);\r\n    }\r\n    \r\n    emit SetMinter(minter, enabled);\r\n  }\r\n\r\n  function isMinter(address minter) public view returns(bool) {\r\n    return minters.contains(minter);\r\n  }\r\n\r\n  function mintersLength() public view returns(uint256) {\r\n    return minters.length();\r\n  }\r\n\r\n  function getMinters(uint256 start, uint256 end) public view returns(address[] memory) {\r\n    uint256 length = end - start;\r\n    address[] memory result = new address[](length);\r\n\r\n    unchecked {\r\n      for (uint256 i = 0; i < length; i++) {\r\n        result[i] = minters.at(start + i);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function getAllMinters() public view returns(address[] memory) {\r\n    return getMinters(0, mintersLength());\r\n  }\r\n\r\n  function deployMinter(address template, bytes memory data) public nonReentrant returns(IAxelarSeaMinterInitializable minter) {\r\n    if (msg.sender != owner() && msg.sender != address(registry)) {\r\n      revert Forbidden();\r\n    }\r\n\r\n    if (!registry.minterTemplates(template)) {\r\n      revert InvalidTemplate(template);\r\n    }\r\n\r\n    minter = IAxelarSeaMinterInitializable(Clones.clone(template));\r\n    minter.initialize(address(this), owner(), data);\r\n\r\n    minters.add(address(minter));\r\n    emit SetMinter(address(minter), true);\r\n  }\r\n\r\n  event SetExclusiveContract(address indexed addr, bool enabled);\r\n  function setExclusiveContract(address addr, bool enabled) public {\r\n    if (msg.sender != owner() && !registry.operators(msg.sender)) {\r\n      revert Forbidden();\r\n    }\r\n\r\n    exclusiveContract[addr] = enabled;\r\n    emit SetExclusiveContract(addr, enabled);\r\n  }\r\n\r\n  event OverrideMintFee(address indexed overrider, uint256 newFee, bool overrided);\r\n  function overrideMintFee(uint256 newFee, bool overrided) public {\r\n    if (!registry.operators(msg.sender)) {\r\n      revert Forbidden();\r\n    }\r\n\r\n    enableMintFeeOverride = overrided;\r\n    mintFeeOverride = newFee;\r\n    emit OverrideMintFee(msg.sender, newFee, overrided);\r\n  }\r\n\r\n  function _beforeTokenTransferCheck(address from) internal view {\r\n    if (from != address(0)) {\r\n      // Produce human readable message to be easier for debug\r\n      require(exclusiveLevel < 2, \"Soulbound\");\r\n      require(exclusiveLevel < 1 || registry.axelarSeaContract(msg.sender) || exclusiveContract[msg.sender], \"Exclusive to AxelarSea\");\r\n    }\r\n  }\r\n\r\n  function _mintInternal(address to, uint256 maxAmount, uint256 amount) internal virtual;\r\n\r\n  function mintFee() public view returns(uint256) {\r\n    return (enableMintFeeOverride ? mintFeeOverride : registry.baseMintFee());\r\n  }\r\n\r\n  function mint(address to, uint256 maxAmount, uint256 amount) public onlyMinter(msg.sender) nonReentrant {\r\n    _mintInternal(to, maxAmount, amount);\r\n  }\r\n\r\n  function setBaseTokenUriPrefix(string memory newPrefix) public onlyOwner {\r\n    baseTokenUriPrefix = newPrefix;\r\n  }\r\n\r\n  function setBaseTokenUriSuffix(string memory newSuffix) public onlyOwner {\r\n    baseTokenUriSuffix = newSuffix;\r\n  }\r\n\r\n  function recoverETH() external onlyOwner {\r\n    (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n\r\n    if (!success) {\r\n      revert TransferFailed();\r\n    }\r\n  }\r\n\r\n  function recoverERC20(IERC20 token) external onlyOwner {\r\n    token.safeTransfer(msg.sender, token.balanceOf(address(this)));\r\n  }\r\n\r\n  function exists(uint256 tokenId) public virtual view returns(bool);\r\n\r\n  function projectId() public view returns(bytes32) {\r\n    return registry.nftProject(address(this));\r\n  }\r\n\r\n  // Opensea standard contractURI\r\n  function contractURI() external view returns (string memory) {\r\n    return string(abi.encodePacked(registry.baseContractURI(), uint256(collectionId).toHexString()));\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-tokenURI}.\r\n    */\r\n  function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\r\n    require(exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n    if (bytes(baseTokenUriPrefix).length == 0) {\r\n      return string(abi.encodePacked(registry.baseTokenURI(), uint256(collectionId).toHexString(), \"/\", tokenId.toString()));\r\n    } else {\r\n      return string(abi.encodePacked(baseTokenUriPrefix, tokenId.toString(), baseTokenUriSuffix));\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-name}.\r\n    */\r\n  function name() public view virtual returns (string memory) {\r\n    return nftName;\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-symbol}.\r\n    */\r\n  function symbol() public view virtual returns (string memory) {\r\n    return nftSymbol;\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC165-supportsInterface}.\r\n    */\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n    return super.supportsInterface(interfaceId) || interfaceId == type(IERC2981).interfaceId;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\r\n    * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\r\n    */\r\n  function royaltyInfo(uint256, uint256 salePrice) external view virtual override returns (address receiver, uint256 royaltyAmount) {\r\n    receiver = royaltyReceiver;\r\n    royaltyAmount = salePrice * royaltyPercentage / 1e18;\r\n  }\r\n\r\n  event SetRoyalty(address indexed receiver, uint256 indexed percentage);\r\n  function setRoyalty(address receiver, uint256 percentage) public onlyOwner {\r\n    if (percentage > 1e18) revert Forbidden();\r\n\r\n    royaltyReceiver = receiver;\r\n    royaltyPercentage = percentage;\r\n\r\n    emit SetRoyalty(royaltyReceiver, royaltyPercentage);\r\n  }\r\n}"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/mint/lib/AxelarSeaNftMinterBase.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./IAxelarSeaNftInitializable.sol\";\r\nimport \"./AxelarSeaNftBase.sol\";\r\n\r\n// Use Upgradeable for minimal clone pattern but actually is is not upgradeable\r\nabstract contract AxelarSeaNftMinterBase is OwnableUpgradeable, ReentrancyGuardUpgradeable, IAxelarSeaMinterInitializable {\r\n  using SafeTransferLib for IERC20;\r\n\r\n  struct AxelarSeaNftPriceData {\r\n    uint256 mintPriceStart;\r\n    uint256 mintPriceEnd;\r\n    uint256 mintPriceStep;\r\n    uint256 mintStart;\r\n    uint256 mintEnd;\r\n    IERC20 mintTokenAddress;\r\n  }\r\n\r\n  AxelarSeaProjectRegistry public registry;\r\n  AxelarSeaNftPriceData public priceData;\r\n  AxelarSeaNftBase public nft;\r\n\r\n  function _updateConfig(bytes memory data) internal virtual;\r\n\r\n  function _updateConfigAndCheckTime(bytes memory data) internal {\r\n    _updateConfig(data);\r\n\r\n    require(priceData.mintEnd >= priceData.mintStart, \"Invalid timestamp\");\r\n  }\r\n\r\n  function updateConfig(\r\n    bytes memory data\r\n  ) public onlyOwner {\r\n    _updateConfigAndCheckTime(data);\r\n  }\r\n\r\n  function initialize(\r\n    address targetNft,\r\n    address owner,\r\n    bytes memory data\r\n  ) external initializer {\r\n    nft = AxelarSeaNftBase(targetNft);\r\n    registry = nft.registry();\r\n\r\n    _updateConfigAndCheckTime(data);\r\n    _transferOwnership(owner);\r\n    __ReentrancyGuard_init();\r\n  }\r\n\r\n  function recoverETH() external onlyOwner {\r\n    (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n\r\n    if (!success) {\r\n      revert TransferFailed();\r\n    }\r\n  }\r\n\r\n  function recoverERC20(IERC20 token) external onlyOwner {\r\n    token.safeTransfer(msg.sender, token.balanceOf(address(this)));\r\n  }\r\n}\r\n\r\nabstract contract AxelarSeaNftMinterWithPayment is AxelarSeaNftMinterBase {\r\n  function _pay(address from, uint256 amount) internal virtual;\r\n\r\n  function mintFee() public view returns(uint256) {\r\n    return nft.mintFee();\r\n  }\r\n\r\n  function mintPrice() public view returns(uint256) {\r\n    unchecked {\r\n      if (priceData.mintPriceStep == 0) {\r\n        return priceData.mintPriceStart;\r\n      }\r\n\r\n      if (block.timestamp < priceData.mintStart) {\r\n        return priceData.mintPriceStart;\r\n      }\r\n      \r\n      // block.timestamp >= mintStart\r\n      uint256 priceChange = priceData.mintPriceStep * (block.timestamp - priceData.mintStart);\r\n      uint256 priceDiff = priceData.mintPriceEnd <= priceData.mintPriceStart ? priceData.mintPriceStart - priceData.mintPriceEnd : priceData.mintPriceEnd - priceData.mintPriceStart;\r\n\r\n      if (priceChange < priceDiff) {\r\n        return priceData.mintPriceEnd <= priceData.mintPriceStart ? priceData.mintPriceStart - priceChange : priceData.mintPriceStart + priceChange; \r\n      } else {\r\n        return priceData.mintPriceEnd;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nabstract contract AxelarSeaNftMinterWithTokenPayment is AxelarSeaNftMinterWithPayment {\r\n  using SafeTransferLib for IERC20;\r\n\r\n  function _pay(address from, uint256 amount) internal override {\r\n    if (block.timestamp < priceData.mintStart || block.timestamp > priceData.mintEnd) {\r\n      revert NotMintingTime();\r\n    }\r\n\r\n    if (priceData.mintPriceStart > 0 || priceData.mintPriceEnd > 0) {\r\n      uint256 totalPrice = mintPrice() * amount;\r\n      uint256 fee = totalPrice * mintFee() / 1e18;\r\n\r\n      priceData.mintTokenAddress.safeTransferFrom(from, registry.feeAddress(), fee);\r\n      priceData.mintTokenAddress.safeTransferFrom(from, nft.fundAddress(), totalPrice - fee);\r\n    }\r\n\r\n    if (msg.value > 0) {\r\n      (bool success, ) = payable(msg.sender).call{value: msg.value}(\"\");\r\n      if (!success) {\r\n        revert TransferFailed();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nabstract contract AxelarSeaNftMinterWithNativePayment is AxelarSeaNftMinterWithPayment {\r\n  function _pay(address, uint256 amount) internal override {\r\n    if (block.timestamp < priceData.mintStart || block.timestamp > priceData.mintEnd) {\r\n      revert NotMintingTime();\r\n    }\r\n\r\n    if (priceData.mintPriceStart > 0 || priceData.mintPriceEnd > 0) {\r\n      uint256 totalPrice = mintPrice() * amount;\r\n      uint256 fee = totalPrice * mintFee() / 1e18;\r\n\r\n      // Check for underflow\r\n      uint256 totalPriceWithoutFee = totalPrice - fee;\r\n\r\n      // Will revert if msg.value < totalPrice without using more gas for checking\r\n      uint256 remaining = msg.value - totalPrice;\r\n\r\n      address feeAddress = registry.feeAddress();\r\n      address fundAddress = nft.fundAddress();\r\n\r\n      bool success;\r\n\r\n      assembly {\r\n        // Transfer the ETH and store if it succeeded or not.\r\n        success := call(gas(), feeAddress, fee, 0, 0, 0, 0)\r\n        success := and(success, call(gas(), fundAddress, totalPriceWithoutFee, 0, 0, 0, 0))\r\n        if remaining {\r\n          success := and(success, call(gas(), caller(), remaining, 0, 0, 0, 0))\r\n        }\r\n      }\r\n\r\n      if (!success) {\r\n        revert TransferFailed();\r\n      }\r\n    }\r\n  }\r\n}"
    },
    "contracts/mint/AxelarSeaNftSignatureMinter.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./lib/AxelarSeaNftMinterBase.sol\";\r\n\r\nabstract contract AxelarSeaNftSignatureMinterBase is AxelarSeaNftMinterWithPayment, MetaTransactionVerifier {\r\n  using SafeTransferLib for IERC20;\r\n\r\n  address public operator;\r\n\r\n  event UpdateConfigSignatureMinter(\r\n    address indexed nftAddress,\r\n    bytes32 indexed collectionId,\r\n    bytes32 indexed projectId,\r\n    address operator,\r\n    AxelarSeaNftPriceData priceData\r\n  );\r\n  function _updateConfig(\r\n    bytes memory data\r\n  ) internal override {\r\n    (operator, priceData) = abi.decode(data, (address, AxelarSeaNftPriceData));\r\n\r\n    emit UpdateConfigSignatureMinter(\r\n      address(nft),\r\n      nft.collectionId(),\r\n      nft.projectId(),\r\n      operator,\r\n      priceData\r\n    );\r\n  }\r\n\r\n  function mintSignature(\r\n    uint256 nonce,\r\n    bytes calldata payload,\r\n    bytes calldata signature\r\n  ) public payable nonReentrant {\r\n    verifyMetaTransaction(\r\n      operator,\r\n      nonce,\r\n      payload,\r\n      signature\r\n    );\r\n\r\n    (address to, uint256 maxAmount, uint256 amount) = abi.decode(payload, (address, uint256, uint256));\r\n    _pay(msg.sender, amount);\r\n    nft.mint(to, maxAmount, amount);\r\n  }\r\n}\r\n\r\ncontract AxelarSeaNftSignatureMinter is AxelarSeaNftSignatureMinterBase, AxelarSeaNftMinterWithTokenPayment {}\r\ncontract AxelarSeaNftSignatureMinterNative is AxelarSeaNftSignatureMinterBase, AxelarSeaNftMinterWithNativePayment {}\r\n"
    },
    "contracts/mint/AxelarSeaNftPublicMinter.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./lib/AxelarSeaNftMinterBase.sol\";\r\n\r\nabstract contract AxelarSeaNftPublicMinterBase is AxelarSeaNftMinterWithPayment {\r\n  using SafeTransferLib for IERC20;\r\n\r\n  uint256 public maxMintPerWallet;\r\n\r\n  event UpdateConfigPublicMinter(\r\n    address indexed nftAddress,\r\n    bytes32 indexed collectionId,\r\n    bytes32 indexed projectId,\r\n    uint256 maxMintPerWallet,\r\n    AxelarSeaNftPriceData priceData\r\n  );\r\n  function _updateConfig(\r\n    bytes memory data\r\n  ) internal override {\r\n    (maxMintPerWallet, priceData) = abi.decode(data, (uint256, AxelarSeaNftPriceData));\r\n\r\n    emit UpdateConfigPublicMinter(\r\n      address(nft),\r\n      nft.collectionId(),\r\n      nft.projectId(),\r\n      maxMintPerWallet,\r\n      priceData\r\n    );\r\n  }\r\n\r\n  function mintPublic(address to, uint256 amount) public payable nonReentrant {\r\n    _pay(msg.sender, amount);\r\n    nft.mint(to, maxMintPerWallet, amount);\r\n  }\r\n}\r\n\r\ncontract AxelarSeaNftPublicMinter is AxelarSeaNftPublicMinterBase, AxelarSeaNftMinterWithTokenPayment {}\r\ncontract AxelarSeaNftPublicMinterNative is AxelarSeaNftPublicMinterBase, AxelarSeaNftMinterWithNativePayment {}\r\n"
    },
    "contracts/mint/AxelarSeaNftMerkleMinter.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport \"./lib/AxelarSeaNftMinterBase.sol\";\r\n\r\nabstract contract AxelarSeaNftMerkleMinterBase is AxelarSeaNftMinterWithPayment {\r\n  using SafeTransferLib for IERC20;\r\n\r\n  bytes32 public merkleRoot;\r\n\r\n  event UpdateConfigMerkleMinter(\r\n    address indexed nftAddress,\r\n    bytes32 indexed collectionId,\r\n    bytes32 indexed projectId,\r\n    bytes32 merkleRoot,\r\n    AxelarSeaNftPriceData priceData\r\n  );\r\n  function _updateConfig(\r\n    bytes memory data\r\n  ) internal override {\r\n    (merkleRoot, priceData) = abi.decode(data, (bytes32, AxelarSeaNftPriceData));\r\n\r\n    emit UpdateConfigMerkleMinter(\r\n      address(nft),\r\n      nft.collectionId(),\r\n      nft.projectId(),\r\n      merkleRoot,\r\n      priceData\r\n    );\r\n  }\r\n\r\n  function checkMerkle(address toCheck, uint256 maxAmount, bytes32[] calldata proof) public view returns(bool) {\r\n    return MerkleProof.verify(proof, merkleRoot, keccak256(abi.encodePacked(toCheck, maxAmount)));\r\n  }\r\n\r\n  function mintMerkle(address to, uint256 maxAmount, uint256 amount, bytes32[] calldata proof) public payable nonReentrant {\r\n    if(!checkMerkle(to, maxAmount, proof)) revert NotWhitelisted();\r\n    _pay(msg.sender, amount);\r\n    nft.mint(to, maxAmount, amount);\r\n  }\r\n}\r\n\r\ncontract AxelarSeaNftMerkleMinter is AxelarSeaNftMerkleMinterBase, AxelarSeaNftMinterWithTokenPayment {}\r\ncontract AxelarSeaNftMerkleMinterNative is AxelarSeaNftMerkleMinterBase, AxelarSeaNftMinterWithNativePayment {}\r\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/nft-bridge/AxelarSeaNftBridgeController.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\n\r\nimport \"./tokens/AxelarSeaERC721.sol\";\r\nimport \"./tokens/AxelarSeaERC1155.sol\";\r\nimport \"./tokens/IAxelarSeaNft.sol\";\r\n\r\nimport \"./IAxelarSeaNftExecutable.sol\";\r\nimport \"./bridges/IAxelarSeaNftBridge.sol\";\r\n\r\ncontract AxelarSeaNftBridgeController is Ownable, ERC721Holder, ERC1155Holder {\r\n  address public immutable erc721Template;\r\n  address public immutable erc1155template;\r\n\r\n  mapping(uint128 => address) public registeredBridge;\r\n  mapping(address => bool) public enabledBridge;\r\n\r\n  mapping(address => uint256) public address2nftId;\r\n  mapping(uint256 => address) public nftId2address;\r\n  mapping(uint256 => bool) public isERC721;\r\n  uint128 public nftIdCounter = 1;\r\n\r\n  modifier onlyRegisteredBridge(address _bridge) {\r\n    require(enabledBridge[_bridge], \"Bridge Forbidden\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _erc721Template,\r\n    address _erc1155template\r\n  ) {\r\n    erc721Template = _erc721Template;\r\n    erc1155template = _erc1155template;\r\n  }\r\n\r\n  event EnableBridge(address indexed caller, address indexed bridge, bool enabled);\r\n  function enableBridge(address _bridge, bool enabled) public onlyOwner {\r\n    enabledBridge[_bridge] = enabled;\r\n    emit EnableBridge(msg.sender, _bridge, enabled);\r\n  }\r\n\r\n  event RegisterBridge(address indexed caller, uint128 indexed chainId, address indexed bridge);\r\n  function registerBridge(uint128 chainId, address _bridge) public onlyOwner {\r\n    registeredBridge[chainId] = _bridge;\r\n    emit RegisterBridge(msg.sender, chainId, _bridge);\r\n\r\n    if (!enabledBridge[_bridge]) {\r\n      enableBridge(_bridge, true);\r\n    }\r\n  }\r\n\r\n  function encodeNftId(uint128 chainId, uint128 nftIdPartial) public pure returns(uint256) {\r\n    return uint256(chainId) << 128 | uint256(nftIdPartial);\r\n  }\r\n\r\n  function decodeNftId(uint256 nftId) public pure returns(uint128 chainId, uint128 nftIdPartial) {\r\n    nftIdPartial = uint128(nftId);\r\n    chainId = uint128(nftId >> 128);\r\n  }\r\n\r\n  event EnableERC721(uint256 indexed nftId, address indexed nftAddress, uint128 indexed chainId);\r\n  event EnableERC1155(uint256 indexed nftId, address indexed nftAddress, uint128 indexed chainId);\r\n  event NewERC721(uint256 indexed nftId, address indexed nftAddress);\r\n  event NewERC1155(uint256 indexed nftId, address indexed nftAddress);\r\n  event Unlock(uint256 indexed nftId, address indexed nftAddress, uint256 indexed tokenId, uint256 amount);\r\n\r\n  function unlockWithPayload(\r\n    uint256 nftId,\r\n    uint256 tokenId, \r\n    uint256 amount,\r\n    string memory from,\r\n    bytes calldata header, // Split for flexibility\r\n    bytes calldata payload\r\n  ) public onlyRegisteredBridge(msg.sender) {\r\n    require(!isERC721[nftId] || amount == 1, \"Forbidden\");\r\n\r\n    uint128 chainId = uint128(nftId >> 128);\r\n    (address to) = abi.decode(header,(address));\r\n    address nft = nftId2address[nftId];\r\n\r\n    if (chainId == block.chainid) {\r\n      if (isERC721[nftId]) {\r\n        IERC721(nft).safeTransferFrom(address(this), to, tokenId);\r\n      } else {\r\n        IERC1155(nft).safeTransferFrom(address(this), to, tokenId, amount, \"\");\r\n      }\r\n    } else {\r\n      IAxelarSeaNft(nft).unlock(to, tokenId, amount);\r\n    }\r\n\r\n    IAxelarSeaNftExecutable(to).execute(nft, chainId, nftId, tokenId, amount, from, payload);\r\n\r\n    emit Unlock(nftId, nft, tokenId, amount);\r\n  }\r\n\r\n  function unlock(\r\n    uint256 nftId,\r\n    uint256 tokenId,\r\n    uint256 amount,\r\n    bytes calldata header // Split for flexibility\r\n  ) public onlyRegisteredBridge(msg.sender) {\r\n    require(!isERC721[nftId] || amount == 1, \"Forbidden\");\r\n\r\n    uint128 chainId = uint128(nftId >> 128);\r\n    (address to) = abi.decode(header,(address));\r\n    address nft = nftId2address[nftId];\r\n\r\n    if (chainId == block.chainid) {\r\n      if (isERC721[nftId]) {\r\n        IERC721(nft).safeTransferFrom(address(this), to, tokenId);\r\n      } else {\r\n        IERC1155(nft).safeTransferFrom(address(this), to, tokenId, amount, \"\");\r\n      }\r\n    } else {\r\n      IAxelarSeaNft(nft).unlock(to, tokenId, amount);\r\n    }\r\n\r\n    emit Unlock(nftId, nft, tokenId, amount);\r\n  }\r\n\r\n  function deployERC721(uint256 nftId, string memory name, string memory symbol) public onlyRegisteredBridge(msg.sender) {\r\n    uint128 chainId = uint128(nftId >> 128);\r\n\r\n    // Deploy if not available\r\n    if (chainId != block.chainid && nftId2address[nftId] == address(0)) {\r\n      address erc721 = Clones.cloneDeterministic(erc721Template, bytes32(nftId));\r\n      AxelarSeaERC721(erc721).initialize(\r\n        address(this),\r\n        nftId,\r\n        name,\r\n        symbol\r\n      );\r\n\r\n      address2nftId[erc721] = nftId;\r\n      nftId2address[nftId] = erc721;\r\n      isERC721[nftId] = true;\r\n\r\n      emit NewERC721(nftId, erc721);\r\n    }\r\n  }\r\n\r\n  function deployERC1155(uint256 nftId) public onlyRegisteredBridge(msg.sender) {\r\n    uint128 chainId = uint128(nftId >> 128);\r\n\r\n    // Deploy if not available\r\n    if (chainId != block.chainid && nftId2address[nftId] == address(0)) {\r\n      address erc1155 = Clones.cloneDeterministic(erc1155template, bytes32(nftId));\r\n      AxelarSeaERC1155(erc1155).initialize(\r\n        address(this),\r\n        nftId\r\n      );\r\n\r\n      address2nftId[erc1155] = nftId;\r\n      nftId2address[nftId] = erc1155;\r\n      isERC721[nftId] = false;\r\n\r\n      emit NewERC1155(nftId, erc1155);\r\n    }\r\n  }\r\n\r\n  function _newNftId() internal returns(uint256) {\r\n    return encodeNftId(uint128(block.chainid), nftIdCounter++);\r\n  }\r\n\r\n  function enable(uint128 chainId, IERC165 nft) public payable {\r\n    uint256 nftId = address2nftId[address(nft)] == 0 ? _newNftId() : address2nftId[address(nft)];\r\n\r\n    if (nft.supportsInterface(0x80ac58cd)) {\r\n      IAxelarSeaNftBridge(registeredBridge[chainId]).bridge{value: msg.value}(chainId, msg.sender, abi.encodeWithSelector(\r\n        AxelarSeaNftBridgeController(address(this)).deployERC721.selector,\r\n        nftId,\r\n        ERC721(address(nft)).name(),\r\n        ERC721(address(nft)).symbol()\r\n      ));\r\n\r\n      isERC721[nftId] = true;\r\n\r\n      emit EnableERC721(nftId, address(nft), chainId);\r\n    } else if (nft.supportsInterface(0xd9b67a26)) {\r\n      IAxelarSeaNftBridge(registeredBridge[chainId]).bridge{value: msg.value}(chainId, msg.sender, abi.encodeWithSelector(\r\n        AxelarSeaNftBridgeController(address(this)).deployERC1155.selector,\r\n        nftId\r\n      ));\r\n\r\n      isERC721[nftId] = false;\r\n\r\n      emit EnableERC1155(nftId, address(nft), chainId);\r\n    } else {\r\n      revert(\"Not supported\");\r\n    }\r\n\r\n    address2nftId[address(nft)] = nftId;\r\n    nftId2address[nftId] = address(nft);\r\n  }\r\n\r\n  function _lock(uint256 nftId, uint256 tokenId, uint256 amount) internal {\r\n    require(!isERC721[nftId] || amount == 1, \"Forbidden\");\r\n    address nft = nftId2address[nftId];\r\n\r\n    if (nftId >> 128 == block.chainid) {\r\n      if (isERC721[nftId]) {\r\n        IERC721(nft).safeTransferFrom(msg.sender, address(this), tokenId);\r\n      } else {\r\n        IERC1155(nft).safeTransferFrom(msg.sender, address(this), tokenId, amount, \"\");\r\n      }\r\n    } else {\r\n      IAxelarSeaNft(nft).lock(msg.sender, tokenId, amount);\r\n    }\r\n  }\r\n\r\n  function bridge(uint128 chainId, uint256 nftId, uint256 tokenId, uint256 amount, bytes calldata header) public payable {\r\n    _lock(nftId, tokenId, amount);\r\n\r\n    IAxelarSeaNftBridge(registeredBridge[chainId]).bridge{value: msg.value}(chainId, msg.sender, abi.encodeWithSelector(\r\n      AxelarSeaNftBridgeController(address(this)).unlock.selector,\r\n      nftId,\r\n      tokenId,\r\n      amount,\r\n      header\r\n    ));\r\n  }\r\n\r\n  function bridgeWithPayload(uint128 chainId, uint256 nftId, uint256 tokenId, uint256 amount, bytes calldata header, bytes calldata payload) public payable {\r\n    _lock(nftId, tokenId, amount);\r\n\r\n    IAxelarSeaNftBridge(registeredBridge[chainId]).bridge{value: msg.value}(chainId, msg.sender, abi.encodeWithSelector(\r\n      AxelarSeaNftBridgeController(address(this)).unlockWithPayload.selector,\r\n      nftId,\r\n      tokenId,\r\n      amount,\r\n      Strings.toHexString(uint160(msg.sender), 20),\r\n      header,\r\n      payload\r\n    ));\r\n  }\r\n}"
    },
    "contracts/nft-bridge/tokens/AxelarSeaERC721.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"./IAxelarSeaNft.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract AxelarSeaERC721 is ERC721, IAxelarSeaNft {\r\n  address public controller;\r\n  uint256 public nftId;\r\n  string private nftName;\r\n  string private nftSymbol;\r\n\r\n  modifier onlyController {\r\n    require(msg.sender == controller, \"Not Controller\");\r\n    _;\r\n  }\r\n\r\n  constructor() ERC721(\"_\", \"_\") {}\r\n\r\n  function contractURI() external view returns (string memory) {\r\n    return string(abi.encodePacked(\"https://api.axelarsea.com/nftbridge/sharedmetadata/\", Strings.toString(nftId)));\r\n  }\r\n\r\n  function initialize(\r\n    address _controller,\r\n    uint256 _nftId,\r\n    string memory _nftName,\r\n    string memory _nftSymbol\r\n  ) public {\r\n    require(controller == address(0), \"Initialized\");\r\n    \r\n    controller = _controller;\r\n    nftId = _nftId;\r\n    nftName = _nftName;\r\n    nftSymbol = _nftSymbol;\r\n  }\r\n\r\n  function unlock(address to, uint256 tokenId, uint256) public override onlyController {\r\n    _safeMint(to, tokenId);\r\n  }\r\n\r\n  function lock(address from, uint256 tokenId, uint256) public override onlyController {\r\n    require(ownerOf(tokenId) == from, \"Not owner\");\r\n    _burn(tokenId);\r\n  }\r\n\r\n  function exists(uint256 tokenId) public view returns(bool) {\r\n    return _exists(tokenId);\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-tokenURI}.\r\n    */\r\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n    require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n    return string(abi.encodePacked(\"https://api.axelarsea.com/nftbridge/tokenmetadata/\", Strings.toString(nftId), \"/\", Strings.toString(tokenId)));\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-name}.\r\n    */\r\n  function name() public view virtual override returns (string memory) {\r\n      return nftName;\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-symbol}.\r\n    */\r\n  function symbol() public view virtual override returns (string memory) {\r\n      return nftSymbol;\r\n  }\r\n}"
    },
    "contracts/nft-bridge/tokens/AxelarSeaERC1155.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"./IAxelarSeaNft.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract AxelarSeaERC1155 is ERC1155, IAxelarSeaNft {\r\n  address public controller;\r\n  uint256 public nftId;\r\n\r\n  modifier onlyController {\r\n    require(msg.sender == controller, \"Not Controller\");\r\n    _;\r\n  }\r\n\r\n  constructor() ERC1155(\"_\") {}\r\n\r\n  function contractURI() external view returns (string memory) {\r\n    return string(abi.encodePacked(\"https://api.axelarsea.com/nftbridge/contractmetadata/\", Strings.toString(nftId)));\r\n  }\r\n\r\n  function initialize(\r\n    address _controller,\r\n    uint256 _nftId\r\n  ) public {\r\n    require(controller == address(0), \"Initialized\");\r\n    \r\n    controller = _controller;\r\n    nftId = _nftId;\r\n  }\r\n\r\n  function unlock(address to, uint256 tokenId, uint256 amount) public override onlyController {\r\n    _mint(to, tokenId, amount, \"\");\r\n  }\r\n\r\n  function lock(address from, uint256 tokenId, uint256 amount) public override onlyController {\r\n    _burn(from, tokenId, amount);\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-tokenURI}.\r\n    */\r\n  function uri(uint256 tokenId) public view virtual override returns (string memory) {\r\n    return string(abi.encodePacked(\"https://api.axelarsea.com/nftbridge/tokenmetadata/\", Strings.toString(nftId), \"/\", Strings.toString(tokenId)));\r\n  }\r\n}"
    },
    "contracts/nft-bridge/tokens/IAxelarSeaNft.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAxelarSeaNft {\r\n  function unlock(address to, uint256 tokenId, uint256 amount) external;\r\n  function lock(address from, uint256 tokenId, uint256 amount) external;\r\n}"
    },
    "contracts/nft-bridge/IAxelarSeaNftExecutable.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract IAxelarSeaNftExecutable {\r\n  address public immutable controller;\r\n\r\n  constructor(address _controller) {\r\n    controller = _controller;\r\n  }\r\n\r\n  function execute(\r\n    address tokenAddress,\r\n    uint128 chainId, \r\n    uint256 nftId, \r\n    uint256 tokenId, \r\n    uint256 amount, \r\n    string memory from, \r\n    bytes calldata payload\r\n  ) external {\r\n    require(msg.sender == controller, \"Controller\");\r\n    _execute(tokenAddress, chainId, nftId, tokenId, amount, from, payload);\r\n  }\r\n\r\n  function _execute(\r\n    address tokenAddress,\r\n    uint128 chainId, \r\n    uint256 nftId, \r\n    uint256 tokenId, \r\n    uint256 amount, \r\n    string memory from, \r\n    bytes calldata payload\r\n  ) internal virtual;\r\n}"
    },
    "contracts/nft-bridge/bridges/IAxelarSeaNftBridge.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../AxelarSeaNftBridgeController.sol\";\r\n\r\nabstract contract IAxelarSeaNftBridge {\r\n  AxelarSeaNftBridgeController public immutable controller;\r\n\r\n  constructor(address _controller) {\r\n    controller = AxelarSeaNftBridgeController(_controller);\r\n  }\r\n\r\n  modifier onlyController {\r\n    require(msg.sender == address(controller), \"Not Controller\");\r\n    _;\r\n  }\r\n\r\n  function _bridge(uint128 chainId, address from, bytes calldata payload) virtual internal;\r\n  function bridge(uint128 chainId, address from, bytes calldata payload) public payable onlyController {\r\n    _bridge(chainId, from, payload);\r\n  }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/nft-bridge/bridges/AxelarSeaNftAxelarBridge.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./IAxelarSeaNftBridge.sol\";\r\nimport {IAxelarExecutable} from \"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarExecutable.sol\";\r\nimport {IAxelarGasService} from \"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGasService.sol\";\r\n\r\ncontract AxelarSeaNftAxelarBridge is IAxelarExecutable, IAxelarSeaNftBridge, Ownable {\r\n  IAxelarGasService public immutable gasReceiver;\r\n\r\n  constructor(address _controller, address _gateway, address _gasReceiver) IAxelarExecutable(_gateway) IAxelarSeaNftBridge(_controller) {\r\n    gasReceiver = IAxelarGasService(_gasReceiver);\r\n  }\r\n\r\n  struct SiblingData {\r\n    uint128 chainId;\r\n    string chainName;\r\n    string bridgeAddress;\r\n  }\r\n  mapping(uint128 => SiblingData) public siblings;\r\n  mapping(bytes32 => uint128) public chainNameLookup;\r\n\r\n  event AddSibling(uint128 indexed chainId, string chainName, string bridgeAddress);\r\n  function addSibling(uint128 chainId, string memory chainName, string memory bridgeAddress) public onlyOwner {\r\n    siblings[chainId] = SiblingData({\r\n      chainId: chainId,\r\n      chainName: chainName,\r\n      bridgeAddress: bridgeAddress\r\n    });\r\n    chainNameLookup[keccak256(bytes(chainName))] = chainId;\r\n\r\n    emit AddSibling(chainId, chainName, bridgeAddress);\r\n  }\r\n\r\n  function _bridgeAxelar(address from, string memory destinationChain, string memory destinationAddress, bytes calldata payload) internal {\r\n    gasReceiver.payNativeGasForContractCall{value: msg.value}(\r\n      address(this),\r\n      destinationChain,\r\n      destinationAddress,\r\n      payload,\r\n      from\r\n    );\r\n    gateway.callContract(destinationChain, destinationAddress, payload);\r\n  }\r\n\r\n  function _bridge(uint128 chainId, address from, bytes calldata payload) override internal {\r\n    require(msg.sender == address(controller), \"F\");\r\n    _bridgeAxelar(from, siblings[chainId].chainName, siblings[chainId].bridgeAddress, payload);\r\n  }\r\n\r\n  function _execute(\r\n    string memory sourceChain,\r\n    string memory sourceAddress,\r\n    bytes calldata payload\r\n  ) internal virtual override {\r\n    require(keccak256(bytes(sourceAddress)) == keccak256(bytes(siblings[chainNameLookup[keccak256(bytes(sourceChain))]].bridgeAddress)), \"WRONG_SENDER\");\r\n\r\n    // Low level call with payload\r\n    (bool success, bytes memory returndata) = address(controller).call(payload);\r\n\r\n    // TODO: Revert if not success\r\n    require(success, string(returndata));\r\n  }\r\n\r\n  function _executeWithToken(\r\n    string memory sourceChain,\r\n    string memory sourceAddress,\r\n    bytes calldata payload,\r\n    string memory tokenSymbol,\r\n    uint256 amount\r\n  ) internal virtual override {\r\n    _execute(sourceChain, sourceAddress, payload);\r\n  }\r\n}"
    },
    "@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarExecutable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IAxelarGateway } from './IAxelarGateway.sol';\n\nabstract contract IAxelarExecutable {\n    error NotApprovedByGateway();\n\n    IAxelarGateway public gateway;\n\n    constructor(address gateway_) {\n        gateway = IAxelarGateway(gateway_);\n    }\n\n    function execute(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload\n    ) external {\n        bytes32 payloadHash = keccak256(payload);\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash)) revert NotApprovedByGateway();\n        _execute(sourceChain, sourceAddress, payload);\n    }\n\n    function executeWithToken(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload,\n        string calldata tokenSymbol,\n        uint256 amount\n    ) external {\n        bytes32 payloadHash = keccak256(payload);\n        if (!gateway.validateContractCallAndMint(commandId, sourceChain, sourceAddress, payloadHash, tokenSymbol, amount))\n            revert NotApprovedByGateway();\n\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\n    }\n\n    function _execute(\n        string memory sourceChain,\n        string memory sourceAddress,\n        bytes calldata payload\n    ) internal virtual {}\n\n    function _executeWithToken(\n        string memory sourceChain,\n        string memory sourceAddress,\n        bytes calldata payload,\n        string memory tokenSymbol,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGasService.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport './IUpgradable.sol';\n\n// This should be owned by the microservice that is paying for gas.\ninterface IAxelarGasService is IUpgradable {\n    error NothingReceived();\n    error TransferFailed();\n    error InvalidAddress();\n\n    event GasPaidForContractCall(\n        address indexed sourceAddress,\n        string destinationChain,\n        string destinationAddress,\n        bytes32 indexed payloadHash,\n        address gasToken,\n        uint256 gasFeeAmount,\n        address refundAddress\n    );\n\n    event GasPaidForContractCallWithToken(\n        address indexed sourceAddress,\n        string destinationChain,\n        string destinationAddress,\n        bytes32 indexed payloadHash,\n        string symbol,\n        uint256 amount,\n        address gasToken,\n        uint256 gasFeeAmount,\n        address refundAddress\n    );\n\n    event NativeGasPaidForContractCall(\n        address indexed sourceAddress,\n        string destinationChain,\n        string destinationAddress,\n        bytes32 indexed payloadHash,\n        uint256 gasFeeAmount,\n        address refundAddress\n    );\n\n    event NativeGasPaidForContractCallWithToken(\n        address indexed sourceAddress,\n        string destinationChain,\n        string destinationAddress,\n        bytes32 indexed payloadHash,\n        string symbol,\n        uint256 amount,\n        uint256 gasFeeAmount,\n        address refundAddress\n    );\n\n    event GasAdded(bytes32 indexed txHash, uint256 indexed logIndex, address gasToken, uint256 gasFeeAmount, address refundAddress);\n\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\n\n    // This is called on the source chain before calling the gateway to execute a remote contract.\n    function payGasForContractCall(\n        address sender,\n        string calldata destinationChain,\n        string calldata destinationAddress,\n        bytes calldata payload,\n        address gasToken,\n        uint256 gasFeeAmount,\n        address refundAddress\n    ) external;\n\n    // This is called on the source chain before calling the gateway to execute a remote contract.\n    function payGasForContractCallWithToken(\n        address sender,\n        string calldata destinationChain,\n        string calldata destinationAddress,\n        bytes calldata payload,\n        string calldata symbol,\n        uint256 amount,\n        address gasToken,\n        uint256 gasFeeAmount,\n        address refundAddress\n    ) external;\n\n    // This is called on the source chain before calling the gateway to execute a remote contract.\n    function payNativeGasForContractCall(\n        address sender,\n        string calldata destinationChain,\n        string calldata destinationAddress,\n        bytes calldata payload,\n        address refundAddress\n    ) external payable;\n\n    // This is called on the source chain before calling the gateway to execute a remote contract.\n    function payNativeGasForContractCallWithToken(\n        address sender,\n        string calldata destinationChain,\n        string calldata destinationAddress,\n        bytes calldata payload,\n        string calldata symbol,\n        uint256 amount,\n        address refundAddress\n    ) external payable;\n\n    function addGas(\n        bytes32 txHash,\n        uint256 txIndex,\n        address gasToken,\n        uint256 gasFeeAmount,\n        address refundAddress\n    ) external;\n\n    function addNativeGas(\n        bytes32 txHash,\n        uint256 logIndex,\n        address refundAddress\n    ) external payable;\n\n    function collectFees(address payable receiver, address[] calldata tokens) external;\n\n    function refund(\n        address payable receiver,\n        address token,\n        uint256 amount\n    ) external;\n}\n"
    },
    "@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IAxelarGateway {\n    /**********\\\n    |* Errors *|\n    \\**********/\n\n    error NotSelf();\n    error NotProxy();\n    error InvalidCodeHash();\n    error SetupFailed();\n    error InvalidAuthModule();\n    error InvalidTokenDeployer();\n    error InvalidAmount();\n    error InvalidChainId();\n    error InvalidCommands();\n    error TokenDoesNotExist(string symbol);\n    error TokenAlreadyExists(string symbol);\n    error TokenDeployFailed(string symbol);\n    error TokenContractDoesNotExist(address token);\n    error BurnFailed(string symbol);\n    error MintFailed(string symbol);\n    error InvalidSetMintLimitsParams();\n    error ExceedMintLimit(string symbol);\n\n    /**********\\\n    |* Events *|\n    \\**********/\n\n    event TokenSent(address indexed sender, string destinationChain, string destinationAddress, string symbol, uint256 amount);\n\n    event ContractCall(\n        address indexed sender,\n        string destinationChain,\n        string destinationContractAddress,\n        bytes32 indexed payloadHash,\n        bytes payload\n    );\n\n    event ContractCallWithToken(\n        address indexed sender,\n        string destinationChain,\n        string destinationContractAddress,\n        bytes32 indexed payloadHash,\n        bytes payload,\n        string symbol,\n        uint256 amount\n    );\n\n    event Executed(bytes32 indexed commandId);\n\n    event TokenDeployed(string symbol, address tokenAddresses);\n\n    event ContractCallApproved(\n        bytes32 indexed commandId,\n        string sourceChain,\n        string sourceAddress,\n        address indexed contractAddress,\n        bytes32 indexed payloadHash,\n        bytes32 sourceTxHash,\n        uint256 sourceEventIndex\n    );\n\n    event ContractCallApprovedWithMint(\n        bytes32 indexed commandId,\n        string sourceChain,\n        string sourceAddress,\n        address indexed contractAddress,\n        bytes32 indexed payloadHash,\n        string symbol,\n        uint256 amount,\n        bytes32 sourceTxHash,\n        uint256 sourceEventIndex\n    );\n\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\n\n    event OperatorshipTransferred(bytes newOperatorsData);\n\n    event Upgraded(address indexed implementation);\n\n    /********************\\\n    |* Public Functions *|\n    \\********************/\n\n    function sendToken(\n        string calldata destinationChain,\n        string calldata destinationAddress,\n        string calldata symbol,\n        uint256 amount\n    ) external;\n\n    function callContract(\n        string calldata destinationChain,\n        string calldata contractAddress,\n        bytes calldata payload\n    ) external;\n\n    function callContractWithToken(\n        string calldata destinationChain,\n        string calldata contractAddress,\n        bytes calldata payload,\n        string calldata symbol,\n        uint256 amount\n    ) external;\n\n    function isContractCallApproved(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        address contractAddress,\n        bytes32 payloadHash\n    ) external view returns (bool);\n\n    function isContractCallAndMintApproved(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        address contractAddress,\n        bytes32 payloadHash,\n        string calldata symbol,\n        uint256 amount\n    ) external view returns (bool);\n\n    function validateContractCall(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes32 payloadHash\n    ) external returns (bool);\n\n    function validateContractCallAndMint(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes32 payloadHash,\n        string calldata symbol,\n        uint256 amount\n    ) external returns (bool);\n\n    /***********\\\n    |* Getters *|\n    \\***********/\n\n    function authModule() external view returns (address);\n\n    function tokenDeployer() external view returns (address);\n\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\n\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\n\n    function allTokensFrozen() external view returns (bool);\n\n    function implementation() external view returns (address);\n\n    function tokenAddresses(string memory symbol) external view returns (address);\n\n    function tokenFrozen(string memory symbol) external view returns (bool);\n\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\n\n    function adminEpoch() external view returns (uint256);\n\n    function adminThreshold(uint256 epoch) external view returns (uint256);\n\n    function admins(uint256 epoch) external view returns (address[] memory);\n\n    /*******************\\\n    |* Admin Functions *|\n    \\*******************/\n\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\n\n    function upgrade(\n        address newImplementation,\n        bytes32 newImplementationCodeHash,\n        bytes calldata setupParams\n    ) external;\n\n    /**********************\\\n    |* External Functions *|\n    \\**********************/\n\n    function setup(bytes calldata params) external;\n\n    function execute(bytes calldata input) external;\n}\n"
    },
    "@axelar-network/axelar-cgp-solidity/contracts/interfaces/IUpgradable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n// General interface for upgradable contracts\ninterface IUpgradable {\n    error NotOwner();\n    error InvalidOwner();\n    error InvalidCodeHash();\n    error InvalidImplementation();\n    error SetupFailed();\n    error NotProxy();\n\n    event Upgraded(address indexed newImplementation);\n    event OwnershipTransferred(address indexed newOwner);\n\n    // Get current owner\n    function owner() external view returns (address);\n\n    function contractId() external pure returns (bytes32);\n\n    function implementation() external view returns (address);\n\n    function upgrade(\n        address newImplementation,\n        bytes32 newImplementationCodeHash,\n        bytes calldata params\n    ) external;\n\n    function setup(bytes calldata data) external;\n}\n"
    },
    "contracts/MarketplaceMetaWalletGMP.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\n// Minimal contract for allowing token transfer seperated from user wallet\r\n\r\nimport \"./Marketplace.sol\";\r\nimport {IAxelarExecutable} from \"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarExecutable.sol\";\r\nimport {IAxelarGasService} from \"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGasService.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ninterface IWETH is IERC20 {\r\n  function deposit() external payable;\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function withdraw(uint) external;\r\n}\r\n\r\n// Temporary use for testnet campaign\r\ncontract MarketplaceMetaWalletGMP is ReentrancyGuard, IAxelarExecutable, Ownable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  event Buy(address indexed token, uint256 indexed tokenId, uint256 amount, address priceToken, uint256 price, address indexed seller);\r\n\r\n  AxelarSeaMarketplace public immutable master;\r\n  IAxelarGasService public immutable gasReceiver;\r\n  string public addressthis;\r\n  IWETH public immutable weth;\r\n\r\n  mapping(bytes32 => string) public whitelisted;\r\n\r\n  constructor(address _master, address _gateway, address _gasReceiver, address _WETH) IAxelarExecutable(_gateway) {\r\n    master = AxelarSeaMarketplace(_master);\r\n    gasReceiver = IAxelarGasService(_gasReceiver);\r\n    addressthis = Strings.toHexString(uint160(address(this)), 20);\r\n    weth = IWETH(_WETH);\r\n  }\r\n\r\n  function addWhitelist(string memory sourceChain, string memory addr) public onlyOwner {\r\n    whitelisted[keccak256(bytes(sourceChain))] = addr;\r\n  }\r\n\r\n  function buyERC721(address walletAddress, IERC721 token, address seller, uint256 tokenId) internal {\r\n    AxelarSeaMarketplace.SaleInfo memory saleInfo = master.getSale(seller, address(token), tokenId);\r\n\r\n    saleInfo.priceToken.safeApprove(address(master), saleInfo.price + 10000); // + 10000 To prevent floating point error\r\n    master.buyERC721(walletAddress, token, seller, tokenId);\r\n\r\n    // Prevent any exploit\r\n    saleInfo.priceToken.safeApprove(address(master), 0);\r\n\r\n    emit Buy(address(token), tokenId, 1, address(saleInfo.priceToken), saleInfo.price, seller);\r\n  }\r\n\r\n  function buyERC1155(address walletAddress, IERC1155 token, address seller, uint256 tokenId, uint256 amount) internal {\r\n    AxelarSeaMarketplace.SaleInfo memory saleInfo = master.getSale(seller, address(token), tokenId);\r\n    \r\n    saleInfo.priceToken.safeApprove(address(master), saleInfo.price * amount + 10000); // + 10000 To prevent floating point error\r\n    master.buyERC1155(walletAddress, token, seller, tokenId, amount);\r\n\r\n    // Prevent any exploit\r\n    saleInfo.priceToken.safeApprove(address(master), 0);\r\n\r\n    emit Buy(address(token), tokenId, amount, address(saleInfo.priceToken), saleInfo.price, seller);\r\n  }\r\n\r\n  function bridge(\r\n    string calldata destinationChain,\r\n    bytes calldata payload,\r\n    string calldata symbol,\r\n    uint256 gasAmount\r\n  ) public payable {\r\n    uint256 amount = msg.value - gasAmount;\r\n\r\n    gasReceiver.payNativeGasForContractCallWithToken{value: gasAmount}(\r\n      address(this),\r\n      destinationChain,\r\n      whitelisted[keccak256(bytes(destinationChain))],\r\n      payload,\r\n      symbol,\r\n      amount,\r\n      msg.sender\r\n    );\r\n\r\n    weth.deposit{value: amount}();\r\n    weth.approve(address(gateway), amount);\r\n\r\n    gateway.callContractWithToken(destinationChain, whitelisted[keccak256(bytes(destinationChain))], payload, symbol, amount);\r\n  }\r\n\r\n  function _executeWithToken(\r\n    string memory sourceChain,\r\n    string memory sourceAddress,\r\n    bytes calldata payload,\r\n    string memory tokenSymbol,\r\n    uint256 amount\r\n  ) internal virtual override {\r\n    require(keccak256(bytes(whitelisted[keccak256(bytes(sourceChain))])) == keccak256(bytes(sourceAddress)), \"Fake\");\r\n    (address walletAddress, IERC721 token, address seller, uint256 tokenId) = abi.decode(payload, (address, IERC721, address, uint256));\r\n    buyERC721(walletAddress, token, seller, tokenId);\r\n  }\r\n}"
    },
    "contracts/Marketplace.sol": {
      "content": "//SPDX-License-Identifier: None\npragma solidity ^0.8.0;\n\nimport \"./MarketplaceMetaWallet.sol\";\nimport \"./meta-transactions/NativeMetaTransaction.sol\";\nimport \"./meta-transactions/ContextMixin.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\n// import {IAxelarExecutable} from \"./axelar/IAxelarExecutable.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract AxelarSeaMarketplace is Ownable, NativeMetaTransaction, ContextMixin, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    event Buy(address buyer, address indexed token, uint256 indexed tokenId, uint256 amount, address priceToken, uint256 price, address indexed seller);\n\n    address public marketplaceMetaWallet;\n\n    address public feeAddress;\n    uint256 public marketFee = 2.5e16; // 2.5%\n\n    struct SaleInfo {\n        uint256 amount;\n        IERC20 priceToken;\n        uint256 price;\n    }\n\n    constructor(address _marketplaceMetaWallet) {\n        feeAddress = msg.sender;\n        marketplaceMetaWallet = _marketplaceMetaWallet;\n        _initializeEIP712(\"AxelarSeaMarketplace\");\n    }\n\n    mapping(address => mapping(address => mapping(uint256 => SaleInfo))) private sales;\n    mapping(address => MarketplaceMetaWallet) public metaWallet;\n    mapping(address => uint256) public royalty;\n\n    function getSale(address seller, address token, uint256 tokenId) public view returns(SaleInfo memory) {\n        return sales[seller][token][tokenId];\n    }\n\n    event SetFeeAddress(address indexed caller, address indexed newAddress);\n    function setFeeAddress(address newAddress) public onlyOwner {\n        feeAddress = newAddress;\n        emit SetFeeAddress(msg.sender, newAddress);\n    }\n\n    event SetMarketFee(address indexed caller, uint256 newFee);\n    function setMarketFee(uint256 newFee) public onlyOwner {\n        marketFee = newFee;\n        emit SetMarketFee(msg.sender, newFee);\n    }\n\n    event SetRoyaltyFee(address indexed setter, address indexed token, uint256 fee);\n    function setRoyaltyFee(address token, uint256 fee) public {\n        require(Ownable(token).owner() == msgSender(), \"Not collection owner\");\n        require(fee <= 1e18 - marketFee, \"Invalid fee\");\n        royalty[token] = fee;\n        emit SetRoyaltyFee(msgSender(), token, fee);\n    }\n\n    event List(address indexed seller, address indexed token, uint256 indexed tokenId, uint256 amount, address priceToken, uint256 price);\n    function list(address token, uint256 tokenId, uint256 amount, IERC20 priceToken, uint256 price) public {\n        address seller = msgSender();\n        sales[seller][token][tokenId].amount = amount;\n        sales[seller][token][tokenId].priceToken = priceToken;\n        sales[seller][token][tokenId].price = price;\n        emit List(seller, token, tokenId, amount, address(priceToken), price);\n    }\n\n    event CancelListing(address indexed seller, address indexed token, uint256 indexed tokenId);\n    function cancelListing(address token, uint256 tokenId) public {\n        address seller = msgSender();\n        sales[seller][token][tokenId].amount = 0;\n        sales[seller][token][tokenId].price = 0;\n        emit CancelListing(seller, token, tokenId);\n    }\n\n    function buyERC721(address to, IERC721 token, address seller, uint256 tokenId) public nonReentrant {\n        address buyer = msgSender();\n\n        SaleInfo storage saleInfo = sales[seller][address(token)][tokenId];\n\n        require(saleInfo.amount > 0 && saleInfo.price > 0, \"Not for sale\");\n\n        uint256 fee = saleInfo.price * marketFee / 1e18;\n        uint256 royaltyFee = saleInfo.price * royalty[address(token)] / 1e18;\n\n        saleInfo.priceToken.safeTransferFrom(buyer, feeAddress, fee);\n        if (royaltyFee > 0) {\n            saleInfo.priceToken.safeTransferFrom(buyer, Ownable(address(token)).owner(), royaltyFee);\n        }\n        saleInfo.priceToken.safeTransferFrom(buyer, seller, saleInfo.price - fee - royaltyFee);\n        token.safeTransferFrom(seller, to, tokenId);\n\n        emit Buy(to, address(token), tokenId, 1, address(saleInfo.priceToken), saleInfo.price, seller);\n\n        sales[seller][address(token)][tokenId].price = 0;\n        sales[seller][address(token)][tokenId].amount = 0;\n    }\n\n    function buyERC1155(address to, IERC1155 token, address seller, uint256 tokenId, uint256 amount) public nonReentrant {\n        address buyer = msgSender();\n\n        SaleInfo storage saleInfo = sales[seller][address(token)][tokenId];\n\n        require(amount > 0 && saleInfo.amount >= amount && saleInfo.price > 0, \"Not for sale\");\n\n        uint256 fee = saleInfo.price * marketFee / 1e18;\n        uint256 royaltyFee = saleInfo.price * royalty[address(token)] / 1e18;\n\n        saleInfo.priceToken.safeTransferFrom(buyer, feeAddress, fee * amount);\n        if (royaltyFee > 0) {\n            saleInfo.priceToken.safeTransferFrom(buyer, Ownable(address(token)).owner(), royaltyFee * amount);\n        }\n        saleInfo.priceToken.safeTransferFrom(buyer, seller, (saleInfo.price - fee - royaltyFee) * amount);\n        token.safeTransferFrom(seller, to, tokenId, amount, \"\");\n\n        emit Buy(to, address(token), tokenId, amount, address(saleInfo.priceToken), saleInfo.price, seller);\n\n        sales[seller][address(token)][tokenId].amount -= amount;\n    }\n\n    event CreateMetaWallet(address indexed caller, address indexed target, address indexed contractAddress);\n    function createMetaWallet(address target) public returns(MarketplaceMetaWallet) {\n        MarketplaceMetaWallet wallet = MarketplaceMetaWallet(Clones.clone(marketplaceMetaWallet));\n        wallet.initialize(address(this), target);\n        emit CreateMetaWallet(msgSender(), target, address(wallet));\n        metaWallet[target] = wallet;\n        return wallet;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/MarketplaceMetaWallet.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\n// Minimal contract for allowing token transfer seperated from user wallet\r\n\r\nimport \"./Marketplace.sol\";\r\nimport \"./meta-transactions/NativeMetaTransaction.sol\";\r\nimport \"./meta-transactions/ContextMixin.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract MarketplaceMetaWallet is NativeMetaTransaction, ContextMixin, ReentrancyGuard {\r\n  using SafeERC20 for IERC20;\r\n\r\n  event Buy(address indexed token, uint256 indexed tokenId, uint256 amount, address priceToken, uint256 price, address indexed seller);\r\n\r\n  bool public initialized = false;\r\n\r\n  AxelarSeaMarketplace public master;\r\n  address public walletAddress;\r\n\r\n  modifier onlyOwner {\r\n    require(msgSender() == walletAddress, \"Not owner\");\r\n    _;\r\n  }\r\n\r\n  function initialize(address _master, address _walletAddress) public {\r\n    require(!initialized, \"Initialized\");\r\n\r\n    master = AxelarSeaMarketplace(_master);\r\n    walletAddress = _walletAddress;\r\n\r\n    _initializeEIP712(\"MarketplaceMetaWallet\");\r\n\r\n    initialized = true;\r\n  }\r\n\r\n  function buyERC721(IERC721 token, address seller, uint256 tokenId) public nonReentrant onlyOwner {\r\n    AxelarSeaMarketplace.SaleInfo memory saleInfo = master.getSale(seller, address(token), tokenId);\r\n\r\n    saleInfo.priceToken.safeApprove(address(master), saleInfo.price + 10000); // + 10000 To prevent floating point error\r\n    master.buyERC721(walletAddress, token, seller, tokenId);\r\n\r\n    // Prevent any exploit\r\n    saleInfo.priceToken.safeApprove(address(master), 0);\r\n\r\n    emit Buy(address(token), tokenId, 1, address(saleInfo.priceToken), saleInfo.price, seller);\r\n  }\r\n\r\n  function buyERC1155(IERC1155 token, address seller, uint256 tokenId, uint256 amount) public nonReentrant onlyOwner {\r\n    AxelarSeaMarketplace.SaleInfo memory saleInfo = master.getSale(seller, address(token), tokenId);\r\n    \r\n    saleInfo.priceToken.safeApprove(address(master), saleInfo.price * amount + 10000); // + 10000 To prevent floating point error\r\n    master.buyERC1155(walletAddress, token, seller, tokenId, amount);\r\n\r\n    // Prevent any exploit\r\n    saleInfo.priceToken.safeApprove(address(master), 0);\r\n\r\n    emit Buy(address(token), tokenId, amount, address(saleInfo.priceToken), saleInfo.price, seller);\r\n  }\r\n}"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/mint/AxelarSeaNft721Enumerable.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"./lib/AxelarSeaNftBase.sol\";\r\n\r\ncontract AxelarSeaNft721Enumerable is ERC721Enumerable, AxelarSeaNftBase {\r\n  constructor() ERC721(\"_\", \"_\") {}\r\n\r\n  function _mintInternal(address to, uint256 maxAmount, uint256 amount) internal override {\r\n    walletMinted[to] += amount;\r\n    require(walletMinted[to] <= maxAmount, \"Mint Limited\");\r\n\r\n    uint256 supply = totalSupply();\r\n    require(supply + amount <= maxSupply, \"Supply maxed\");\r\n\r\n    unchecked {\r\n      if (amount == 1) {\r\n        _safeMint(to, supply + 1);\r\n      } else {\r\n        for (uint256 i = 1; i <= amount; i++) {\r\n          _safeMint(to, supply + i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) internal override {\r\n    AxelarSeaNftBase._beforeTokenTransferCheck(from);\r\n    super._beforeTokenTransfer(from, to, tokenId);\r\n  }\r\n\r\n  function exists(uint256 tokenId) public override view returns(bool) {\r\n    return _exists(tokenId);\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-tokenURI}.\r\n    */\r\n  function tokenURI(uint256 tokenId) public view override(AxelarSeaNftBase, ERC721) virtual returns (string memory) {\r\n    return AxelarSeaNftBase.tokenURI(tokenId);\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-name}.\r\n    */\r\n  function name() public view override(AxelarSeaNftBase, ERC721) virtual returns (string memory) {\r\n    return AxelarSeaNftBase.name();\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-symbol}.\r\n    */\r\n  function symbol() public view override(AxelarSeaNftBase, ERC721) virtual returns (string memory) {\r\n    return AxelarSeaNftBase.symbol();\r\n  }\r\n\r\n  function _msgSender() internal view override(Context, ContextUpgradeable) virtual returns (address) {\r\n    return ContextUpgradeable._msgSender();\r\n  }\r\n\r\n  function _msgData() internal view override(Context, ContextUpgradeable) virtual returns (bytes calldata) {\r\n    return ContextUpgradeable._msgData();\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC165-supportsInterface}.\r\n    */\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override(AxelarSeaNftBase, ERC721Enumerable) returns (bool) {\r\n    return AxelarSeaNftBase.supportsInterface(interfaceId) || ERC721Enumerable.supportsInterface(interfaceId);\r\n  }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/mint/AxelarSeaNft721A.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.7;\r\n\r\nimport \"../lib/ERC721AEnumerable.sol\";\r\nimport \"./lib/AxelarSeaNftBase.sol\";\r\n\r\ncontract AxelarSeaNft721A is ERC721AEnumerable, AxelarSeaNftBase {\r\n  constructor() ERC721A(\"_\", \"_\") {}\r\n\r\n  function _mintInternal(address to, uint256 maxAmount, uint256 amount) internal override {\r\n    walletMinted[to] += amount;\r\n\r\n    if(walletMinted[to] > maxAmount) {\r\n      revert MintPerWalletLimited();\r\n    }\r\n\r\n    uint256 supply = totalSupply();\r\n    if(supply + amount > maxSupply) {\r\n      revert SupplyLimited();\r\n    }\r\n\r\n    _safeMint(to, amount);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 tokenId) public virtual override(ERC721A, IERC721A) {\r\n    AxelarSeaNftBase._beforeTokenTransferCheck(from);\r\n    super.transferFrom(from, to, tokenId);\r\n  }\r\n\r\n  function exists(uint256 tokenId) public override view returns(bool) {\r\n    return _exists(tokenId);\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-tokenURI}.\r\n    */\r\n  function tokenURI(uint256 tokenId) public view override(AxelarSeaNftBase, ERC721A, IERC721A) virtual returns (string memory) {\r\n    return AxelarSeaNftBase.tokenURI(tokenId);\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-name}.\r\n    */\r\n  function name() public view override(AxelarSeaNftBase, ERC721A, IERC721A) virtual returns (string memory) {\r\n    return AxelarSeaNftBase.name();\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC721Metadata-symbol}.\r\n    */\r\n  function symbol() public view override(AxelarSeaNftBase, ERC721A, IERC721A) virtual returns (string memory) {\r\n    return AxelarSeaNftBase.symbol();\r\n  }\r\n\r\n  /**\r\n    * @dev See {IERC165-supportsInterface}.\r\n    */\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override(AxelarSeaNftBase, ERC721A, IERC721A) returns (bool) {\r\n    return AxelarSeaNftBase.supportsInterface(interfaceId) || ERC721A.supportsInterface(interfaceId);\r\n  }\r\n}"
    },
    "contracts/lib/ERC721AEnumerable.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity ^0.8.7;\r\n\r\nimport \"erc721a/contracts/extensions/ERC721AQueryable.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721EnumerableExtension {\r\n  /**\r\n    * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n    * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n    */\r\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n  /**\r\n    * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n    * Use along with {totalSupply} to enumerate all tokens.\r\n    */\r\n  function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\nabstract contract ERC721AEnumerable is ERC721AQueryable, IERC721EnumerableExtension {\r\n  /**\r\n    * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n    * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n    */\r\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256) {\r\n    return ERC721AQueryable(address(this)).tokensOfOwnerIn(owner, index, index+1)[0];\r\n  }\r\n\r\n  /**\r\n    * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n    * Use along with {totalSupply} to enumerate all tokens.\r\n    */\r\n  function tokenByIndex(uint256 index) external pure returns (uint256) {\r\n    return index;\r\n  }\r\n}"
    },
    "erc721a/contracts/extensions/ERC721AQueryable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721AQueryable.sol';\nimport '../ERC721A.sol';\n\n/**\n * @title ERC721AQueryable.\n *\n * @dev ERC721A subclass with convenience query functions.\n */\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\n    /**\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n     *\n     * If the `tokenId` is out of bounds:\n     *\n     * - `addr = address(0)`\n     * - `startTimestamp = 0`\n     * - `burned = false`\n     * - `extraData = 0`\n     *\n     * If the `tokenId` is burned:\n     *\n     * - `addr = <Address of owner before token was burned>`\n     * - `startTimestamp = <Timestamp when token was burned>`\n     * - `burned = true`\n     * - `extraData = <Extra data when token was burned>`\n     *\n     * Otherwise:\n     *\n     * - `addr = <Address of owner>`\n     * - `startTimestamp = <Timestamp of start of ownership>`\n     * - `burned = false`\n     * - `extraData = <Extra data at start of ownership>`\n     */\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\n        TokenOwnership memory ownership;\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\n            return ownership;\n        }\n        ownership = _ownershipAt(tokenId);\n        if (ownership.burned) {\n            return ownership;\n        }\n        return _ownershipOf(tokenId);\n    }\n\n    /**\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n     * See {ERC721AQueryable-explicitOwnershipOf}\n     */\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\n        external\n        view\n        virtual\n        override\n        returns (TokenOwnership[] memory)\n    {\n        unchecked {\n            uint256 tokenIdsLength = tokenIds.length;\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\n            for (uint256 i; i != tokenIdsLength; ++i) {\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\n            }\n            return ownerships;\n        }\n    }\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start < stop`\n     */\n    function tokensOfOwnerIn(\n        address owner,\n        uint256 start,\n        uint256 stop\n    ) external view virtual override returns (uint256[] memory) {\n        unchecked {\n            if (start >= stop) revert InvalidQueryRange();\n            uint256 tokenIdsIdx;\n            uint256 stopLimit = _nextTokenId();\n            // Set `start = max(start, _startTokenId())`.\n            if (start < _startTokenId()) {\n                start = _startTokenId();\n            }\n            // Set `stop = min(stop, stopLimit)`.\n            if (stop > stopLimit) {\n                stop = stopLimit;\n            }\n            uint256 tokenIdsMaxLength = balanceOf(owner);\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\n            // to cater for cases where `balanceOf(owner)` is too big.\n            if (start < stop) {\n                uint256 rangeLength = stop - start;\n                if (rangeLength < tokenIdsMaxLength) {\n                    tokenIdsMaxLength = rangeLength;\n                }\n            } else {\n                tokenIdsMaxLength = 0;\n            }\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\n            if (tokenIdsMaxLength == 0) {\n                return tokenIds;\n            }\n            // We need to call `explicitOwnershipOf(start)`,\n            // because the slot at `start` may not be initialized.\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\n            address currOwnershipAddr;\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\n            if (!ownership.burned) {\n                currOwnershipAddr = ownership.addr;\n            }\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\n                ownership = _ownershipAt(i);\n                if (ownership.burned) {\n                    continue;\n                }\n                if (ownership.addr != address(0)) {\n                    currOwnershipAddr = ownership.addr;\n                }\n                if (currOwnershipAddr == owner) {\n                    tokenIds[tokenIdsIdx++] = i;\n                }\n            }\n            // Downsize the array to fit.\n            assembly {\n                mstore(tokenIds, tokenIdsIdx)\n            }\n            return tokenIds;\n        }\n    }\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K collections should be fine).\n     */\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\n        unchecked {\n            uint256 tokenIdsIdx;\n            address currOwnershipAddr;\n            uint256 tokenIdsLength = balanceOf(owner);\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\n            TokenOwnership memory ownership;\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\n                ownership = _ownershipAt(i);\n                if (ownership.burned) {\n                    continue;\n                }\n                if (ownership.addr != address(0)) {\n                    currOwnershipAddr = ownership.addr;\n                }\n                if (currOwnershipAddr == owner) {\n                    tokenIds[tokenIdsIdx++] = i;\n                }\n            }\n            return tokenIds;\n        }\n    }\n}\n"
    },
    "erc721a/contracts/extensions/IERC721AQueryable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../IERC721A.sol';\n\n/**\n * @dev Interface of ERC721AQueryable.\n */\ninterface IERC721AQueryable is IERC721A {\n    /**\n     * Invalid query range (`start` >= `stop`).\n     */\n    error InvalidQueryRange();\n\n    /**\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n     *\n     * If the `tokenId` is out of bounds:\n     *\n     * - `addr = address(0)`\n     * - `startTimestamp = 0`\n     * - `burned = false`\n     * - `extraData = 0`\n     *\n     * If the `tokenId` is burned:\n     *\n     * - `addr = <Address of owner before token was burned>`\n     * - `startTimestamp = <Timestamp when token was burned>`\n     * - `burned = true`\n     * - `extraData = <Extra data when token was burned>`\n     *\n     * Otherwise:\n     *\n     * - `addr = <Address of owner>`\n     * - `startTimestamp = <Timestamp of start of ownership>`\n     * - `burned = false`\n     * - `extraData = <Extra data at start of ownership>`\n     */\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\n\n    /**\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n     * See {ERC721AQueryable-explicitOwnershipOf}\n     */\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start < stop`\n     */\n    function tokensOfOwnerIn(\n        address owner,\n        uint256 start,\n        uint256 stop\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K collections should be fine).\n     */\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\n}\n"
    },
    "erc721a/contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Reference type for token approval.\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\n            // but we allocate 0x80 bytes to keep the free memory pointer 32-byte word aliged.\n            // We will need 1 32-byte word to store the length,\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 0x20 + 3 * 0x20 = 0x80.\n            str := add(mload(0x40), 0x80)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, str)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
    },
    "erc721a/contracts/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
    },
    "contracts/test/TestERC20.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n// Used for minting test ERC20s in our tests\r\ncontract TestERC20 is ERC20(\"Test20\", \"TST20\") {\r\n    bool public blocked;\r\n\r\n    bool public noReturnData;\r\n\r\n    constructor() {\r\n        blocked = false;\r\n        noReturnData = false;\r\n    }\r\n\r\n    function blockTransfer(bool blocking) external {\r\n        blocked = blocking;\r\n    }\r\n\r\n    function setNoReturnData(bool noReturn) external {\r\n        noReturnData = noReturn;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external returns (bool) {\r\n        _mint(to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public override returns (bool ok) {\r\n        if (blocked) {\r\n            return false;\r\n        }\r\n\r\n        super.transferFrom(from, to, amount);\r\n\r\n        if (noReturnData) {\r\n            assembly {\r\n                return(0, 0)\r\n            }\r\n        }\r\n\r\n        ok = true;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/test/TestERC721.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\n// Used for minting test ERC721s in our tests\r\ncontract TestERC721 is ERC721(\"Test721\", \"TST721\") {\r\n    function mint(address to, uint256 tokenId) public returns (bool) {\r\n        _safeMint(to, tokenId, \"\");\r\n        return true;\r\n    }\r\n\r\n    function mintToSender(uint256 tokenId) public returns (bool) {\r\n        return mint(msg.sender, tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256) public pure override returns (string memory) {\r\n        return \"tokenURI\";\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestERC1155.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\n\r\n// Used for minting test ERC1155s in our tests\r\ncontract TestERC1155 is ERC1155(\"{id}\") {\r\n    function mint(\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        _mint(to, tokenId, amount, \"\");\r\n        return true;\r\n    }\r\n\r\n    function uri(uint256) public pure override returns (string memory) {\r\n        return \"uri\";\r\n    }\r\n}\r\n"
    },
    "contracts/test/ExcessReturnDataRecipient.sol": {
      "content": "//SPDX-License-Identifier: None\r\npragma solidity >=0.8.7;\r\n\r\ncontract ExcessReturnDataRecipient {\r\n    uint256 revertDataSize;\r\n\r\n    function setRevertDataSize(uint256 size) external {\r\n        revertDataSize = size;\r\n    }\r\n\r\n    // Code created with the help of Stack Exchange question\r\n    // https://ethereum.stackexchange.com/questions/8086\r\n    // Question by Doug King:\r\n    // https://ethereum.stackexchange.com/users/2041/doug-king\r\n    // Answer by Tjaden Hess:\r\n    // https://ethereum.stackexchange.com/users/131/tjaden-hess\r\n    // Modified to use Yul instead of Solidity and added change of\r\n    // base to convert to natural logarithm\r\n    function ln(uint256 x) internal pure returns (uint256 y) {\r\n        assembly {\r\n            let arg := x\r\n            x := sub(x, 1)\r\n            x := or(x, div(x, 0x02))\r\n            x := or(x, div(x, 0x04))\r\n            x := or(x, div(x, 0x10))\r\n            x := or(x, div(x, 0x100))\r\n            x := or(x, div(x, 0x10000))\r\n            x := or(x, div(x, 0x100000000))\r\n            x := or(x, div(x, 0x10000000000000000))\r\n            x := or(x, div(x, 0x100000000000000000000000000000000))\r\n            x := add(x, 1)\r\n            let m := mload(0x40)\r\n            mstore(\r\n                m,\r\n                0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd\r\n            )\r\n            mstore(\r\n                add(m, 0x20),\r\n                0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe\r\n            )\r\n            mstore(\r\n                add(m, 0x40),\r\n                0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616\r\n            )\r\n            mstore(\r\n                add(m, 0x60),\r\n                0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff\r\n            )\r\n            mstore(\r\n                add(m, 0x80),\r\n                0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e\r\n            )\r\n            mstore(\r\n                add(m, 0xa0),\r\n                0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707\r\n            )\r\n            mstore(\r\n                add(m, 0xc0),\r\n                0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606\r\n            )\r\n            mstore(\r\n                add(m, 0xe0),\r\n                0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100\r\n            )\r\n            mstore(0x40, add(m, 0x100))\r\n            let\r\n                magic\r\n            := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\r\n            let\r\n                shift\r\n            := 0x100000000000000000000000000000000000000000000000000000000000000\r\n            let a := div(mul(x, magic), shift)\r\n            y := div(mload(add(m, sub(255, a))), shift)\r\n            y := add(\r\n                y,\r\n                mul(\r\n                    256,\r\n                    gt(\r\n                        arg,\r\n                        0x8000000000000000000000000000000000000000000000000000000000000000\r\n                    )\r\n                )\r\n            )\r\n            y := mul(y, 10000000000000000)\r\n            y := div(y, 14426950408889632)\r\n        }\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        assembly {\r\n            switch gt(y, 3)\r\n            case 1 {\r\n                z := y\r\n                let x := div(add(y, 1), 2)\r\n                for {\r\n\r\n                } lt(x, z) {\r\n\r\n                } {\r\n                    z := x\r\n                    x := div(add(div(y, x), x), 2)\r\n                }\r\n            }\r\n            case 0 {\r\n                z := 1\r\n            }\r\n        }\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata\r\n    ) external view returns (bytes4 magic) {\r\n        magic = this.onERC1155Received.selector;\r\n        if (revertDataSize > 0) {\r\n            uint256 gasToCalculateSqrt = (54 * ln(gasleft())) + 1200;\r\n            uint256 w = (sqrt(\r\n                2048 * (gasleft() - gasToCalculateSqrt) + 9431040\r\n            ) - 3072) / 4;\r\n\r\n            assembly {\r\n                let size := mul(w, 32)\r\n                calldatacopy(0, 0, mul(w, 32))\r\n                revert(0, size)\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        if (revertDataSize > 0) {\r\n            uint256 gasToCalculateSqrt = (54 * ln(gasleft())) + 1200;\r\n            uint256 w = (sqrt(\r\n                2048 * (gasleft() - gasToCalculateSqrt) + 9431040\r\n            ) - 3072) / 2;\r\n\r\n            assembly {\r\n                let size := mul(w, 32)\r\n                calldatacopy(0, 0, mul(w, 32))\r\n                revert(0, size)\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 300
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}