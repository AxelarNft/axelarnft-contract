{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "name": "BadContractSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "BadSignatureV",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collectionId",
          "type": "bytes32"
        }
      ],
      "name": "DuplicatedCollection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSigner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "InvalidTemplate",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collectionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "name": "DeployNft",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "name": "LinkProject",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "name": "NewProject",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetAxelarSeaContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SetMintFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetMinterTemplate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SetNewCollectionFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SetNewProjectFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "SetProjectMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "SetProjectOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetTemplate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "name": "_newProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "axelarSeaContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseContractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "collectionMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "exclusiveLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "deployNft",
      "outputs": [
        {
          "internalType": "contract IAxelarSeaNftInitializable",
          "name": "nft",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minterTemplate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "exclusiveLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "deployNftWithMinter",
      "outputs": [
        {
          "internalType": "contract IAxelarSeaNftInitializable",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "contract IAxelarSeaMinterInitializable",
          "name": "minter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeperator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "name": "linkProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minterTemplates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newCollectionFeeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newCollectionFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "name": "newProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newProjectFeeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newProjectFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nftProject",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "projectMember",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "projectOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setAxelarSeaContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinterTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setNewCollectionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setNewProjectFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "setProjectMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "setProjectOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "templates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x33d75235233ff37a90efd963f03dd5227839256ae44961e39ec8baae39a77e53",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2589991",
    "logsBloom": "0x
    "blockHash": "0x1633d703559106c28f95c4bbe2fe1511bed54aba841926ec0f91d977273b318f",
    "transactionHash": "0x33d75235233ff37a90efd963f03dd5227839256ae44961e39ec8baae39a77e53",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2589991",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b4400175bf4ba4fd154fdd2b4f6ab738",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BadContractSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"BadSignatureV\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collectionId\",\"type\":\"bytes32\"}],\"name\":\"DuplicatedCollection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"InvalidTemplate\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collectionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"DeployNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"LinkProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"NewProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetAxelarSeaContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetMintFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetMinterTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetNewCollectionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetNewProjectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"SetProjectMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SetProjectOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetTemplate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"_newProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"axelarSeaContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseContractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collectionMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exclusiveLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"deployNft\",\"outputs\":[{\"internalType\":\"contract IAxelarSeaNftInitializable\",\"name\":\"nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exclusiveLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deployNftWithMinter\",\"outputs\":[{\"internalType\":\"contract IAxelarSeaNftInitializable\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"contract IAxelarSeaMinterInitializable\",\"name\":\"minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"linkProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minterTemplates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newCollectionFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newCollectionFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"newProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newProjectFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newProjectFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftProject\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"projectOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAxelarSeaContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinterTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setNewCollectionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setNewProjectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setProjectMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setProjectOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"BadContractSignature()\":[{\"details\":\"Revert with an error when an EIP-1271 call to an account fails.\"}],\"BadSignatureV(uint8)\":[{\"details\":\"Revert with an error when a signature that does not contain a v      value of 27 or 28 has been supplied.\",\"params\":{\"v\":\"The invalid v value.\"}}],\"InvalidSignature()\":[{\"details\":\"Revert with an error when a signer cannot be recovered from the      supplied signature.\"}],\"InvalidSigner()\":[{\"details\":\"Revert with an error when the signer recovered by the supplied      signature does not match the offerer or an allowed EIP-1271 signer      as specified by the offerer in the event they are a contract.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mint/AxelarSeaProjectRegistry.sol\":\"AxelarSeaProjectRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/lib/RevertReason.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n// Credit: https://github.com/ProjectOpenSea/seaport/blob/891b5d4f52b58eb7030597fbb22dca67fd86c4c8/contracts/lib/LowLevelHelpers.sol\\r\\n\\r\\nuint256 constant AlmostOneWord = 0x1f;\\r\\nuint256 constant OneWord = 0x20;\\r\\nuint256 constant FreeMemoryPointerSlot = 0x40;\\r\\nuint256 constant CostPerWord = 3;\\r\\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\\r\\nuint256 constant ExtraGasBuffer = 0x20;\\r\\n\\r\\nlibrary RevertReason {\\r\\n    /**\\r\\n     * @dev Internal view function to revert and pass along the revert reason if\\r\\n     *      data was returned by the last call and that the size of that data\\r\\n     *      does not exceed the currently allocated memory size.\\r\\n     */\\r\\n    function revertWithReasonIfOneIsReturned() internal view {\\r\\n        assembly {\\r\\n            // If it returned a message, bubble it up as long as sufficient gas\\r\\n            // remains to do so:\\r\\n            if returndatasize() {\\r\\n                // Ensure that sufficient gas is available to copy returndata\\r\\n                // while expanding memory where necessary. Start by computing\\r\\n                // the word size of returndata and allocated memory.\\r\\n                let returnDataWords := div(\\r\\n                    add(returndatasize(), AlmostOneWord),\\r\\n                    OneWord\\r\\n                )\\r\\n\\r\\n                // Note: use the free memory pointer in place of msize() to work\\r\\n                // around a Yul warning that prevents accessing msize directly\\r\\n                // when the IR pipeline is activated.\\r\\n                let msizeWords := div(mload(FreeMemoryPointerSlot), OneWord)\\r\\n\\r\\n                // Next, compute the cost of the returndatacopy.\\r\\n                let cost := mul(CostPerWord, returnDataWords)\\r\\n\\r\\n                // Then, compute cost of new memory allocation.\\r\\n                if gt(returnDataWords, msizeWords) {\\r\\n                    cost := add(\\r\\n                        cost,\\r\\n                        add(\\r\\n                            mul(sub(returnDataWords, msizeWords), CostPerWord),\\r\\n                            div(\\r\\n                                sub(\\r\\n                                    mul(returnDataWords, returnDataWords),\\r\\n                                    mul(msizeWords, msizeWords)\\r\\n                                ),\\r\\n                                MemoryExpansionCoefficient\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                }\\r\\n\\r\\n                // Finally, add a small constant and compare to gas remaining;\\r\\n                // bubble up the revert data if enough gas is still available.\\r\\n                if lt(add(cost, ExtraGasBuffer), gas()) {\\r\\n                    // Copy returndata to memory; overwrite existing memory.\\r\\n                    returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n                    // Revert, specifying memory region with copied returndata.\\r\\n                    revert(0, returndatasize())\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb987aae3d26d204009707264a90a6847221d19b825dfad47c52f8aae6303c21\",\"license\":\"MIT\"},\"contracts/lib/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n// Using IERC20 instead of ERC20\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\r\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\r\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\r\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\r\\nlibrary SafeTransferLib {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                             ETH OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function safeTransferETH(address to, uint256 amount) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Transfer the ETH and store if it succeeded or not.\\r\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\r\\n        }\\r\\n\\r\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            ERC20 OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"APPROVE_FAILED\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8eb84ced6e8f7eded1002fc955300db060c431eb425924a76a321045bfb21e19\",\"license\":\"AGPL-3.0-only\"},\"contracts/meta-transactions/ContextMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract ContextMixin {\\r\\n    function msgSender() internal view returns (address sender) {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(\\r\\n                    mload(add(array, index)),\\r\\n                    0xffffffffffffffffffffffffffffffffffffffff\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            sender = msg.sender;\\r\\n        }\\r\\n        return sender;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb41001596c090a8ba2e6a6431db48e37fe6fee28d8104af12679263317c1dae1\",\"license\":\"MIT\"},\"contracts/meta-transactions/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract EIP712Base is Initializable {\\r\\n    struct EIP712Domain {\\r\\n        string name;\\r\\n        string version;\\r\\n        address verifyingContract;\\r\\n        bytes32 salt;\\r\\n    }\\r\\n\\r\\n    string constant public ERC712_VERSION = \\\"1\\\";\\r\\n\\r\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n        )\\r\\n    );\\r\\n    bytes32 internal domainSeperator;\\r\\n\\r\\n    // supposed to be called once while initializing.\\r\\n    // one of the contracts that inherits this contract follows proxy pattern\\r\\n    // so it is not possible to do this in a constructor\\r\\n    function _initializeEIP712(\\r\\n        string memory name\\r\\n    )\\r\\n        internal\\r\\n        initializer\\r\\n    {\\r\\n        _setDomainSeperator(name);\\r\\n    }\\r\\n\\r\\n    function _setDomainSeperator(string memory name) internal {\\r\\n        domainSeperator = keccak256(\\r\\n            abi.encode(\\r\\n                EIP712_DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(ERC712_VERSION)),\\r\\n                getChainId(),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getDomainSeperator() public view returns (bytes32) {\\r\\n        return domainSeperator;\\r\\n    }\\r\\n\\r\\n    function getChainId() public view returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Accept message hash and returns hash message in EIP712 compatible form\\r\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\r\\n     * https://eips.ethereum.org/EIPS/eip-712\\r\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\r\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\r\\n     */\\r\\n    function toTypedMessageHash(bytes32 messageHash)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\r\\n            );\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4fa677a06032724c803ff381308d4b531ad02318e88457fbea902ce40e45cc1c\",\"license\":\"MIT\"},\"contracts/meta-transactions/MetaTransactionVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {EIP712Base} from \\\"./EIP712Base.sol\\\";\\r\\nimport \\\"../seaport/lib/SignatureVerification.sol\\\";\\r\\n\\r\\ncontract MetaTransactionVerifier is EIP712Base, SignatureVerification {\\r\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\r\\n        )\\r\\n    );\\r\\n    event MetaTransactionExecuted(\\r\\n        address userAddress,\\r\\n        address payable relayerAddress,\\r\\n        bytes functionSignature\\r\\n    );\\r\\n    mapping(uint256 => bool) nonces;\\r\\n\\r\\n    /*\\r\\n     * Meta transaction structure.\\r\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\r\\n     * He should call the desired function directly in that case.\\r\\n     */\\r\\n    struct MetaTransaction {\\r\\n        uint256 nonce;\\r\\n        address from;\\r\\n        bytes functionSignature;\\r\\n    }\\r\\n\\r\\n    function verifyMetaTransaction(\\r\\n        address userAddress,\\r\\n        uint256 nonce,\\r\\n        bytes calldata functionSignature,\\r\\n        bytes calldata signature\\r\\n    ) internal {\\r\\n        require(!nonces[nonce], \\\"Already run\\\");\\r\\n\\r\\n        MetaTransaction memory metaTx = MetaTransaction({\\r\\n            nonce: nonce,\\r\\n            from: userAddress,\\r\\n            functionSignature: functionSignature\\r\\n        });\\r\\n\\r\\n        require(\\r\\n            _verifyMetaTransaction(userAddress, metaTx, signature),\\r\\n            \\\"Signer and signature do not match\\\"\\r\\n        );\\r\\n\\r\\n        // mark nonce to prevent tx reuse\\r\\n        nonces[nonce] = true;\\r\\n    }\\r\\n\\r\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    META_TRANSACTION_TYPEHASH,\\r\\n                    metaTx.nonce,\\r\\n                    metaTx.from,\\r\\n                    keccak256(metaTx.functionSignature)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _verifyMetaTransaction(\\r\\n        address signer,\\r\\n        MetaTransaction memory metaTx,\\r\\n        bytes calldata signature\\r\\n    ) internal view returns (bool) {\\r\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\r\\n\\r\\n        // console.log(uint256(toTypedMessageHash(hashMetaTransaction(metaTx))));\\r\\n\\r\\n        _assertValidSignature(signer, toTypedMessageHash(hashMetaTransaction(metaTx)), signature);\\r\\n\\r\\n        return true;\\r\\n\\r\\n        // return\\r\\n        //     signer ==\\r\\n        //     ecrecover(\\r\\n        //         toTypedMessageHash(hashMetaTransaction(metaTx)),\\r\\n        //         sigV,\\r\\n        //         sigR,\\r\\n        //         sigS\\r\\n        //     );\\r\\n    }\\r\\n}\",\"keccak256\":\"0x287d102077ffe0d1845dcb15ba016aacd07a3e53bcc066d032b6d085ac5ddbe7\",\"license\":\"MIT\"},\"contracts/meta-transactions/NativeMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {MetaTransactionVerifier} from \\\"./MetaTransactionVerifier.sol\\\";\\r\\nimport \\\"../lib/RevertReason.sol\\\";\\r\\n\\r\\ncontract NativeMetaTransaction is MetaTransactionVerifier {\\r\\n    function executeMetaTransaction(\\r\\n        address userAddress,\\r\\n        uint256 nonce,\\r\\n        bytes calldata functionSignature,\\r\\n        bytes calldata signature\\r\\n    ) public payable returns (bytes memory) {\\r\\n        verifyMetaTransaction(userAddress, nonce, functionSignature, signature);\\r\\n\\r\\n        emit MetaTransactionExecuted(\\r\\n            userAddress,\\r\\n            payable(msg.sender),\\r\\n            functionSignature\\r\\n        );\\r\\n\\r\\n        // Append userAddress and relayer address at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call(\\r\\n            abi.encodePacked(functionSignature, userAddress)\\r\\n        );\\r\\n\\r\\n        // require(success, \\\"Function call not successful\\\");\\r\\n\\r\\n        if (!success) {\\r\\n            RevertReason.revertWithReasonIfOneIsReturned();\\r\\n            revert(\\\"Function call not successful\\\");\\r\\n        }\\r\\n\\r\\n        return returnData;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcd5f3e1226335d469aa116dec3a987da2a8867500491301bba94d19c73ca8a03\",\"license\":\"MIT\"},\"contracts/mint/AxelarSeaProjectRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./lib/IAxelarSeaNftInitializable.sol\\\";\\r\\nimport \\\"../meta-transactions/NativeMetaTransaction.sol\\\";\\r\\nimport \\\"../meta-transactions/ContextMixin.sol\\\";\\r\\nimport \\\"../lib/SafeTransferLib.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./lib/AxelarSeaMintingErrors.sol\\\";\\r\\n\\r\\ncontract AxelarSeaProjectRegistry is OwnableUpgradeable, NativeMetaTransaction, ContextMixin, ReentrancyGuardUpgradeable {\\r\\n  using SafeTransferLib for IERC20;\\r\\n\\r\\n  mapping(address => bool) public operators;\\r\\n  mapping(address => bool) public templates;\\r\\n  mapping(address => bool) public minterTemplates;\\r\\n  mapping(address => bool) public axelarSeaContract;\\r\\n\\r\\n  mapping(bytes32 => address) public projectOwner;\\r\\n  mapping(address => bytes32) public nftProject;\\r\\n\\r\\n  // 1 = Member, 2 = Admin\\r\\n  mapping(bytes32 => mapping(address => uint256)) public projectMember;\\r\\n\\r\\n  // Collection ID -> contract address\\r\\n  mapping(bytes32 => address) public collectionMapping;\\r\\n\\r\\n  // Minting fee\\r\\n  address public feeAddress;\\r\\n  uint256 public baseMintFee;\\r\\n\\r\\n  string public baseContractURI;\\r\\n  string public baseTokenURI;\\r\\n\\r\\n  // Deployment fee\\r\\n  address public newProjectFeeAddress;\\r\\n  uint256 public newProjectFeeAmount;\\r\\n\\r\\n  address public newCollectionFeeAddress;\\r\\n  uint256 public newCollectionFeeAmount;\\r\\n\\r\\n  // Best practice to leave room for more variable if upgradeable\\r\\n  uint256[200] private __GAP;\\r\\n\\r\\n  function initialize() public initializer {\\r\\n    baseMintFee = 0.02 ether; // 2%\\r\\n    baseContractURI = \\\"https://api-nftdrop.axelarsea.com/contractMetadata/\\\"; // TODO\\r\\n    baseTokenURI = \\\"https://api-nftdrop.axelarsea.com/tokenMetadata/\\\"; // TODO\\r\\n\\r\\n    feeAddress = msg.sender;\\r\\n    _initializeEIP712(\\\"AxelarSeaProjectRegistry\\\");\\r\\n\\r\\n    __Ownable_init();\\r\\n    __ReentrancyGuard_init();\\r\\n  }\\r\\n\\r\\n  modifier onlyOperator {\\r\\n    require(operators[msgSender()], \\\"Not Operator\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  event SetNewProjectFee(address indexed token, uint256 fee);\\r\\n  function setNewProjectFee(address token, uint256 fee) public onlyOwner {\\r\\n    newProjectFeeAddress = token;\\r\\n    newProjectFeeAmount = fee;\\r\\n    emit SetNewProjectFee(token, fee);\\r\\n  }\\r\\n\\r\\n  event SetNewCollectionFee(address indexed token, uint256 fee);\\r\\n  function setNewCollectionFee(address token, uint256 fee) public onlyOwner {\\r\\n    newCollectionFeeAddress = token;\\r\\n    newCollectionFeeAmount = fee;\\r\\n    emit SetNewCollectionFee(token, fee);\\r\\n  }\\r\\n\\r\\n  event SetMintFee(address indexed addr, uint256 fee);\\r\\n  function setMintFee(address addr, uint256 fee) public onlyOwner {\\r\\n    require(fee <= 1 ether, \\\"Too much fee\\\");\\r\\n    feeAddress = addr;\\r\\n    baseMintFee = fee;\\r\\n    emit SetMintFee(addr, fee);\\r\\n  }\\r\\n\\r\\n  event SetOperator(address indexed operator, bool enabled);\\r\\n  function setOperator(address operator, bool enabled) public onlyOwner {\\r\\n    operators[operator] = enabled;\\r\\n    emit SetOperator(operator, enabled);\\r\\n  }\\r\\n\\r\\n  event SetMinterTemplate(address indexed template, bool enabled);\\r\\n  function setMinterTemplate(address template, bool enabled) public onlyOwner {\\r\\n    minterTemplates[template] = enabled;\\r\\n    emit SetMinterTemplate(template, enabled);\\r\\n  }\\r\\n\\r\\n  event SetTemplate(address indexed template, bool enabled);\\r\\n  function setTemplate(address template, bool enabled) public onlyOwner {\\r\\n    templates[template] = enabled;\\r\\n    emit SetTemplate(template, enabled);\\r\\n  }\\r\\n\\r\\n  event SetAxelarSeaContract(address indexed addr, bool enabled);\\r\\n  function setAxelarSeaContract(address addr, bool enabled) public onlyOwner {\\r\\n    axelarSeaContract[addr] = enabled;\\r\\n    emit SetAxelarSeaContract(addr, enabled);\\r\\n  }\\r\\n\\r\\n  event NewProject(address indexed owner, bytes32 projectId);\\r\\n  function _newProject(address owner, bytes32 projectId) public onlyOperator {\\r\\n    projectOwner[projectId] = owner;\\r\\n    projectMember[projectId][owner] = 2;\\r\\n\\r\\n    // New project fee only paid once per chain\\r\\n    if (newProjectFeeAddress != address(0) && newProjectFeeAmount > 0) {\\r\\n      IERC20(newProjectFeeAddress).safeTransferFrom(msgSender(), address(this), newProjectFeeAmount);\\r\\n    }\\r\\n\\r\\n    emit NewProject(owner, projectId);\\r\\n  }\\r\\n\\r\\n  function newProject(address owner, bytes32 projectId) public onlyOperator {\\r\\n    if (owner == address(0)) revert Forbidden();\\r\\n    _newProject(owner, projectId);\\r\\n  }\\r\\n\\r\\n  event SetProjectMember(bytes32 indexed projectId, address indexed member, uint256 level);\\r\\n  function setProjectMember(bytes32 projectId, address member, uint256 level) public {\\r\\n    // Invalid level || Not admin || Change owner || Invalid project -> Forbidden || Invalid member -> Forbidden\\r\\n    if(level > 2 || projectMember[projectId][msgSender()] != 2 || member == projectOwner[projectId] || projectOwner[projectId] == address(0) || member == address(0)) revert Forbidden();\\r\\n    projectMember[projectId][member] = level;\\r\\n    emit SetProjectMember(projectId, member, level);\\r\\n  }\\r\\n\\r\\n  event SetProjectOwner(bytes32 indexed projectId, address indexed owner);\\r\\n  function setProjectOwner(bytes32 projectId, address owner) public {\\r\\n    // Not owner || New member not admin || Invalid project || Invalid owner -> Forbidden\\r\\n    if(msgSender() != projectOwner[projectId] || projectMember[projectId][owner] != 2 || projectOwner[projectId] == address(0) || owner == address(0)) revert Forbidden();\\r\\n    projectOwner[projectId] = owner;\\r\\n    emit SetProjectOwner(projectId, owner);\\r\\n  }\\r\\n\\r\\n  // Only linkable if that NFT implement Ownable\\r\\n  event LinkProject(address indexed contractAddress, bytes32 projectId);\\r\\n  function _linkProject(address contractAddress, bytes32 projectId) internal {\\r\\n    address owner = Ownable(contractAddress).owner();\\r\\n\\r\\n    // If no owner || owner of nft is not a member of project -> Forbidden\\r\\n    if(owner == address(0) || projectMember[projectId][owner] == 0) revert Forbidden();\\r\\n\\r\\n    nftProject[contractAddress] = projectId;\\r\\n\\r\\n    emit LinkProject(contractAddress, projectId);\\r\\n  }\\r\\n\\r\\n  function linkProject(address contractAddress, bytes32 projectId) public nonReentrant {\\r\\n    // Check support interface\\r\\n    require(IERC165(contractAddress).supportsInterface(0x80ac58cd) || IERC165(contractAddress).supportsInterface(0xd9b67a26), \\\"Not NFT\\\");\\r\\n\\r\\n    _linkProject(contractAddress, projectId);\\r\\n  }\\r\\n\\r\\n  event DeployNft(address indexed template, address indexed owner, address indexed contractAddress, bytes32 collectionId, bytes32 projectId);\\r\\n  function deployNft(\\r\\n    address template,\\r\\n    address owner,\\r\\n    bytes32 collectionId,\\r\\n    bytes32 projectId,\\r\\n    uint256 exclusiveLevel,\\r\\n    uint256 maxSupply,\\r\\n    address royaltyReceiver,\\r\\n    uint256 royaltyPercentage,\\r\\n    string memory name,\\r\\n    string memory symbol\\r\\n  ) public onlyOperator nonReentrant returns(IAxelarSeaNftInitializable nft) {\\r\\n    if (!templates[template]) {\\r\\n      revert InvalidTemplate(template);\\r\\n    }\\r\\n\\r\\n    if (collectionMapping[collectionId] != address(0)) {\\r\\n      revert DuplicatedCollection(collectionId);\\r\\n    }\\r\\n\\r\\n    // Collection deployment fee\\r\\n    if (newCollectionFeeAddress != address(0) && newCollectionFeeAmount > 0) {\\r\\n      IERC20(newCollectionFeeAddress).safeTransferFrom(msgSender(), address(this), newCollectionFeeAmount);\\r\\n    }\\r\\n\\r\\n    nft = IAxelarSeaNftInitializable(Clones.clone(template));\\r\\n    nft.initialize(owner, collectionId, exclusiveLevel, maxSupply, name, symbol);\\r\\n\\r\\n    if (projectOwner[projectId] == address(0)) {\\r\\n      _newProject(owner, projectId);\\r\\n    }\\r\\n    \\r\\n    _linkProject(address(nft), projectId);\\r\\n\\r\\n    if (royaltyReceiver != address(0)) {\\r\\n      nft.setRoyalty(royaltyReceiver, royaltyPercentage);\\r\\n    }\\r\\n\\r\\n    collectionMapping[collectionId] = address(nft);\\r\\n\\r\\n    emit DeployNft(template, owner, address(nft), collectionId, projectId);\\r\\n  }\\r\\n\\r\\n  function deployNftWithMinter(\\r\\n    address template,\\r\\n    address minterTemplate,\\r\\n    address owner,\\r\\n    bytes32 collectionId,\\r\\n    bytes32 projectId,\\r\\n    uint256 exclusiveLevel,\\r\\n    uint256 maxSupply,\\r\\n    address royaltyReceiver,\\r\\n    uint256 royaltyPercentage,\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    bytes memory data\\r\\n  ) public onlyOperator nonReentrant returns(IAxelarSeaNftInitializable nft, IAxelarSeaMinterInitializable minter) {\\r\\n    if (!templates[template]) {\\r\\n      revert InvalidTemplate(template);\\r\\n    }\\r\\n\\r\\n    if (!minterTemplates[minterTemplate]) {\\r\\n      revert InvalidTemplate(minterTemplate);\\r\\n    }\\r\\n  \\r\\n    if (collectionMapping[collectionId] != address(0)) {\\r\\n      revert DuplicatedCollection(collectionId);\\r\\n    }\\r\\n\\r\\n    // Collection deployment fee\\r\\n    if (newCollectionFeeAddress != address(0) && newCollectionFeeAmount > 0) {\\r\\n      IERC20(newCollectionFeeAddress).safeTransferFrom(msgSender(), address(this), newCollectionFeeAmount);\\r\\n    }\\r\\n\\r\\n    nft = IAxelarSeaNftInitializable(Clones.clone(template));\\r\\n    nft.initialize(owner, collectionId, exclusiveLevel, maxSupply, name, symbol);\\r\\n\\r\\n    if (projectOwner[projectId] == address(0)) {\\r\\n      _newProject(owner, projectId);\\r\\n    }\\r\\n    \\r\\n    _linkProject(address(nft), projectId);\\r\\n\\r\\n    minter = nft.deployMinter(minterTemplate, data);\\r\\n\\r\\n    if (royaltyReceiver != address(0)) {\\r\\n      nft.setRoyalty(royaltyReceiver, royaltyPercentage);\\r\\n    }\\r\\n\\r\\n    collectionMapping[collectionId] = address(nft);\\r\\n\\r\\n    emit DeployNft(template, owner, address(nft), collectionId, projectId);\\r\\n  }\\r\\n\\r\\n  function setBaseContractURI(string memory _uri) public onlyOwner {\\r\\n    baseContractURI = _uri;\\r\\n  }\\r\\n\\r\\n  function setBaseTokenURI(string memory _uri) public onlyOwner {\\r\\n    baseTokenURI = _uri;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xec3a6ba46506347857d2515f2da2be00e944326545f2aa1a927ca30f253e8c68\",\"license\":\"None\"},\"contracts/mint/lib/AxelarSeaMintingErrors.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity >=0.8.7;\\r\\n\\r\\nerror InvalidTemplate(address template);\\r\\nerror Forbidden();\\r\\nerror NotMintingTime();\\r\\nerror MintPerWalletLimited(uint256 maxAmount);\\r\\nerror SupplyLimited();\\r\\nerror NotWhitelisted();\\r\\nerror TransferFailed();\\r\\nerror DuplicatedCollection(bytes32 collectionId);\",\"keccak256\":\"0x9194f7a9fbc64488d4a0e9c749a15a2f2b167ca10649710c27cdda006c046250\",\"license\":\"None\"},\"contracts/mint/lib/IAxelarSeaNftInitializable.sol\":{\"content\":\"//SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAxelarSeaNftInitializable {\\r\\n  function initialize(\\r\\n    address owner,\\r\\n    bytes32 collectionId,\\r\\n    uint256 exclusiveLevel,\\r\\n    uint256 maxSupply,\\r\\n    string memory name, \\r\\n    string memory symbol\\r\\n  ) external;\\r\\n\\r\\n  function deployMinter(\\r\\n    address template,\\r\\n    bytes memory data\\r\\n  ) external returns(IAxelarSeaMinterInitializable minter);\\r\\n\\r\\n  function mint(address to, uint256 amount) external;\\r\\n\\r\\n  function setRoyalty(address receiver, uint256 percentage) external;\\r\\n}\\r\\n\\r\\ninterface IAxelarSeaMinterInitializable {\\r\\n  function initialize(\\r\\n    address targetNft,\\r\\n    address owner,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xce8bd5f59820df941e95c6e110f021f6db5992c9685e7e76cd2ca7222fcb411d\",\"license\":\"None\"},\"contracts/seaport/interfaces/EIP1271Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface EIP1271Interface {\\r\\n    function isValidSignature(bytes32 digest, bytes calldata signature)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xb71aea6c8df453f992f54a62e69bd99ddc74938a43d71a622f52ace6c81372fd\",\"license\":\"MIT\"},\"contracts/seaport/interfaces/SignatureVerificationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/**\\r\\n * @title SignatureVerificationErrors\\r\\n * @author 0age\\r\\n * @notice SignatureVerificationErrors contains all errors related to signature\\r\\n *         verification.\\r\\n */\\r\\ninterface SignatureVerificationErrors {\\r\\n    /**\\r\\n     * @dev Revert with an error when a signature that does not contain a v\\r\\n     *      value of 27 or 28 has been supplied.\\r\\n     *\\r\\n     * @param v The invalid v value.\\r\\n     */\\r\\n    error BadSignatureV(uint8 v);\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with an error when the signer recovered by the supplied\\r\\n     *      signature does not match the offerer or an allowed EIP-1271 signer\\r\\n     *      as specified by the offerer in the event they are a contract.\\r\\n     */\\r\\n    error InvalidSigner();\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with an error when a signer cannot be recovered from the\\r\\n     *      supplied signature.\\r\\n     */\\r\\n    error InvalidSignature();\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with an error when an EIP-1271 call to an account fails.\\r\\n     */\\r\\n    error BadContractSignature();\\r\\n}\\r\\n\",\"keccak256\":\"0xdbf5f5e170028ae579ecd0846aedb7b304fa54db5eb37236bd180a7bcc2dd70a\",\"license\":\"MIT\"},\"contracts/seaport/lib/ConsiderationConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/*\\r\\n * -------------------------- Disambiguation & Other Notes ---------------------\\r\\n *    - The term \\\"head\\\" is used as it is in the documentation for ABI encoding,\\r\\n *      but only in reference to dynamic types, i.e. it always refers to the\\r\\n *      offset or pointer to the body of a dynamic type. In calldata, the head\\r\\n *      is always an offset (relative to the parent object), while in memory,\\r\\n *      the head is always the pointer to the body. More information found here:\\r\\n *      https://docs.soliditylang.org/en/v0.8.14/abi-spec.html#argument-encoding\\r\\n *        - Note that the length of an array is separate from and precedes the\\r\\n *          head of the array.\\r\\n *\\r\\n *    - The term \\\"body\\\" is used in place of the term \\\"head\\\" used in the ABI\\r\\n *      documentation. It refers to the start of the data for a dynamic type,\\r\\n *      e.g. the first word of a struct or the first word of the first element\\r\\n *      in an array.\\r\\n *\\r\\n *    - The term \\\"pointer\\\" is used to describe the absolute position of a value\\r\\n *      and never an offset relative to another value.\\r\\n *        - The suffix \\\"_ptr\\\" refers to a memory pointer.\\r\\n *        - The suffix \\\"_cdPtr\\\" refers to a calldata pointer.\\r\\n *\\r\\n *    - The term \\\"offset\\\" is used to describe the position of a value relative\\r\\n *      to some parent value. For example, OrderParameters_conduit_offset is the\\r\\n *      offset to the \\\"conduit\\\" value in the OrderParameters struct relative to\\r\\n *      the start of the body.\\r\\n *        - Note: Offsets are used to derive pointers.\\r\\n *\\r\\n *    - Some structs have pointers defined for all of their fields in this file.\\r\\n *      Lines which are commented out are fields that are not used in the\\r\\n *      codebase but have been left in for readability.\\r\\n */\\r\\n\\r\\n// Declare constants for name, version, and reentrancy sentinel values.\\r\\n\\r\\n// Name is right padded, so it touches the length which is left padded. This\\r\\n// enables writing both values at once. Length goes at byte 95 in memory, and\\r\\n// name fills bytes 96-109, so both values can be written left-padded to 77.\\r\\nuint256 constant NameLengthPtr = 77;\\r\\nuint256 constant NameWithLength = 0x0d436F6E73696465726174696F6E;\\r\\n\\r\\nuint256 constant Version = 0x312e31;\\r\\nuint256 constant Version_length = 3;\\r\\nuint256 constant Version_shift = 0xe8;\\r\\n\\r\\nuint256 constant _NOT_ENTERED = 1;\\r\\nuint256 constant _ENTERED = 2;\\r\\n\\r\\n// Common Offsets\\r\\n// Offsets for identically positioned fields shared by:\\r\\n// OfferItem, ConsiderationItem, SpentItem, ReceivedItem\\r\\n\\r\\nuint256 constant Common_token_offset = 0x20;\\r\\nuint256 constant Common_identifier_offset = 0x40;\\r\\nuint256 constant Common_amount_offset = 0x60;\\r\\n\\r\\nuint256 constant ReceivedItem_size = 0xa0;\\r\\nuint256 constant ReceivedItem_amount_offset = 0x60;\\r\\nuint256 constant ReceivedItem_recipient_offset = 0x80;\\r\\n\\r\\nuint256 constant ReceivedItem_CommonParams_size = 0x60;\\r\\n\\r\\nuint256 constant ConsiderationItem_recipient_offset = 0xa0;\\r\\n// Store the same constant in an abbreviated format for a line length fix.\\r\\nuint256 constant ConsiderItem_recipient_offset = 0xa0;\\r\\n\\r\\nuint256 constant Execution_offerer_offset = 0x20;\\r\\nuint256 constant Execution_conduit_offset = 0x40;\\r\\n\\r\\nuint256 constant InvalidFulfillmentComponentData_error_signature = (\\r\\n    0x7fda727900000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidFulfillmentComponentData_error_len = 0x04;\\r\\n\\r\\nuint256 constant Panic_error_signature = (\\r\\n    0x4e487b7100000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant Panic_error_offset = 0x04;\\r\\nuint256 constant Panic_error_length = 0x24;\\r\\nuint256 constant Panic_arithmetic = 0x11;\\r\\n\\r\\nuint256 constant MissingItemAmount_error_signature = (\\r\\n    0x91b3e51400000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant MissingItemAmount_error_len = 0x04;\\r\\n\\r\\nuint256 constant OrderParameters_offer_head_offset = 0x40;\\r\\nuint256 constant OrderParameters_consideration_head_offset = 0x60;\\r\\nuint256 constant OrderParameters_conduit_offset = 0x120;\\r\\nuint256 constant OrderParameters_counter_offset = 0x140;\\r\\n\\r\\nuint256 constant Fulfillment_itemIndex_offset = 0x20;\\r\\n\\r\\nuint256 constant AdvancedOrder_numerator_offset = 0x20;\\r\\n\\r\\nuint256 constant AlmostOneWord = 0x1f;\\r\\nuint256 constant OneWord = 0x20;\\r\\nuint256 constant TwoWords = 0x40;\\r\\nuint256 constant ThreeWords = 0x60;\\r\\nuint256 constant FourWords = 0x80;\\r\\nuint256 constant FiveWords = 0xa0;\\r\\n\\r\\nuint256 constant FreeMemoryPointerSlot = 0x40;\\r\\nuint256 constant ZeroSlot = 0x60;\\r\\nuint256 constant DefaultFreeMemoryPointer = 0x80;\\r\\n\\r\\nuint256 constant Slot0x80 = 0x80;\\r\\nuint256 constant Slot0xA0 = 0xa0;\\r\\n\\r\\nuint256 constant BasicOrder_endAmount_cdPtr = 0x104;\\r\\nuint256 constant BasicOrder_common_params_size = 0xa0;\\r\\nuint256 constant BasicOrder_considerationHashesArray_ptr = 0x160;\\r\\n\\r\\nuint256 constant EIP712_Order_size = 0x180;\\r\\nuint256 constant EIP712_OfferItem_size = 0xc0;\\r\\nuint256 constant EIP712_ConsiderationItem_size = 0xe0;\\r\\nuint256 constant AdditionalRecipients_size = 0x40;\\r\\n\\r\\nuint256 constant EIP712_DomainSeparator_offset = 0x02;\\r\\nuint256 constant EIP712_OrderHash_offset = 0x22;\\r\\nuint256 constant EIP712_DigestPayload_size = 0x42;\\r\\n\\r\\nuint256 constant receivedItemsHash_ptr = 0x60;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  data for OrderFulfilled\\r\\n *\\r\\n *   event OrderFulfilled(\\r\\n *     bytes32 orderHash,\\r\\n *     address indexed offerer,\\r\\n *     address indexed zone,\\r\\n *     address fulfiller,\\r\\n *     SpentItem[] offer,\\r\\n *       > (itemType, token, id, amount)\\r\\n *     ReceivedItem[] consideration\\r\\n *       > (itemType, token, id, amount, recipient)\\r\\n *   )\\r\\n *\\r\\n *  - 0x00: orderHash\\r\\n *  - 0x20: fulfiller\\r\\n *  - 0x40: offer offset (0x80)\\r\\n *  - 0x60: consideration offset (0x120)\\r\\n *  - 0x80: offer.length (1)\\r\\n *  - 0xa0: offerItemType\\r\\n *  - 0xc0: offerToken\\r\\n *  - 0xe0: offerIdentifier\\r\\n *  - 0x100: offerAmount\\r\\n *  - 0x120: consideration.length (1 + additionalRecipients.length)\\r\\n *  - 0x140: considerationItemType\\r\\n *  - 0x160: considerationToken\\r\\n *  - 0x180: considerationIdentifier\\r\\n *  - 0x1a0: considerationAmount\\r\\n *  - 0x1c0: considerationRecipient\\r\\n *  - ...\\r\\n */\\r\\n\\r\\n// Minimum length of the OrderFulfilled event data.\\r\\n// Must be added to the size of the ReceivedItem array for additionalRecipients\\r\\n// (0xa0 * additionalRecipients.length) to calculate full size of the buffer.\\r\\nuint256 constant OrderFulfilled_baseSize = 0x1e0;\\r\\nuint256 constant OrderFulfilled_selector = (\\r\\n    0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31\\r\\n);\\r\\n\\r\\n// Minimum offset in memory to OrderFulfilled event data.\\r\\n// Must be added to the size of the EIP712 hash array for additionalRecipients\\r\\n// (32 * additionalRecipients.length) to calculate the pointer to event data.\\r\\nuint256 constant OrderFulfilled_baseOffset = 0x180;\\r\\nuint256 constant OrderFulfilled_consideration_length_baseOffset = 0x2a0;\\r\\nuint256 constant OrderFulfilled_offer_length_baseOffset = 0x200;\\r\\n\\r\\n// uint256 constant OrderFulfilled_orderHash_offset = 0x00;\\r\\nuint256 constant OrderFulfilled_fulfiller_offset = 0x20;\\r\\nuint256 constant OrderFulfilled_offer_head_offset = 0x40;\\r\\nuint256 constant OrderFulfilled_offer_body_offset = 0x80;\\r\\nuint256 constant OrderFulfilled_consideration_head_offset = 0x60;\\r\\nuint256 constant OrderFulfilled_consideration_body_offset = 0x120;\\r\\n\\r\\n// BasicOrderParameters\\r\\nuint256 constant BasicOrder_parameters_cdPtr = 0x04;\\r\\nuint256 constant BasicOrder_considerationToken_cdPtr = 0x24;\\r\\n// uint256 constant BasicOrder_considerationIdentifier_cdPtr = 0x44;\\r\\nuint256 constant BasicOrder_considerationAmount_cdPtr = 0x64;\\r\\nuint256 constant BasicOrder_offerer_cdPtr = 0x84;\\r\\nuint256 constant BasicOrder_zone_cdPtr = 0xa4;\\r\\nuint256 constant BasicOrder_offerToken_cdPtr = 0xc4;\\r\\n// uint256 constant BasicOrder_offerIdentifier_cdPtr = 0xe4;\\r\\nuint256 constant BasicOrder_offerAmount_cdPtr = 0x104;\\r\\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\\r\\nuint256 constant BasicOrder_startTime_cdPtr = 0x144;\\r\\n// uint256 constant BasicOrder_endTime_cdPtr = 0x164;\\r\\n// uint256 constant BasicOrder_zoneHash_cdPtr = 0x184;\\r\\n// uint256 constant BasicOrder_salt_cdPtr = 0x1a4;\\r\\nuint256 constant BasicOrder_offererConduit_cdPtr = 0x1c4;\\r\\nuint256 constant BasicOrder_fulfillerConduit_cdPtr = 0x1e4;\\r\\nuint256 constant BasicOrder_totalOriginalAdditionalRecipients_cdPtr = 0x204;\\r\\nuint256 constant BasicOrder_additionalRecipients_head_cdPtr = 0x224;\\r\\nuint256 constant BasicOrder_signature_cdPtr = 0x244;\\r\\nuint256 constant BasicOrder_additionalRecipients_length_cdPtr = 0x264;\\r\\nuint256 constant BasicOrder_additionalRecipients_data_cdPtr = 0x284;\\r\\n\\r\\nuint256 constant BasicOrder_parameters_ptr = 0x20;\\r\\n\\r\\nuint256 constant BasicOrder_basicOrderType_range = 0x18; // 24 values\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for ConsiderationItem\\r\\n *   - 0x80: ConsiderationItem EIP-712 typehash (constant)\\r\\n *   - 0xa0: itemType\\r\\n *   - 0xc0: token\\r\\n *   - 0xe0: identifier\\r\\n *   - 0x100: startAmount\\r\\n *   - 0x120: endAmount\\r\\n *   - 0x140: recipient\\r\\n */\\r\\nuint256 constant BasicOrder_considerationItem_typeHash_ptr = 0x80; // memoryPtr\\r\\nuint256 constant BasicOrder_considerationItem_itemType_ptr = 0xa0;\\r\\nuint256 constant BasicOrder_considerationItem_token_ptr = 0xc0;\\r\\nuint256 constant BasicOrder_considerationItem_identifier_ptr = 0xe0;\\r\\nuint256 constant BasicOrder_considerationItem_startAmount_ptr = 0x100;\\r\\nuint256 constant BasicOrder_considerationItem_endAmount_ptr = 0x120;\\r\\n// uint256 constant BasicOrder_considerationItem_recipient_ptr = 0x140;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for OfferItem\\r\\n *   - 0x80:  OfferItem EIP-712 typehash (constant)\\r\\n *   - 0xa0:  itemType\\r\\n *   - 0xc0:  token\\r\\n *   - 0xe0:  identifier (reused for offeredItemsHash)\\r\\n *   - 0x100: startAmount\\r\\n *   - 0x120: endAmount\\r\\n */\\r\\nuint256 constant BasicOrder_offerItem_typeHash_ptr = DefaultFreeMemoryPointer;\\r\\nuint256 constant BasicOrder_offerItem_itemType_ptr = 0xa0;\\r\\nuint256 constant BasicOrder_offerItem_token_ptr = 0xc0;\\r\\n// uint256 constant BasicOrder_offerItem_identifier_ptr = 0xe0;\\r\\n// uint256 constant BasicOrder_offerItem_startAmount_ptr = 0x100;\\r\\nuint256 constant BasicOrder_offerItem_endAmount_ptr = 0x120;\\r\\n\\r\\n/*\\r\\n *  Memory layout in _prepareBasicFulfillmentFromCalldata of\\r\\n *  EIP712 data for Order\\r\\n *   - 0x80:   Order EIP-712 typehash (constant)\\r\\n *   - 0xa0:   orderParameters.offerer\\r\\n *   - 0xc0:   orderParameters.zone\\r\\n *   - 0xe0:   keccak256(abi.encodePacked(offerHashes))\\r\\n *   - 0x100:  keccak256(abi.encodePacked(considerationHashes))\\r\\n *   - 0x120:  orderType\\r\\n *   - 0x140:  startTime\\r\\n *   - 0x160:  endTime\\r\\n *   - 0x180:  zoneHash\\r\\n *   - 0x1a0:  salt\\r\\n *   - 0x1c0:  conduit\\r\\n *   - 0x1e0:  _counters[orderParameters.offerer] (from storage)\\r\\n */\\r\\nuint256 constant BasicOrder_order_typeHash_ptr = 0x80;\\r\\nuint256 constant BasicOrder_order_offerer_ptr = 0xa0;\\r\\n// uint256 constant BasicOrder_order_zone_ptr = 0xc0;\\r\\nuint256 constant BasicOrder_order_offerHashes_ptr = 0xe0;\\r\\nuint256 constant BasicOrder_order_considerationHashes_ptr = 0x100;\\r\\nuint256 constant BasicOrder_order_orderType_ptr = 0x120;\\r\\nuint256 constant BasicOrder_order_startTime_ptr = 0x140;\\r\\n// uint256 constant BasicOrder_order_endTime_ptr = 0x160;\\r\\n// uint256 constant BasicOrder_order_zoneHash_ptr = 0x180;\\r\\n// uint256 constant BasicOrder_order_salt_ptr = 0x1a0;\\r\\n// uint256 constant BasicOrder_order_conduitKey_ptr = 0x1c0;\\r\\nuint256 constant BasicOrder_order_counter_ptr = 0x1e0;\\r\\nuint256 constant BasicOrder_additionalRecipients_head_ptr = 0x240;\\r\\nuint256 constant BasicOrder_signature_ptr = 0x260;\\r\\n\\r\\n// Signature-related\\r\\nbytes32 constant EIP2098_allButHighestBitMask = (\\r\\n    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\r\\n);\\r\\nbytes32 constant ECDSA_twentySeventhAndTwentyEighthBytesSet = (\\r\\n    0x0000000000000000000000000000000000000000000000000000000101000000\\r\\n);\\r\\nuint256 constant ECDSA_MaxLength = 65;\\r\\nuint256 constant ECDSA_signature_s_offset = 0x40;\\r\\nuint256 constant ECDSA_signature_v_offset = 0x60;\\r\\n\\r\\nbytes32 constant EIP1271_isValidSignature_selector = (\\r\\n    0x1626ba7e00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant EIP1271_isValidSignature_signatureHead_negativeOffset = 0x20;\\r\\nuint256 constant EIP1271_isValidSignature_digest_negativeOffset = 0x40;\\r\\nuint256 constant EIP1271_isValidSignature_selector_negativeOffset = 0x44;\\r\\nuint256 constant EIP1271_isValidSignature_calldata_baseLength = 0x64;\\r\\n\\r\\nuint256 constant EIP1271_isValidSignature_signature_head_offset = 0x40;\\r\\n\\r\\n// abi.encodeWithSignature(\\\"NoContract(address)\\\")\\r\\nuint256 constant NoContract_error_signature = (\\r\\n    0x5f15d67200000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant NoContract_error_sig_ptr = 0x0;\\r\\nuint256 constant NoContract_error_token_ptr = 0x4;\\r\\nuint256 constant NoContract_error_length = 0x24; // 4 + 32 == 36\\r\\n\\r\\nuint256 constant EIP_712_PREFIX = (\\r\\n    0x1901000000000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant ExtraGasBuffer = 0x20;\\r\\nuint256 constant CostPerWord = 3;\\r\\nuint256 constant MemoryExpansionCoefficient = 0x200; // 512\\r\\n\\r\\nuint256 constant Create2AddressDerivation_ptr = 0x0b;\\r\\nuint256 constant Create2AddressDerivation_length = 0x55;\\r\\n\\r\\nuint256 constant MaskOverByteTwelve = (\\r\\n    0x0000000000000000000000ff0000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant MaskOverLastTwentyBytes = (\\r\\n    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff\\r\\n);\\r\\n\\r\\nuint256 constant MaskOverFirstFourBytes = (\\r\\n    0xffffffff00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant Conduit_execute_signature = (\\r\\n    0x4ce34aa200000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\n\\r\\nuint256 constant MaxUint8 = 0xff;\\r\\nuint256 constant MaxUint120 = 0xffffffffffffffffffffffffffffff;\\r\\n\\r\\nuint256 constant Conduit_execute_ConduitTransfer_ptr = 0x20;\\r\\nuint256 constant Conduit_execute_ConduitTransfer_length = 0x01;\\r\\n\\r\\nuint256 constant Conduit_execute_ConduitTransfer_offset_ptr = 0x04;\\r\\nuint256 constant Conduit_execute_ConduitTransfer_length_ptr = 0x24;\\r\\nuint256 constant Conduit_execute_transferItemType_ptr = 0x44;\\r\\nuint256 constant Conduit_execute_transferToken_ptr = 0x64;\\r\\nuint256 constant Conduit_execute_transferFrom_ptr = 0x84;\\r\\nuint256 constant Conduit_execute_transferTo_ptr = 0xa4;\\r\\nuint256 constant Conduit_execute_transferIdentifier_ptr = 0xc4;\\r\\nuint256 constant Conduit_execute_transferAmount_ptr = 0xe4;\\r\\n\\r\\nuint256 constant OneConduitExecute_size = 0x104;\\r\\n\\r\\n// Sentinel value to indicate that the conduit accumulator is not armed.\\r\\nuint256 constant AccumulatorDisarmed = 0x20;\\r\\nuint256 constant AccumulatorArmed = 0x40;\\r\\nuint256 constant Accumulator_conduitKey_ptr = 0x20;\\r\\nuint256 constant Accumulator_selector_ptr = 0x40;\\r\\nuint256 constant Accumulator_array_offset_ptr = 0x44;\\r\\nuint256 constant Accumulator_array_length_ptr = 0x64;\\r\\n\\r\\nuint256 constant Accumulator_itemSizeOffsetDifference = 0x3c;\\r\\n\\r\\nuint256 constant Accumulator_array_offset = 0x20;\\r\\nuint256 constant Conduit_transferItem_size = 0xc0;\\r\\nuint256 constant Conduit_transferItem_token_ptr = 0x20;\\r\\nuint256 constant Conduit_transferItem_from_ptr = 0x40;\\r\\nuint256 constant Conduit_transferItem_to_ptr = 0x60;\\r\\nuint256 constant Conduit_transferItem_identifier_ptr = 0x80;\\r\\nuint256 constant Conduit_transferItem_amount_ptr = 0xa0;\\r\\n\\r\\n// Declare constant for errors related to amount derivation.\\r\\n// error InexactFraction() @ AmountDerivationErrors.sol\\r\\nuint256 constant InexactFraction_error_signature = (\\r\\n    0xc63cf08900000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InexactFraction_error_len = 0x04;\\r\\n\\r\\n// Declare constant for errors related to signature verification.\\r\\nuint256 constant Ecrecover_precompile = 1;\\r\\nuint256 constant Ecrecover_args_size = 0x80;\\r\\nuint256 constant Signature_lower_v = 27;\\r\\n\\r\\n// error BadSignatureV(uint8) @ SignatureVerificationErrors.sol\\r\\nuint256 constant BadSignatureV_error_signature = (\\r\\n    0x1f003d0a00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant BadSignatureV_error_offset = 0x04;\\r\\nuint256 constant BadSignatureV_error_length = 0x24;\\r\\n\\r\\n// error InvalidSigner() @ SignatureVerificationErrors.sol\\r\\nuint256 constant InvalidSigner_error_signature = (\\r\\n    0x815e1d6400000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidSigner_error_length = 0x04;\\r\\n\\r\\n// error InvalidSignature() @ SignatureVerificationErrors.sol\\r\\nuint256 constant InvalidSignature_error_signature = (\\r\\n    0x8baa579f00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant InvalidSignature_error_length = 0x04;\\r\\n\\r\\n// error BadContractSignature() @ SignatureVerificationErrors.sol\\r\\nuint256 constant BadContractSignature_error_signature = (\\r\\n    0x4f7fb80d00000000000000000000000000000000000000000000000000000000\\r\\n);\\r\\nuint256 constant BadContractSignature_error_length = 0x04;\\r\\n\\r\\nuint256 constant NumBitsAfterSelector = 0xe0;\\r\\n\\r\\n// 69 is the lowest modulus for which the remainder\\r\\n// of every selector other than the two match functions\\r\\n// is greater than those of the match functions.\\r\\nuint256 constant NonMatchSelector_MagicModulus = 69;\\r\\n// Of the two match function selectors, the highest\\r\\n// remainder modulo 69 is 29.\\r\\nuint256 constant NonMatchSelector_MagicRemainder = 0x1d;\\r\\n\",\"keccak256\":\"0x846b840742ea7f1b43a399840c09a3ffda40d8e7c95f90e63b5c8fb47e908856\",\"license\":\"MIT\"},\"contracts/seaport/lib/LowLevelHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./ConsiderationConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LowLevelHelpers\\r\\n * @author 0age\\r\\n * @notice LowLevelHelpers contains logic for performing various low-level\\r\\n *         operations.\\r\\n */\\r\\ncontract LowLevelHelpers {\\r\\n    /**\\r\\n     * @dev Internal view function to staticcall an arbitrary target with given\\r\\n     *      calldata. Note that no data is written to memory and no contract\\r\\n     *      size check is performed.\\r\\n     *\\r\\n     * @param target   The account to staticcall.\\r\\n     * @param callData The calldata to supply when staticcalling the target.\\r\\n     *\\r\\n     * @return success The status of the staticcall to the target.\\r\\n     */\\r\\n    function _staticcall(address target, bytes memory callData)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool success)\\r\\n    {\\r\\n        assembly {\\r\\n            // Perform the staticcall.\\r\\n            success := staticcall(\\r\\n                gas(),\\r\\n                target,\\r\\n                add(callData, OneWord),\\r\\n                mload(callData),\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal view function to revert and pass along the revert reason if\\r\\n     *      data was returned by the last call and that the size of that data\\r\\n     *      does not exceed the currently allocated memory size.\\r\\n     */\\r\\n    function _revertWithReasonIfOneIsReturned() internal view {\\r\\n        assembly {\\r\\n            // If it returned a message, bubble it up as long as sufficient gas\\r\\n            // remains to do so:\\r\\n            if returndatasize() {\\r\\n                // Ensure that sufficient gas is available to copy returndata\\r\\n                // while expanding memory where necessary. Start by computing\\r\\n                // the word size of returndata and allocated memory.\\r\\n                let returnDataWords := div(\\r\\n                    add(returndatasize(), AlmostOneWord),\\r\\n                    OneWord\\r\\n                )\\r\\n\\r\\n                // Note: use the free memory pointer in place of msize() to work\\r\\n                // around a Yul warning that prevents accessing msize directly\\r\\n                // when the IR pipeline is activated.\\r\\n                let msizeWords := div(mload(FreeMemoryPointerSlot), OneWord)\\r\\n\\r\\n                // Next, compute the cost of the returndatacopy.\\r\\n                let cost := mul(CostPerWord, returnDataWords)\\r\\n\\r\\n                // Then, compute cost of new memory allocation.\\r\\n                if gt(returnDataWords, msizeWords) {\\r\\n                    cost := add(\\r\\n                        cost,\\r\\n                        add(\\r\\n                            mul(sub(returnDataWords, msizeWords), CostPerWord),\\r\\n                            div(\\r\\n                                sub(\\r\\n                                    mul(returnDataWords, returnDataWords),\\r\\n                                    mul(msizeWords, msizeWords)\\r\\n                                ),\\r\\n                                MemoryExpansionCoefficient\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                }\\r\\n\\r\\n                // Finally, add a small constant and compare to gas remaining;\\r\\n                // bubble up the revert data if enough gas is still available.\\r\\n                if lt(add(cost, ExtraGasBuffer), gas()) {\\r\\n                    // Copy returndata to memory; overwrite existing memory.\\r\\n                    returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n                    // Revert, specifying memory region with copied returndata.\\r\\n                    revert(0, returndatasize())\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal pure function to determine if the first word of returndata\\r\\n     *      matches an expected magic value.\\r\\n     *\\r\\n     * @param expected The expected magic value.\\r\\n     *\\r\\n     * @return A boolean indicating whether the expected value matches the one\\r\\n     *         located in the first word of returndata.\\r\\n     */\\r\\n    function _doesNotMatchMagic(bytes4 expected) internal pure returns (bool) {\\r\\n        // Declare a variable for the value held by the return data buffer.\\r\\n        bytes4 result;\\r\\n\\r\\n        // Utilize assembly in order to read directly from returndata buffer.\\r\\n        assembly {\\r\\n            // Only put result on stack if return data is exactly one word.\\r\\n            if eq(returndatasize(), OneWord) {\\r\\n                // Copy the word directly from return data into scratch space.\\r\\n                returndatacopy(0, 0, OneWord)\\r\\n\\r\\n                // Take value from scratch space and place it on the stack.\\r\\n                result := mload(0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Return a boolean indicating whether expected and located value match.\\r\\n        return result != expected;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd85e5873064cf540f137adaa566da6fc6d7b9b366e6ab94da60c4648e1e28a03\",\"license\":\"MIT\"},\"contracts/seaport/lib/SignatureVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport { EIP1271Interface } from \\\"../interfaces/EIP1271Interface.sol\\\";\\r\\n\\r\\nimport {\\r\\n    SignatureVerificationErrors\\r\\n} from \\\"../interfaces/SignatureVerificationErrors.sol\\\";\\r\\n\\r\\nimport { LowLevelHelpers } from \\\"./LowLevelHelpers.sol\\\";\\r\\n\\r\\nimport \\\"./ConsiderationConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SignatureVerification\\r\\n * @author 0age\\r\\n * @notice SignatureVerification contains logic for verifying signatures.\\r\\n */\\r\\ncontract SignatureVerification is SignatureVerificationErrors, LowLevelHelpers {\\r\\n    /**\\r\\n     * @dev Internal view function to verify the signature of an order. An\\r\\n     *      ERC-1271 fallback will be attempted if either the signature length\\r\\n     *      is not 64 or 65 bytes or if the recovered signer does not match the\\r\\n     *      supplied signer.\\r\\n     *\\r\\n     * @param signer    The signer for the order.\\r\\n     * @param digest    The digest to verify the signature against.\\r\\n     * @param signature A signature from the signer indicating that the order\\r\\n     *                  has been approved.\\r\\n     */\\r\\n    function _assertValidSignature(\\r\\n        address signer,\\r\\n        bytes32 digest,\\r\\n        bytes memory signature\\r\\n    ) internal view {\\r\\n        // Declare value for ecrecover equality or 1271 call success status.\\r\\n        bool success;\\r\\n\\r\\n        // Utilize assembly to perform optimized signature verification check.\\r\\n        assembly {\\r\\n            // Ensure that first word of scratch space is empty.\\r\\n            mstore(0, 0)\\r\\n\\r\\n            // Declare value for v signature parameter.\\r\\n            let v\\r\\n\\r\\n            // Get the length of the signature.\\r\\n            let signatureLength := mload(signature)\\r\\n\\r\\n            // Get the pointer to the value preceding the signature length.\\r\\n            // This will be used for temporary memory overrides - either the\\r\\n            // signature head for isValidSignature or the digest for ecrecover.\\r\\n            let wordBeforeSignaturePtr := sub(signature, OneWord)\\r\\n\\r\\n            // Cache the current value behind the signature to restore it later.\\r\\n            let cachedWordBeforeSignature := mload(wordBeforeSignaturePtr)\\r\\n\\r\\n            // Declare lenDiff + recoveredSigner scope to manage stack pressure.\\r\\n            {\\r\\n                // Take the difference between the max ECDSA signature length\\r\\n                // and the actual signature length. Overflow desired for any\\r\\n                // values > 65. If the diff is not 0 or 1, it is not a valid\\r\\n                // ECDSA signature - move on to EIP1271 check.\\r\\n                let lenDiff := sub(ECDSA_MaxLength, signatureLength)\\r\\n\\r\\n                // Declare variable for recovered signer.\\r\\n                let recoveredSigner\\r\\n\\r\\n                // If diff is 0 or 1, it may be an ECDSA signature.\\r\\n                // Try to recover signer.\\r\\n                if iszero(gt(lenDiff, 1)) {\\r\\n                    // Read the signature `s` value.\\r\\n                    let originalSignatureS := mload(\\r\\n                        add(signature, ECDSA_signature_s_offset)\\r\\n                    )\\r\\n\\r\\n                    // Read the first byte of the word after `s`. If the\\r\\n                    // signature is 65 bytes, this will be the real `v` value.\\r\\n                    // If not, it will need to be modified - doing it this way\\r\\n                    // saves an extra condition.\\r\\n                    v := byte(\\r\\n                        0,\\r\\n                        mload(add(signature, ECDSA_signature_v_offset))\\r\\n                    )\\r\\n\\r\\n                    // If lenDiff is 1, parse 64-byte signature as ECDSA.\\r\\n                    if lenDiff {\\r\\n                        // Extract yParity from highest bit of vs and add 27 to\\r\\n                        // get v.\\r\\n                        v := add(\\r\\n                            shr(MaxUint8, originalSignatureS),\\r\\n                            Signature_lower_v\\r\\n                        )\\r\\n\\r\\n                        // Extract canonical s from vs, all but the highest bit.\\r\\n                        // Temporarily overwrite the original `s` value in the\\r\\n                        // signature.\\r\\n                        mstore(\\r\\n                            add(signature, ECDSA_signature_s_offset),\\r\\n                            and(\\r\\n                                originalSignatureS,\\r\\n                                EIP2098_allButHighestBitMask\\r\\n                            )\\r\\n                        )\\r\\n                    }\\r\\n                    // Temporarily overwrite the signature length with `v` to\\r\\n                    // conform to the expected input for ecrecover.\\r\\n                    mstore(signature, v)\\r\\n\\r\\n                    // Temporarily overwrite the word before the length with\\r\\n                    // `digest` to conform to the expected input for ecrecover.\\r\\n                    mstore(wordBeforeSignaturePtr, digest)\\r\\n\\r\\n                    // Attempt to recover the signer for the given signature. Do\\r\\n                    // not check the call status as ecrecover will return a null\\r\\n                    // address if the signature is invalid.\\r\\n                    pop(\\r\\n                        staticcall(\\r\\n                            gas(),\\r\\n                            Ecrecover_precompile, // Call ecrecover precompile.\\r\\n                            wordBeforeSignaturePtr, // Use data memory location.\\r\\n                            Ecrecover_args_size, // Size of digest, v, r, and s.\\r\\n                            0, // Write result to scratch space.\\r\\n                            OneWord // Provide size of returned result.\\r\\n                        )\\r\\n                    )\\r\\n\\r\\n                    // Restore cached word before signature.\\r\\n                    mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\r\\n\\r\\n                    // Restore cached signature length.\\r\\n                    mstore(signature, signatureLength)\\r\\n\\r\\n                    // Restore cached signature `s` value.\\r\\n                    mstore(\\r\\n                        add(signature, ECDSA_signature_s_offset),\\r\\n                        originalSignatureS\\r\\n                    )\\r\\n\\r\\n                    // Read the recovered signer from the buffer given as return\\r\\n                    // space for ecrecover.\\r\\n                    recoveredSigner := mload(0)\\r\\n                }\\r\\n\\r\\n                // Set success to true if the signature provided was a valid\\r\\n                // ECDSA signature and the signer is not the null address. Use\\r\\n                // gt instead of direct as success is used outside of assembly.\\r\\n                success := and(eq(signer, recoveredSigner), gt(signer, 0))\\r\\n            }\\r\\n\\r\\n            // If the signature was not verified with ecrecover, try EIP1271.\\r\\n            if iszero(success) {\\r\\n                // Temporarily overwrite the word before the signature length\\r\\n                // and use it as the head of the signature input to\\r\\n                // `isValidSignature`, which has a value of 64.\\r\\n                mstore(\\r\\n                    wordBeforeSignaturePtr,\\r\\n                    EIP1271_isValidSignature_signature_head_offset\\r\\n                )\\r\\n\\r\\n                // Get pointer to use for the selector of `isValidSignature`.\\r\\n                let selectorPtr := sub(\\r\\n                    signature,\\r\\n                    EIP1271_isValidSignature_selector_negativeOffset\\r\\n                )\\r\\n\\r\\n                // Cache the value currently stored at the selector pointer.\\r\\n                let cachedWordOverwrittenBySelector := mload(selectorPtr)\\r\\n\\r\\n                // Get pointer to use for `digest` input to `isValidSignature`.\\r\\n                let digestPtr := sub(\\r\\n                    signature,\\r\\n                    EIP1271_isValidSignature_digest_negativeOffset\\r\\n                )\\r\\n\\r\\n                // Cache the value currently stored at the digest pointer.\\r\\n                let cachedWordOverwrittenByDigest := mload(digestPtr)\\r\\n\\r\\n                // Write the selector first, since it overlaps the digest.\\r\\n                mstore(selectorPtr, EIP1271_isValidSignature_selector)\\r\\n\\r\\n                // Next, write the digest.\\r\\n                mstore(digestPtr, digest)\\r\\n\\r\\n                // Call signer with `isValidSignature` to validate signature.\\r\\n                success := staticcall(\\r\\n                    gas(),\\r\\n                    signer,\\r\\n                    selectorPtr,\\r\\n                    add(\\r\\n                        signatureLength,\\r\\n                        EIP1271_isValidSignature_calldata_baseLength\\r\\n                    ),\\r\\n                    0,\\r\\n                    OneWord\\r\\n                )\\r\\n\\r\\n                // Determine if the signature is valid on successful calls.\\r\\n                if success {\\r\\n                    // If first word of scratch space does not contain EIP-1271\\r\\n                    // signature selector, revert.\\r\\n                    if iszero(eq(mload(0), EIP1271_isValidSignature_selector)) {\\r\\n                        // Revert with bad 1271 signature if signer has code.\\r\\n                        if extcodesize(signer) {\\r\\n                            // Bad contract signature.\\r\\n                            mstore(0, BadContractSignature_error_signature)\\r\\n                            revert(0, BadContractSignature_error_length)\\r\\n                        }\\r\\n\\r\\n                        // Check if signature length was invalid.\\r\\n                        if gt(sub(ECDSA_MaxLength, signatureLength), 1) {\\r\\n                            // Revert with generic invalid signature error.\\r\\n                            mstore(0, InvalidSignature_error_signature)\\r\\n                            revert(0, InvalidSignature_error_length)\\r\\n                        }\\r\\n\\r\\n                        // Check if v was invalid.\\r\\n                        if iszero(\\r\\n                            byte(v, ECDSA_twentySeventhAndTwentyEighthBytesSet)\\r\\n                        ) {\\r\\n                            // Revert with invalid v value.\\r\\n                            mstore(0, BadSignatureV_error_signature)\\r\\n                            mstore(BadSignatureV_error_offset, v)\\r\\n                            revert(0, BadSignatureV_error_length)\\r\\n                        }\\r\\n\\r\\n                        // Revert with generic invalid signer error message.\\r\\n                        mstore(0, InvalidSigner_error_signature)\\r\\n                        revert(0, InvalidSigner_error_length)\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                // Restore the cached values overwritten by selector, digest and\\r\\n                // signature head.\\r\\n                mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\r\\n                mstore(selectorPtr, cachedWordOverwrittenBySelector)\\r\\n                mstore(digestPtr, cachedWordOverwrittenByDigest)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If the call failed...\\r\\n        if (!success) {\\r\\n            // Revert and pass reason along if one was returned.\\r\\n            _revertWithReasonIfOneIsReturned();\\r\\n\\r\\n            // Otherwise, revert with error indicating bad contract signature.\\r\\n            assembly {\\r\\n                mstore(0, BadContractSignature_error_signature)\\r\\n                revert(0, BadContractSignature_error_length)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc23b9d4ea88187158c8dcae275fecfca2fc6c61dbf33dcca46a682ba681d66c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612de7806100206000396000f3fe60806040526004361061023b5760003560e01c806380f2152e1161012e578063cc272f50116100ab578063e6416b211161006f578063e6416b211461071b578063ebc27b821461073b578063eecb59ee14610771578063f2fde38b146107a1578063f70210ea146107c157600080fd5b8063cc272f5014610686578063d2c678e0146106a6578063d547cfb7146106c6578063dcc2fc4a146106db578063e2dac973146106fb57600080fd5b80638da5cb5b116100f25780638da5cb5b146105d8578063a90cb89b146105f6578063ac54d37d14610626578063aee914df14610646578063bbe4b2aa1461066657600080fd5b806380f2152e146105415780638129fc1c146105565780638488e2f31461056b5780638bb468d91461058b5780638d247d30146105ab57600080fd5b80632c30eca4116101bc578063412753581161018057806341275358146104b6578063558a7297146104d6578063715018a6146104f65780637365d7c31461050b5780637f7335e51461052b57600080fd5b80632c30eca4146104185780632cf696e41461045057806330176e13146104635780633408e47014610483578063402911391461049657600080fd5b806313e7c9d81161020357806313e7c9d8146103255780631ea42c481461036557806320379ee51461038557806320a99bd01461039a5780632365e8e2146103ca57600080fd5b806303fc365314610240578063083bb838146102625780630cd3a538146102a75780630f7e5970146102c7578063124dceaa14610301575b600080fd5b34801561024c57600080fd5b5061026061025b3660046125ae565b6107d7565b005b34801561026e57600080fd5b5061028261027d36600461268a565b61083f565b604080516001600160a01b039384168152929091166020830152015b60405180910390f35b3480156102b357600080fd5b506102606102c236600461279d565b610c41565b3480156102d357600080fd5b506102f4604051806040016040528060018152602001603160f81b81525081565b60405161029e9190612832565b34801561030d57600080fd5b5061031760a65481565b60405190815260200161029e565b34801561033157600080fd5b5061035561034036600461284c565b60996020526000908152604090205460ff1681565b604051901515815260200161029e565b34801561037157600080fd5b50610260610380366004612869565b610c60565b34801561039157600080fd5b50606554610317565b3480156103a657600080fd5b506103556103b536600461284c565b609a6020526000908152604090205460ff1681565b3480156103d657600080fd5b506104006103e5366004612895565b60a0602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161029e565b34801561042457600080fd5b506103176104333660046128ae565b609f60209081526000928352604080842090915290825290205481565b6102f461045e36600461291c565b610d7d565b34801561046f57600080fd5b5061026061047e36600461279d565b610eae565b34801561048f57600080fd5b5046610317565b3480156104a257600080fd5b506102606104b1366004612869565b610ec9565b3480156104c257600080fd5b5060a154610400906001600160a01b031681565b3480156104e257600080fd5b506102606104f13660046125ae565b61104d565b34801561050257600080fd5b506102606110ad565b34801561051757600080fd5b5060a754610400906001600160a01b031681565b34801561053757600080fd5b5061031760a85481565b34801561054d57600080fd5b506102f46110c1565b34801561056257600080fd5b5061026061114f565b34801561057757600080fd5b506102606105863660046129a8565b6112d6565b34801561059757600080fd5b506102606105a6366004612869565b6113ef565b3480156105b757600080fd5b506103176105c636600461284c565b609e6020526000908152604090205481565b3480156105e457600080fd5b506033546001600160a01b0316610400565b34801561060257600080fd5b5061035561061136600461284c565b609b6020526000908152604090205460ff1681565b34801561063257600080fd5b50610260610641366004612869565b61144a565b34801561065257600080fd5b5060a554610400906001600160a01b031681565b34801561067257600080fd5b506104006106813660046129e0565b6114df565b34801561069257600080fd5b506102606106a13660046125ae565b6117dd565b3480156106b257600080fd5b506102606106c1366004612869565b61183d565b3480156106d257600080fd5b506102f46118df565b3480156106e757600080fd5b506102606106f63660046125ae565b6118ec565b34801561070757600080fd5b50610260610716366004612869565b61194c565b34801561072757600080fd5b506102606107363660046128ae565b6119a7565b34801561074757600080fd5b50610400610756366004612895565b609d602052600090815260409020546001600160a01b031681565b34801561077d57600080fd5b5061035561078c36600461284c565b609c6020526000908152604090205460ff1681565b3480156107ad57600080fd5b506102606107bc36600461284c565b611aa9565b3480156107cd57600080fd5b5061031760a25481565b6107df611b1f565b6001600160a01b0382166000818152609b6020908152604091829020805460ff191685151590811790915591519182527fca57e885a5d1ac77a68275053a576ebc03d57987c2bbcd5aeeff81f0171a1f7c91015b60405180910390a25050565b6000806099600061084e611b79565b6001600160a01b0316815260208101919091526040016000205460ff166108ab5760405162461bcd60e51b815260206004820152600c60248201526b2737ba1027b832b930ba37b960a11b60448201526064015b60405180910390fd5b6002606754036108fd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a2565b60026067556001600160a01b038e166000908152609a602052604090205460ff1661094657604051633855dd1960e21b81526001600160a01b038f1660048201526024016108a2565b6001600160a01b038d166000908152609b602052604090205460ff1661098a57604051633855dd1960e21b81526001600160a01b038e1660048201526024016108a2565b60008b815260a060205260409020546001600160a01b0316156109c3576040516337f2f1e560e21b8152600481018c90526024016108a2565b60a7546001600160a01b0316158015906109df5750600060a854115b15610a0757610a076109ef611b79565b60a85460a7546001600160a01b031691903090611bd5565b610a108e611c68565b6040516390b2464b60e01b81529092506001600160a01b038316906390b2464b90610a49908f908f908e908e908c908c90600401612aa8565b600060405180830381600087803b158015610a6357600080fd5b505af1158015610a77573d6000803e3d6000fd5b50505060008b8152609d60205260409020546001600160a01b03169050610aa257610aa28c8b610c60565b610aac828b611d15565b816001600160a01b031663ace0103d8e856040518363ffffffff1660e01b8152600401610ada929190612afb565b6020604051808303816000875af1158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d9190612b1d565b90506001600160a01b03871615610b91576040516310fd332b60e01b81526001600160a01b038881166004830152602482018890528316906310fd332b90604401600060405180830381600087803b158015610b7857600080fd5b505af1158015610b8c573d6000803e3d6000fd5b505050505b8160a060008d815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b03168c6001600160a01b03168f6001600160a01b03167f0a6bbba28cc60a0dfc5d2f1e3f06916cef04f5f63323f5a28e4c6865453371438e8e604051610c21929190918252602082015260400190565b60405180910390a46001606755909d909c509a5050505050505050505050565b610c49611b1f565b8051610c5c9060a39060208401906124e7565b5050565b60996000610c6c611b79565b6001600160a01b0316815260208101919091526040016000205460ff16610cc45760405162461bcd60e51b815260206004820152600c60248201526b2737ba1027b832b930ba37b960a11b60448201526064016108a2565b6000818152609d6020908152604080832080546001600160a01b0319166001600160a01b03878116918217909255609f84528285209085529092529091206002905560a5541615801590610d1a5750600060a654115b15610d4257610d42610d2a611b79565b60a65460a5546001600160a01b031691903090611bd5565b816001600160a01b03167fbd4c7d0804a13b6db386501ad7b7c00f445bd6468a9551161bbb643c83102f0b8260405161083391815260200190565b6060610d8d878787878787611e29565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b87338787604051610dc29493929190612b3a565b60405180910390a1600080306001600160a01b031687878b604051602001610dec93929190612b87565b60408051601f1981840301815290829052610e0691612bad565b6000604051808303816000865af19150503d8060008114610e43576040519150601f19603f3d011682016040523d82523d6000602084013e610e48565b606091505b509150915081610ea257610e5a611f55565b60405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c0000000060448201526064016108a2565b98975050505050505050565b610eb6611b1f565b8051610c5c9060a49060208401906124e7565b600260675403610f1b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a2565b60026067556040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f9190612bc9565b8061100457506040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190612bc9565b61103a5760405162461bcd60e51b8152602060048201526007602482015266139bdd0813919560ca1b60448201526064016108a2565b6110448282611d15565b50506001606755565b611055611b1f565b6001600160a01b038216600081815260996020908152604091829020805460ff191685151590811790915591519182527f1618a22a3b00b9ac70fd5a82f1f5cdd8cb272bd0f1b740ddf7c26ab05881dd5b9101610833565b6110b5611b1f565b6110bf6000611fa2565b565b60a380546110ce90612be6565b80601f01602080910402602001604051908101604052809291908181526020018280546110fa90612be6565b80156111475780601f1061111c57610100808354040283529160200191611147565b820191906000526020600020905b81548152906001019060200180831161112a57829003601f168201915b505050505081565b600054610100900460ff161580801561116f5750600054600160ff909116105b806111895750303b158015611189575060005460ff166001145b6111a55760405162461bcd60e51b81526004016108a290612c20565b6000805460ff1916600117905580156111c8576000805461ff0019166101001790555b66470de4df82000060a25560408051606081019091526033808252612d7f602083013980516111ff9160a3916020909101906124e7565b50604051806060016040528060308152602001612cba60309139805161122d9160a4916020909101906124e7565b5060a180546001600160a01b0319163317905560408051808201909152601881527f4178656c617253656150726f6a65637452656769737472790000000000000000602082015261127d90611ff4565b6112856120bf565b61128d6120ee565b80156112d3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600281118061131d57506000838152609f60205260408120906112f7611b79565b6001600160a01b03166001600160a01b0316815260200190815260200160002054600214155b8061134157506000838152609d60205260409020546001600160a01b038381169116145b8061136157506000838152609d60205260409020546001600160a01b0316155b8061137357506001600160a01b038216155b1561139157604051631dd2188d60e31b815260040160405180910390fd5b6000838152609f602090815260408083206001600160a01b038616808552908352928190208490555183815285917ffb96ce06da4ab27eb9983d735592d95976e88d04262fcdcd2962df5ad409255b910160405180910390a3505050565b6113f7611b1f565b60a580546001600160a01b0319166001600160a01b03841690811790915560a68290556040518281527fe73f45ef5a0827c577483c939cdc6ed5f7a6a9f92ce43e9a7823d74b29b424af90602001610833565b60996000611456611b79565b6001600160a01b0316815260208101919091526040016000205460ff166114ae5760405162461bcd60e51b815260206004820152600c60248201526b2737ba1027b832b930ba37b960a11b60448201526064016108a2565b6001600160a01b0382166114d557604051631dd2188d60e31b815260040160405180910390fd5b610c5c8282610c60565b6000609960006114ed611b79565b6001600160a01b0316815260208101919091526040016000205460ff166115455760405162461bcd60e51b815260206004820152600c60248201526b2737ba1027b832b930ba37b960a11b60448201526064016108a2565b6002606754036115975760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a2565b60026067556001600160a01b038b166000908152609a602052604090205460ff166115e057604051633855dd1960e21b81526001600160a01b038c1660048201526024016108a2565b600089815260a060205260409020546001600160a01b031615611619576040516337f2f1e560e21b8152600481018a90526024016108a2565b60a7546001600160a01b0316158015906116355750600060a854115b15611645576116456109ef611b79565b61164e8b611c68565b6040516390b2464b60e01b81529091506001600160a01b038216906390b2464b90611687908d908d908c908c908a908a90600401612aa8565b600060405180830381600087803b1580156116a157600080fd5b505af11580156116b5573d6000803e3d6000fd5b5050506000898152609d60205260409020546001600160a01b031690506116e0576116e08a89610c60565b6116ea8189611d15565b6001600160a01b0385161561175c576040516310fd332b60e01b81526001600160a01b038681166004830152602482018690528216906310fd332b90604401600060405180830381600087803b15801561174357600080fd5b505af1158015611757573d6000803e3d6000fd5b505050505b600089815260a0602090815260409182902080546001600160a01b0319166001600160a01b0385811691821790925583518d81529283018c9052928d821692918f16917f0a6bbba28cc60a0dfc5d2f1e3f06916cef04f5f63323f5a28e4c686545337143910160405180910390a460016067559a9950505050505050505050565b6117e5611b1f565b6001600160a01b0382166000818152609c6020908152604091829020805460ff191685151590811790915591519182527ff56d410e239c108d6e55cb5c365b20047d7f54fe8b11739bc2fdc3cd3f449df09101610833565b611845611b1f565b670de0b6b3a764000081111561188c5760405162461bcd60e51b815260206004820152600c60248201526b546f6f206d7563682066656560a01b60448201526064016108a2565b60a180546001600160a01b0319166001600160a01b03841690811790915560a28290556040518281527fdd198e1876b1e7fbeb87ad607b58c7c4374eacbbf1275469f2528e47e7e5e27590602001610833565b60a480546110ce90612be6565b6118f4611b1f565b6001600160a01b0382166000818152609a6020908152604091829020805460ff191685151590811790915591519182527f0af1eba046b032ac810dd4d2a22f34c68a7a4c749c87fa8036e23ae197e67e359101610833565b611954611b1f565b60a780546001600160a01b0319166001600160a01b03841690811790915560a88290556040518281527f0190ac0d68ef839b56a9447f5f999a72ed9970cd193f6f1f3b7a7130f08bfc8a90602001610833565b6000828152609d60205260409020546001600160a01b03166119c7611b79565b6001600160a01b0316141580611a0057506000828152609f602090815260408083206001600160a01b0385168452909152902054600214155b80611a2057506000828152609d60205260409020546001600160a01b0316155b80611a3257506001600160a01b038116155b15611a5057604051631dd2188d60e31b815260040160405180910390fd5b6000828152609d602052604080822080546001600160a01b0319166001600160a01b0385169081179091559051909184917f87956a6e554ad7100ef716fa8f414ccb2982f2f81ed9f7ee85f79a68221525e19190a35050565b611ab1611b1f565b6001600160a01b038116611b165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108a2565b6112d381611fa2565b6033546001600160a01b031633146110bf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b6000303303611bcf57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150611bd29050565b50335b90565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080611c615760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016108a2565b5050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611d105760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c65640000000000000000000060448201526064016108a2565b919050565b6000826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d799190612b1d565b90506001600160a01b0381161580611db157506000828152609f602090815260408083206001600160a01b0385168452909152902054155b15611dcf57604051631dd2188d60e31b815260040160405180910390fd5b6001600160a01b0383166000818152609e602052604090819020849055517f610d1ef25954bf1ca1f23c0142ccbbadbc1e8ec8dd12dd2bab6ff09280df123490611e1c9085815260200190565b60405180910390a2505050565b60008581526066602052604090205460ff1615611e765760405162461bcd60e51b815260206004820152600b60248201526a20b63932b0b23c90393ab760a91b60448201526064016108a2565b60006040518060600160405280878152602001886001600160a01b0316815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152509050611ede8782858561211d565b611f345760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084016108a2565b50505060009283525050606660205260409020805460ff1916600117905550565b3d156110bf576020601f3d01046020604051048160030281831115611f8857818303600302610200838002858002030401015b5a602082011015611f9d573d6000803e3d6000fd5b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16158080156120145750600054600160ff909116105b8061202e5750303b15801561202e575060005460ff166001145b61204a5760405162461bcd60e51b81526004016108a290612c20565b6000805460ff19166001179055801561206d576000805461ff0019166101001790555b612076826121df565b8015610c5c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054610100900460ff166120e65760405162461bcd60e51b81526004016108a290612c6e565b6110bf612285565b600054610100900460ff166121155760405162461bcd60e51b81526004016108a290612c6e565b6110bf6122b5565b60006001600160a01b0385166121835760405162461bcd60e51b815260206004820152602560248201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360448201526424a3a722a960d91b60648201526084016108a2565b6121d485612198612193876122e3565b612360565b85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061239092505050565b506001949350505050565b604051806080016040528060528152602001612d2d6052913980516020918201208251838301206040805180820190915260018152603160f81b930192909252907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160408051601f19818403018152919052805160209091012060655550565b600054610100900460ff166122ac5760405162461bcd60e51b81526004016108a290612c6e565b6110bf33611fa2565b600054610100900460ff166122dc5760405162461bcd60e51b81526004016108a290612c6e565b6001606755565b6000604051806080016040528060438152602001612cea6043913980516020918201208351848301516040808701518051908601209051612343950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b600061236b60655490565b60405161190160f01b6020820152602281019190915260428101839052606201612343565b60008060005260008251602084038051826041036000600182116123fe576040880151606089015160001a965082156123dc57601b8160ff1c0196506001600160ff1b03811660408a01525b8689528985526020600060808760015afa508385528589526040890152506000515b89148915151695508590506124bf5760408252604486038051604088038051630b135d3f60e11b84528a82526020600060648901868f5afa985088156124b557630b135d3f60e11b600051146124b5578b3b1561246657634f7fb80d60e01b60005260046000fd5b600187604103111561248357638baa579f60e01b60005260046000fd5b640101000000881a6124a457630f801e8560e11b6000528760045260246000fd5b632057875960e21b60005260046000fd5b8486529190925290525b50505050806124e1576124d0611f55565b634f7fb80d60e01b60005260046000fd5b50505050565b8280546124f390612be6565b90600052602060002090601f016020900481019282612515576000855561255b565b82601f1061252e57805160ff191683800117855561255b565b8280016001018555821561255b579182015b8281111561255b578251825591602001919060010190612540565b5061256792915061256b565b5090565b5b80821115612567576000815560010161256c565b6001600160a01b03811681146112d357600080fd5b8035611d1081612580565b80151581146112d357600080fd5b600080604083850312156125c157600080fd5b82356125cc81612580565b915060208301356125dc816125a0565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261260e57600080fd5b813567ffffffffffffffff80821115612629576126296125e7565b604051601f8301601f19908116603f01168101908282118183101715612651576126516125e7565b8160405283815286602085880101111561266a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806000806000806000806000806101808d8f0312156126ad57600080fd5b6126b68d612595565b9b506126c460208e01612595565b9a506126d260408e01612595565b995060608d0135985060808d0135975060a08d0135965060c08d013595506126fc60e08e01612595565b94506101008d0135935067ffffffffffffffff6101208e0135111561272057600080fd5b6127318e6101208f01358f016125fd565b925067ffffffffffffffff6101408e0135111561274d57600080fd5b61275e8e6101408f01358f016125fd565b915067ffffffffffffffff6101608e0135111561277a57600080fd5b61278b8e6101608f01358f016125fd565b90509295989b509295989b509295989b565b6000602082840312156127af57600080fd5b813567ffffffffffffffff8111156127c657600080fd5b6127d2848285016125fd565b949350505050565b60005b838110156127f55781810151838201526020016127dd565b838111156124e15750506000910152565b6000815180845261281e8160208601602086016127da565b601f01601f19169290920160200192915050565b6020815260006128456020830184612806565b9392505050565b60006020828403121561285e57600080fd5b813561284581612580565b6000806040838503121561287c57600080fd5b823561288781612580565b946020939093013593505050565b6000602082840312156128a757600080fd5b5035919050565b600080604083850312156128c157600080fd5b8235915060208301356125dc81612580565b60008083601f8401126128e557600080fd5b50813567ffffffffffffffff8111156128fd57600080fd5b60208301915083602082850101111561291557600080fd5b9250929050565b6000806000806000806080878903121561293557600080fd5b863561294081612580565b955060208701359450604087013567ffffffffffffffff8082111561296457600080fd5b6129708a838b016128d3565b9096509450606089013591508082111561298957600080fd5b5061299689828a016128d3565b979a9699509497509295939492505050565b6000806000606084860312156129bd57600080fd5b8335925060208401356129cf81612580565b929592945050506040919091013590565b6000806000806000806000806000806101408b8d031215612a0057600080fd5b612a098b612595565b9950612a1760208c01612595565b985060408b0135975060608b0135965060808b0135955060a08b01359450612a4160c08c01612595565b935060e08b013592506101008b013567ffffffffffffffff80821115612a6657600080fd5b612a728e838f016125fd565b93506101208d0135915080821115612a8957600080fd5b50612a968d828e016125fd565b9150509295989b9194979a5092959850565b6001600160a01b038716815285602082015284604082015283606082015260c060808201526000612adc60c0830185612806565b82810360a0840152612aee8185612806565b9998505050505050505050565b6001600160a01b03831681526040602082015260006127d26040830184612806565b600060208284031215612b2f57600080fd5b815161284581612580565b60006001600160a01b03808716835280861660208401525060606040830152826060830152828460808401376000608084840101526080601f19601f850116830101905095945050505050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60008251612bbf8184602087016127da565b9190910192915050565b600060208284031215612bdb57600080fd5b8151612845816125a0565b600181811c90821680612bfa57607f821691505b602082108103612c1a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe68747470733a2f2f6170692d6e667464726f702e6178656c61727365612e636f6d2f746f6b656e4d657461646174612f4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742968747470733a2f2f6170692d6e667464726f702e6178656c61727365612e636f6d2f636f6e74726163744d657461646174612fa264697066735822122072173d37551c0a49a7d184cd34913433fe3d21b60a77d6488b01c525db3f28a664736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c806380f2152e1161012e578063cc272f50116100ab578063e6416b211161006f578063e6416b211461071b578063ebc27b821461073b578063eecb59ee14610771578063f2fde38b146107a1578063f70210ea146107c157600080fd5b8063cc272f5014610686578063d2c678e0146106a6578063d547cfb7146106c6578063dcc2fc4a146106db578063e2dac973146106fb57600080fd5b80638da5cb5b116100f25780638da5cb5b146105d8578063a90cb89b146105f6578063ac54d37d14610626578063aee914df14610646578063bbe4b2aa1461066657600080fd5b806380f2152e146105415780638129fc1c146105565780638488e2f31461056b5780638bb468d91461058b5780638d247d30146105ab57600080fd5b80632c30eca4116101bc578063412753581161018057806341275358146104b6578063558a7297146104d6578063715018a6146104f65780637365d7c31461050b5780637f7335e51461052b57600080fd5b80632c30eca4146104185780632cf696e41461045057806330176e13146104635780633408e47014610483578063402911391461049657600080fd5b806313e7c9d81161020357806313e7c9d8146103255780631ea42c481461036557806320379ee51461038557806320a99bd01461039a5780632365e8e2146103ca57600080fd5b806303fc365314610240578063083bb838146102625780630cd3a538146102a75780630f7e5970146102c7578063124dceaa14610301575b600080fd5b34801561024c57600080fd5b5061026061025b3660046125ae565b6107d7565b005b34801561026e57600080fd5b5061028261027d36600461268a565b61083f565b604080516001600160a01b039384168152929091166020830152015b60405180910390f35b3480156102b357600080fd5b506102606102c236600461279d565b610c41565b3480156102d357600080fd5b506102f4604051806040016040528060018152602001603160f81b81525081565b60405161029e9190612832565b34801561030d57600080fd5b5061031760a65481565b60405190815260200161029e565b34801561033157600080fd5b5061035561034036600461284c565b60996020526000908152604090205460ff1681565b604051901515815260200161029e565b34801561037157600080fd5b50610260610380366004612869565b610c60565b34801561039157600080fd5b50606554610317565b3480156103a657600080fd5b506103556103b536600461284c565b609a6020526000908152604090205460ff1681565b3480156103d657600080fd5b506104006103e5366004612895565b60a0602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161029e565b34801561042457600080fd5b506103176104333660046128ae565b609f60209081526000928352604080842090915290825290205481565b6102f461045e36600461291c565b610d7d565b34801561046f57600080fd5b5061026061047e36600461279d565b610eae565b34801561048f57600080fd5b5046610317565b3480156104a257600080fd5b506102606104b1366004612869565b610ec9565b3480156104c257600080fd5b5060a154610400906001600160a01b031681565b3480156104e257600080fd5b506102606104f13660046125ae565b61104d565b34801561050257600080fd5b506102606110ad565b34801561051757600080fd5b5060a754610400906001600160a01b031681565b34801561053757600080fd5b5061031760a85481565b34801561054d57600080fd5b506102f46110c1565b34801561056257600080fd5b5061026061114f565b34801561057757600080fd5b506102606105863660046129a8565b6112d6565b34801561059757600080fd5b506102606105a6366004612869565b6113ef565b3480156105b757600080fd5b506103176105c636600461284c565b609e6020526000908152604090205481565b3480156105e457600080fd5b506033546001600160a01b0316610400565b34801561060257600080fd5b5061035561061136600461284c565b609b6020526000908152604090205460ff1681565b34801561063257600080fd5b50610260610641366004612869565b61144a565b34801561065257600080fd5b5060a554610400906001600160a01b031681565b34801561067257600080fd5b506104006106813660046129e0565b6114df565b34801561069257600080fd5b506102606106a13660046125ae565b6117dd565b3480156106b257600080fd5b506102606106c1366004612869565b61183d565b3480156106d257600080fd5b506102f46118df565b3480156106e757600080fd5b506102606106f63660046125ae565b6118ec565b34801561070757600080fd5b50610260610716366004612869565b61194c565b34801561072757600080fd5b506102606107363660046128ae565b6119a7565b34801561074757600080fd5b50610400610756366004612895565b609d602052600090815260409020546001600160a01b031681565b34801561077d57600080fd5b5061035561078c36600461284c565b609c6020526000908152604090205460ff1681565b3480156107ad57600080fd5b506102606107bc36600461284c565b611aa9565b3480156107cd57600080fd5b5061031760a25481565b6107df611b1f565b6001600160a01b0382166000818152609b6020908152604091829020805460ff191685151590811790915591519182527fca57e885a5d1ac77a68275053a576ebc03d57987c2bbcd5aeeff81f0171a1f7c91015b60405180910390a25050565b6000806099600061084e611b79565b6001600160a01b0316815260208101919091526040016000205460ff166108ab5760405162461bcd60e51b815260206004820152600c60248201526b2737ba1027b832b930ba37b960a11b60448201526064015b60405180910390fd5b6002606754036108fd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a2565b60026067556001600160a01b038e166000908152609a602052604090205460ff1661094657604051633855dd1960e21b81526001600160a01b038f1660048201526024016108a2565b6001600160a01b038d166000908152609b602052604090205460ff1661098a57604051633855dd1960e21b81526001600160a01b038e1660048201526024016108a2565b60008b815260a060205260409020546001600160a01b0316156109c3576040516337f2f1e560e21b8152600481018c90526024016108a2565b60a7546001600160a01b0316158015906109df5750600060a854115b15610a0757610a076109ef611b79565b60a85460a7546001600160a01b031691903090611bd5565b610a108e611c68565b6040516390b2464b60e01b81529092506001600160a01b038316906390b2464b90610a49908f908f908e908e908c908c90600401612aa8565b600060405180830381600087803b158015610a6357600080fd5b505af1158015610a77573d6000803e3d6000fd5b50505060008b8152609d60205260409020546001600160a01b03169050610aa257610aa28c8b610c60565b610aac828b611d15565b816001600160a01b031663ace0103d8e856040518363ffffffff1660e01b8152600401610ada929190612afb565b6020604051808303816000875af1158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d9190612b1d565b90506001600160a01b03871615610b91576040516310fd332b60e01b81526001600160a01b038881166004830152602482018890528316906310fd332b90604401600060405180830381600087803b158015610b7857600080fd5b505af1158015610b8c573d6000803e3d6000fd5b505050505b8160a060008d815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b03168c6001600160a01b03168f6001600160a01b03167f0a6bbba28cc60a0dfc5d2f1e3f06916cef04f5f63323f5a28e4c6865453371438e8e604051610c21929190918252602082015260400190565b60405180910390a46001606755909d909c509a5050505050505050505050565b610c49611b1f565b8051610c5c9060a39060208401906124e7565b5050565b60996000610c6c611b79565b6001600160a01b0316815260208101919091526040016000205460ff16610cc45760405162461bcd60e51b815260206004820152600c60248201526b2737ba1027b832b930ba37b960a11b60448201526064016108a2565b6000818152609d6020908152604080832080546001600160a01b0319166001600160a01b03878116918217909255609f84528285209085529092529091206002905560a5541615801590610d1a5750600060a654115b15610d4257610d42610d2a611b79565b60a65460a5546001600160a01b031691903090611bd5565b816001600160a01b03167fbd4c7d0804a13b6db386501ad7b7c00f445bd6468a9551161bbb643c83102f0b8260405161083391815260200190565b6060610d8d878787878787611e29565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b87338787604051610dc29493929190612b3a565b60405180910390a1600080306001600160a01b031687878b604051602001610dec93929190612b87565b60408051601f1981840301815290829052610e0691612bad565b6000604051808303816000865af19150503d8060008114610e43576040519150601f19603f3d011682016040523d82523d6000602084013e610e48565b606091505b509150915081610ea257610e5a611f55565b60405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c0000000060448201526064016108a2565b98975050505050505050565b610eb6611b1f565b8051610c5c9060a49060208401906124e7565b600260675403610f1b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a2565b60026067556040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f9190612bc9565b8061100457506040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190612bc9565b61103a5760405162461bcd60e51b8152602060048201526007602482015266139bdd0813919560ca1b60448201526064016108a2565b6110448282611d15565b50506001606755565b611055611b1f565b6001600160a01b038216600081815260996020908152604091829020805460ff191685151590811790915591519182527f1618a22a3b00b9ac70fd5a82f1f5cdd8cb272bd0f1b740ddf7c26ab05881dd5b9101610833565b6110b5611b1f565b6110bf6000611fa2565b565b60a380546110ce90612be6565b80601f01602080910402602001604051908101604052809291908181526020018280546110fa90612be6565b80156111475780601f1061111c57610100808354040283529160200191611147565b820191906000526020600020905b81548152906001019060200180831161112a57829003601f168201915b505050505081565b600054610100900460ff161580801561116f5750600054600160ff909116105b806111895750303b158015611189575060005460ff166001145b6111a55760405162461bcd60e51b81526004016108a290612c20565b6000805460ff1916600117905580156111c8576000805461ff0019166101001790555b66470de4df82000060a25560408051606081019091526033808252612d7f602083013980516111ff9160a3916020909101906124e7565b50604051806060016040528060308152602001612cba60309139805161122d9160a4916020909101906124e7565b5060a180546001600160a01b0319163317905560408051808201909152601881527f4178656c617253656150726f6a65637452656769737472790000000000000000602082015261127d90611ff4565b6112856120bf565b61128d6120ee565b80156112d3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600281118061131d57506000838152609f60205260408120906112f7611b79565b6001600160a01b03166001600160a01b0316815260200190815260200160002054600214155b8061134157506000838152609d60205260409020546001600160a01b038381169116145b8061136157506000838152609d60205260409020546001600160a01b0316155b8061137357506001600160a01b038216155b1561139157604051631dd2188d60e31b815260040160405180910390fd5b6000838152609f602090815260408083206001600160a01b038616808552908352928190208490555183815285917ffb96ce06da4ab27eb9983d735592d95976e88d04262fcdcd2962df5ad409255b910160405180910390a3505050565b6113f7611b1f565b60a580546001600160a01b0319166001600160a01b03841690811790915560a68290556040518281527fe73f45ef5a0827c577483c939cdc6ed5f7a6a9f92ce43e9a7823d74b29b424af90602001610833565b60996000611456611b79565b6001600160a01b0316815260208101919091526040016000205460ff166114ae5760405162461bcd60e51b815260206004820152600c60248201526b2737ba1027b832b930ba37b960a11b60448201526064016108a2565b6001600160a01b0382166114d557604051631dd2188d60e31b815260040160405180910390fd5b610c5c8282610c60565b6000609960006114ed611b79565b6001600160a01b0316815260208101919091526040016000205460ff166115455760405162461bcd60e51b815260206004820152600c60248201526b2737ba1027b832b930ba37b960a11b60448201526064016108a2565b6002606754036115975760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a2565b60026067556001600160a01b038b166000908152609a602052604090205460ff166115e057604051633855dd1960e21b81526001600160a01b038c1660048201526024016108a2565b600089815260a060205260409020546001600160a01b031615611619576040516337f2f1e560e21b8152600481018a90526024016108a2565b60a7546001600160a01b0316158015906116355750600060a854115b15611645576116456109ef611b79565b61164e8b611c68565b6040516390b2464b60e01b81529091506001600160a01b038216906390b2464b90611687908d908d908c908c908a908a90600401612aa8565b600060405180830381600087803b1580156116a157600080fd5b505af11580156116b5573d6000803e3d6000fd5b5050506000898152609d60205260409020546001600160a01b031690506116e0576116e08a89610c60565b6116ea8189611d15565b6001600160a01b0385161561175c576040516310fd332b60e01b81526001600160a01b038681166004830152602482018690528216906310fd332b90604401600060405180830381600087803b15801561174357600080fd5b505af1158015611757573d6000803e3d6000fd5b505050505b600089815260a0602090815260409182902080546001600160a01b0319166001600160a01b0385811691821790925583518d81529283018c9052928d821692918f16917f0a6bbba28cc60a0dfc5d2f1e3f06916cef04f5f63323f5a28e4c686545337143910160405180910390a460016067559a9950505050505050505050565b6117e5611b1f565b6001600160a01b0382166000818152609c6020908152604091829020805460ff191685151590811790915591519182527ff56d410e239c108d6e55cb5c365b20047d7f54fe8b11739bc2fdc3cd3f449df09101610833565b611845611b1f565b670de0b6b3a764000081111561188c5760405162461bcd60e51b815260206004820152600c60248201526b546f6f206d7563682066656560a01b60448201526064016108a2565b60a180546001600160a01b0319166001600160a01b03841690811790915560a28290556040518281527fdd198e1876b1e7fbeb87ad607b58c7c4374eacbbf1275469f2528e47e7e5e27590602001610833565b60a480546110ce90612be6565b6118f4611b1f565b6001600160a01b0382166000818152609a6020908152604091829020805460ff191685151590811790915591519182527f0af1eba046b032ac810dd4d2a22f34c68a7a4c749c87fa8036e23ae197e67e359101610833565b611954611b1f565b60a780546001600160a01b0319166001600160a01b03841690811790915560a88290556040518281527f0190ac0d68ef839b56a9447f5f999a72ed9970cd193f6f1f3b7a7130f08bfc8a90602001610833565b6000828152609d60205260409020546001600160a01b03166119c7611b79565b6001600160a01b0316141580611a0057506000828152609f602090815260408083206001600160a01b0385168452909152902054600214155b80611a2057506000828152609d60205260409020546001600160a01b0316155b80611a3257506001600160a01b038116155b15611a5057604051631dd2188d60e31b815260040160405180910390fd5b6000828152609d602052604080822080546001600160a01b0319166001600160a01b0385169081179091559051909184917f87956a6e554ad7100ef716fa8f414ccb2982f2f81ed9f7ee85f79a68221525e19190a35050565b611ab1611b1f565b6001600160a01b038116611b165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108a2565b6112d381611fa2565b6033546001600160a01b031633146110bf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b6000303303611bcf57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150611bd29050565b50335b90565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080611c615760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016108a2565b5050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611d105760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c65640000000000000000000060448201526064016108a2565b919050565b6000826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d799190612b1d565b90506001600160a01b0381161580611db157506000828152609f602090815260408083206001600160a01b0385168452909152902054155b15611dcf57604051631dd2188d60e31b815260040160405180910390fd5b6001600160a01b0383166000818152609e602052604090819020849055517f610d1ef25954bf1ca1f23c0142ccbbadbc1e8ec8dd12dd2bab6ff09280df123490611e1c9085815260200190565b60405180910390a2505050565b60008581526066602052604090205460ff1615611e765760405162461bcd60e51b815260206004820152600b60248201526a20b63932b0b23c90393ab760a91b60448201526064016108a2565b60006040518060600160405280878152602001886001600160a01b0316815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152509050611ede8782858561211d565b611f345760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084016108a2565b50505060009283525050606660205260409020805460ff1916600117905550565b3d156110bf576020601f3d01046020604051048160030281831115611f8857818303600302610200838002858002030401015b5a602082011015611f9d573d6000803e3d6000fd5b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16158080156120145750600054600160ff909116105b8061202e5750303b15801561202e575060005460ff166001145b61204a5760405162461bcd60e51b81526004016108a290612c20565b6000805460ff19166001179055801561206d576000805461ff0019166101001790555b612076826121df565b8015610c5c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054610100900460ff166120e65760405162461bcd60e51b81526004016108a290612c6e565b6110bf612285565b600054610100900460ff166121155760405162461bcd60e51b81526004016108a290612c6e565b6110bf6122b5565b60006001600160a01b0385166121835760405162461bcd60e51b815260206004820152602560248201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360448201526424a3a722a960d91b60648201526084016108a2565b6121d485612198612193876122e3565b612360565b85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061239092505050565b506001949350505050565b604051806080016040528060528152602001612d2d6052913980516020918201208251838301206040805180820190915260018152603160f81b930192909252907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160408051601f19818403018152919052805160209091012060655550565b600054610100900460ff166122ac5760405162461bcd60e51b81526004016108a290612c6e565b6110bf33611fa2565b600054610100900460ff166122dc5760405162461bcd60e51b81526004016108a290612c6e565b6001606755565b6000604051806080016040528060438152602001612cea6043913980516020918201208351848301516040808701518051908601209051612343950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b600061236b60655490565b60405161190160f01b6020820152602281019190915260428101839052606201612343565b60008060005260008251602084038051826041036000600182116123fe576040880151606089015160001a965082156123dc57601b8160ff1c0196506001600160ff1b03811660408a01525b8689528985526020600060808760015afa508385528589526040890152506000515b89148915151695508590506124bf5760408252604486038051604088038051630b135d3f60e11b84528a82526020600060648901868f5afa985088156124b557630b135d3f60e11b600051146124b5578b3b1561246657634f7fb80d60e01b60005260046000fd5b600187604103111561248357638baa579f60e01b60005260046000fd5b640101000000881a6124a457630f801e8560e11b6000528760045260246000fd5b632057875960e21b60005260046000fd5b8486529190925290525b50505050806124e1576124d0611f55565b634f7fb80d60e01b60005260046000fd5b50505050565b8280546124f390612be6565b90600052602060002090601f016020900481019282612515576000855561255b565b82601f1061252e57805160ff191683800117855561255b565b8280016001018555821561255b579182015b8281111561255b578251825591602001919060010190612540565b5061256792915061256b565b5090565b5b80821115612567576000815560010161256c565b6001600160a01b03811681146112d357600080fd5b8035611d1081612580565b80151581146112d357600080fd5b600080604083850312156125c157600080fd5b82356125cc81612580565b915060208301356125dc816125a0565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261260e57600080fd5b813567ffffffffffffffff80821115612629576126296125e7565b604051601f8301601f19908116603f01168101908282118183101715612651576126516125e7565b8160405283815286602085880101111561266a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806000806000806000806000806101808d8f0312156126ad57600080fd5b6126b68d612595565b9b506126c460208e01612595565b9a506126d260408e01612595565b995060608d0135985060808d0135975060a08d0135965060c08d013595506126fc60e08e01612595565b94506101008d0135935067ffffffffffffffff6101208e0135111561272057600080fd5b6127318e6101208f01358f016125fd565b925067ffffffffffffffff6101408e0135111561274d57600080fd5b61275e8e6101408f01358f016125fd565b915067ffffffffffffffff6101608e0135111561277a57600080fd5b61278b8e6101608f01358f016125fd565b90509295989b509295989b509295989b565b6000602082840312156127af57600080fd5b813567ffffffffffffffff8111156127c657600080fd5b6127d2848285016125fd565b949350505050565b60005b838110156127f55781810151838201526020016127dd565b838111156124e15750506000910152565b6000815180845261281e8160208601602086016127da565b601f01601f19169290920160200192915050565b6020815260006128456020830184612806565b9392505050565b60006020828403121561285e57600080fd5b813561284581612580565b6000806040838503121561287c57600080fd5b823561288781612580565b946020939093013593505050565b6000602082840312156128a757600080fd5b5035919050565b600080604083850312156128c157600080fd5b8235915060208301356125dc81612580565b60008083601f8401126128e557600080fd5b50813567ffffffffffffffff8111156128fd57600080fd5b60208301915083602082850101111561291557600080fd5b9250929050565b6000806000806000806080878903121561293557600080fd5b863561294081612580565b955060208701359450604087013567ffffffffffffffff8082111561296457600080fd5b6129708a838b016128d3565b9096509450606089013591508082111561298957600080fd5b5061299689828a016128d3565b979a9699509497509295939492505050565b6000806000606084860312156129bd57600080fd5b8335925060208401356129cf81612580565b929592945050506040919091013590565b6000806000806000806000806000806101408b8d031215612a0057600080fd5b612a098b612595565b9950612a1760208c01612595565b985060408b0135975060608b0135965060808b0135955060a08b01359450612a4160c08c01612595565b935060e08b013592506101008b013567ffffffffffffffff80821115612a6657600080fd5b612a728e838f016125fd565b93506101208d0135915080821115612a8957600080fd5b50612a968d828e016125fd565b9150509295989b9194979a5092959850565b6001600160a01b038716815285602082015284604082015283606082015260c060808201526000612adc60c0830185612806565b82810360a0840152612aee8185612806565b9998505050505050505050565b6001600160a01b03831681526040602082015260006127d26040830184612806565b600060208284031215612b2f57600080fd5b815161284581612580565b60006001600160a01b03808716835280861660208401525060606040830152826060830152828460808401376000608084840101526080601f19601f850116830101905095945050505050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60008251612bbf8184602087016127da565b9190910192915050565b600060208284031215612bdb57600080fd5b8151612845816125a0565b600181811c90821680612bfa57607f821691505b602082108103612c1a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe68747470733a2f2f6170692d6e667464726f702e6178656c61727365612e636f6d2f746f6b656e4d657461646174612f4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742968747470733a2f2f6170692d6e667464726f702e6178656c61727365612e636f6d2f636f6e74726163744d657461646174612fa264697066735822122072173d37551c0a49a7d184cd34913433fe3d21b60a77d6488b01c525db3f28a664736f6c634300080d0033",
  "devdoc": {
    "errors": {
      "BadContractSignature()": [
        {
          "details": "Revert with an error when an EIP-1271 call to an account fails."
        }
      ],
      "BadSignatureV(uint8)": [
        {
          "details": "Revert with an error when a signature that does not contain a v      value of 27 or 28 has been supplied.",
          "params": {
            "v": "The invalid v value."
          }
        }
      ],
      "InvalidSignature()": [
        {
          "details": "Revert with an error when a signer cannot be recovered from the      supplied signature."
        }
      ],
      "InvalidSigner()": [
        {
          "details": "Revert with an error when the signer recovered by the supplied      signature does not match the offerer or an allowed EIP-1271 signer      as specified by the offerer in the event they are a contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 625,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4259,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "domainSeperator",
        "offset": 0,
        "slot": "101",
        "type": "t_bytes32"
      },
      {
        "astId": 4373,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "nonces",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 296,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5325,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "operators",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5329,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "templates",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5333,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "minterTemplates",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5337,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "axelarSeaContract",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5341,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "projectOwner",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 5345,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "nftProject",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 5351,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "projectMember",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5355,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "collectionMapping",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 5357,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "feeAddress",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      },
      {
        "astId": 5359,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "baseMintFee",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 5361,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "baseContractURI",
        "offset": 0,
        "slot": "163",
        "type": "t_string_storage"
      },
      {
        "astId": 5363,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "164",
        "type": "t_string_storage"
      },
      {
        "astId": 5365,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "newProjectFeeAddress",
        "offset": 0,
        "slot": "165",
        "type": "t_address"
      },
      {
        "astId": 5367,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "newProjectFeeAmount",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 5369,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "newCollectionFeeAddress",
        "offset": 0,
        "slot": "167",
        "type": "t_address"
      },
      {
        "astId": 5371,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "newCollectionFeeAmount",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 5375,
        "contract": "contracts/mint/AxelarSeaProjectRegistry.sol:AxelarSeaProjectRegistry",
        "label": "__GAP",
        "offset": 0,
        "slot": "169",
        "type": "t_array(t_uint256)200_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)200_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[200]",
        "numberOfBytes": "6400"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}